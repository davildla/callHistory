{"ast":null,"code":"import { Transaction } from \"./transaction.js\";\n/**\n * Client Transaction.\n * @remarks\n * The client transaction provides its functionality through the\n * maintenance of a state machine.\n *\n * The TU communicates with the client transaction through a simple\n * interface.  When the TU wishes to initiate a new transaction, it\n * creates a client transaction and passes it the SIP request to send\n * and an IP address, port, and transport to which to send it.  The\n * client transaction begins execution of its state machine.  Valid\n * responses are passed up to the TU from the client transaction.\n * https://tools.ietf.org/html/rfc3261#section-17.1\n * @public\n */\n\nexport class ClientTransaction extends Transaction {\n  constructor(_request, transport, user, state, loggerCategory) {\n    super(transport, user, ClientTransaction.makeId(_request), state, loggerCategory);\n    this._request = _request;\n    this.user = user; // The Via header field indicates the transport used for the transaction\n    // and identifies the location where the response is to be sent.  A Via\n    // header field value is added only after the transport that will be\n    // used to reach the next hop has been selected (which may involve the\n    // usage of the procedures in [4]).\n    // https://tools.ietf.org/html/rfc3261#section-8.1.1.7\n\n    _request.setViaHeader(this.id, transport.protocol);\n  }\n\n  static makeId(request) {\n    if (request.method === \"CANCEL\") {\n      if (!request.branch) {\n        throw new Error(\"Outgoing CANCEL request without a branch.\");\n      }\n\n      return request.branch;\n    } else {\n      return \"z9hG4bK\" + Math.floor(Math.random() * 10000000);\n    }\n  }\n  /** The outgoing request the transaction handling. */\n\n\n  get request() {\n    return this._request;\n  }\n  /**\n   * A 408 to non-INVITE will always arrive too late to be useful ([3]),\n   * The client already has full knowledge of the timeout. The only\n   * information this message would convey is whether or not the server\n   * believed the transaction timed out. However, with the current design\n   * of the NIT, a client cannot do anything with this knowledge. Thus,\n   * the 408 is simply wasting network resources and contributes to the\n   * response bombardment illustrated in [3].\n   * https://tools.ietf.org/html/rfc4320#section-4.1\n   */\n\n\n  onRequestTimeout() {\n    if (this.user.onRequestTimeout) {\n      this.user.onRequestTimeout();\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}