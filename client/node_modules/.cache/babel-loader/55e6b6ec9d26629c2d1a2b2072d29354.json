{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LogLevelModule = require(\"loglevel\");\n\nvar constants_1 = require(\"./constants\");\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\n\n\nvar Log =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  function Log(options) {\n    this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(constants_1.PACKAGE_NAME);\n  }\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n\n\n  Log.getInstance = function () {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n\n    return Log.instance;\n  };\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n\n\n  Log.prototype.debug = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).debug.apply(_a, args);\n  };\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n\n\n  Log.prototype.error = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).error.apply(_a, args);\n  };\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n\n\n  Log.prototype.info = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).info.apply(_a, args);\n  };\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n\n\n  Log.prototype.setDefaultLevel = function (level) {\n    this._log.setDefaultLevel(level);\n  };\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n\n\n  Log.prototype.warn = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).warn.apply(_a, args);\n  };\n  /**\n   * Log levels\n   */\n\n\n  Log.levels = LogLevelModule.levels;\n  return Log;\n}();\n\nexports.default = Log; //# sourceMappingURL=log.js.map","map":null,"metadata":{},"sourceType":"script"}