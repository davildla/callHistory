{"ast":null,"code":"import _slicedToArray from \"/home/david/Desktop/workSpace/bots-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme, styled, useThemeProps as useThemProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport clsx from 'clsx';\nimport { PickersYear } from './PickersYear';\nimport { useUtils, useNow, useDefaultDates } from '../internals/hooks/useUtils';\nimport { WrapperVariantContext } from '../internals/components/wrappers/WrapperVariantContext';\nimport { getYearPickerUtilityClass } from './yearPickerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getYearPickerUtilityClass, classes);\n};\n\nvar YearPickerRoot = styled('div', {\n  name: 'MuiYearPicker',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  overflowY: 'auto',\n  height: '100%',\n  margin: '0 4px'\n});\nexport var YearPicker = /*#__PURE__*/React.forwardRef(function YearPicker(inProps, ref) {\n  var now = useNow();\n  var theme = useTheme();\n  var utils = useUtils();\n  var defaultProps = useDefaultDates();\n  var props = useThemProps({\n    props: inProps,\n    name: 'MuiYearPicker'\n  });\n  var autoFocus = props.autoFocus,\n      className = props.className,\n      date = props.date,\n      disabled = props.disabled,\n      disableFuture = props.disableFuture,\n      disablePast = props.disablePast,\n      _props$maxDate = props.maxDate,\n      maxDate = _props$maxDate === void 0 ? defaultProps.maxDate : _props$maxDate,\n      _props$minDate = props.minDate,\n      minDate = _props$minDate === void 0 ? defaultProps.minDate : _props$minDate,\n      onChange = props.onChange,\n      readOnly = props.readOnly,\n      shouldDisableYear = props.shouldDisableYear,\n      disableHighlightToday = props.disableHighlightToday;\n  var ownerState = props;\n  var classes = useUtilityClasses(ownerState);\n  var selectedDateOrToday = date != null ? date : now;\n  var currentYear = React.useMemo(function () {\n    if (date != null) {\n      return utils.getYear(date);\n    }\n\n    if (disableHighlightToday) {\n      return null;\n    }\n\n    return utils.getYear(now);\n  }, [now, date, utils, disableHighlightToday]);\n  var wrapperVariant = React.useContext(WrapperVariantContext);\n  var selectedYearRef = React.useRef(null);\n\n  var _React$useState = React.useState(currentYear),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedYear = _React$useState2[0],\n      setFocusedYear = _React$useState2[1];\n\n  var isYearDisabled = React.useCallback(function (dateToValidate) {\n    if (disablePast && utils.isBeforeYear(dateToValidate, now)) {\n      return true;\n    }\n\n    if (disableFuture && utils.isAfterYear(dateToValidate, now)) {\n      return true;\n    }\n\n    if (minDate && utils.isBeforeYear(dateToValidate, minDate)) {\n      return true;\n    }\n\n    if (maxDate && utils.isAfterYear(dateToValidate, maxDate)) {\n      return true;\n    }\n\n    if (shouldDisableYear && shouldDisableYear(dateToValidate)) {\n      return true;\n    }\n\n    return false;\n  }, [disableFuture, disablePast, maxDate, minDate, now, shouldDisableYear, utils]);\n\n  var handleYearSelection = function handleYearSelection(event, year) {\n    var isFinish = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'finish';\n\n    if (readOnly) {\n      return;\n    }\n\n    var newDate = utils.setYear(selectedDateOrToday, year);\n    onChange(newDate, isFinish);\n  };\n\n  var focusYear = React.useCallback(function (year) {\n    if (!isYearDisabled(utils.setYear(selectedDateOrToday, year))) {\n      setFocusedYear(year);\n    }\n  }, [selectedDateOrToday, isYearDisabled, utils]);\n  var yearsInRow = wrapperVariant === 'desktop' ? 4 : 3;\n\n  var handleKeyDown = function handleKeyDown(event, year) {\n    switch (event.key) {\n      case 'ArrowUp':\n        focusYear(year - yearsInRow);\n        event.preventDefault();\n        break;\n\n      case 'ArrowDown':\n        focusYear(year + yearsInRow);\n        event.preventDefault();\n        break;\n\n      case 'ArrowLeft':\n        focusYear(year + (theme.direction === 'ltr' ? -1 : 1));\n        event.preventDefault();\n        break;\n\n      case 'ArrowRight':\n        focusYear(year + (theme.direction === 'ltr' ? 1 : -1));\n        event.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsx(YearPickerRoot, {\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    children: utils.getYearRange(minDate, maxDate).map(function (year) {\n      var yearNumber = utils.getYear(year);\n      var selected = yearNumber === currentYear;\n      return /*#__PURE__*/_jsx(PickersYear, {\n        selected: selected,\n        value: yearNumber,\n        onClick: handleYearSelection,\n        onKeyDown: handleKeyDown,\n        autoFocus: autoFocus && yearNumber === focusedYear,\n        ref: selected ? selectedYearRef : undefined,\n        disabled: disabled || isYearDisabled(year),\n        children: utils.format(year, 'year')\n      }, utils.format(year, 'year'));\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? YearPicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  autoFocus: PropTypes.bool,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  date: PropTypes.any,\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n  onChange: PropTypes.func.isRequired,\n  onFocusedDayChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func\n} : void 0;","map":null,"metadata":{},"sourceType":"module"}