{"ast":null,"code":"import { Grammar } from \"../grammar/grammar.js\";\nimport { C } from \"../core/messages/methods/constants.js\";\n/**\n * A messager sends a {@link Message} (outgoing MESSAGE).\n * @public\n */\n\nexport class Messager {\n  /**\n   * Constructs a new instance of the `Messager` class.\n   * @param userAgent - User agent. See {@link UserAgent} for details.\n   * @param targetURI - Request URI identifying the target of the message.\n   * @param content - Content for the body of the message.\n   * @param contentType - Content type of the body of the message.\n   * @param options - Options bucket. See {@link MessagerOptions} for details.\n   */\n  constructor(userAgent, targetURI, content) {\n    let contentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"text/plain\";\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    // Logger\n    this.logger = userAgent.getLogger(\"sip.Messager\"); // Default options params\n\n    options.params = options.params || {}; // URIs\n\n    let fromURI = userAgent.userAgentCore.configuration.aor;\n\n    if (options.params.fromUri) {\n      fromURI = typeof options.params.fromUri === \"string\" ? Grammar.URIParse(options.params.fromUri) : options.params.fromUri;\n    }\n\n    if (!fromURI) {\n      throw new TypeError(\"Invalid from URI: \" + options.params.fromUri);\n    }\n\n    let toURI = targetURI;\n\n    if (options.params.toUri) {\n      toURI = typeof options.params.toUri === \"string\" ? Grammar.URIParse(options.params.toUri) : options.params.toUri;\n    }\n\n    if (!toURI) {\n      throw new TypeError(\"Invalid to URI: \" + options.params.toUri);\n    } // Message params\n\n\n    const params = options.params ? Object.assign({}, options.params) : {}; // Extra headers\n\n    const extraHeaders = (options.extraHeaders || []).slice(); // Body\n\n    const contentDisposition = \"render\";\n    const body = {\n      contentDisposition,\n      contentType,\n      content\n    }; // Build the request\n\n    this.request = userAgent.userAgentCore.makeOutgoingRequestMessage(C.MESSAGE, targetURI, fromURI, toURI, params, extraHeaders, body); // User agent\n\n    this.userAgent = userAgent;\n  }\n  /**\n   * Send the message.\n   */\n\n\n  message() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.userAgent.userAgentCore.request(this.request, options.requestDelegate);\n    return Promise.resolve();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}