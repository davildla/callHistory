{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nvar _ = require('lodash');\n\nvar scmp = require('scmp');\n\nvar urllib = require('url');\n\nvar Url = require('url-parse');\n/**\n * Utility function to construct the URL string, since Node.js url library won't include standard port numbers\n *\n * @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n * @returns {string} - URL with standard port number included\n */\n\n\nfunction buildUrlWithStandardPort(parsedUrl) {\n  let url = '';\n  const port = parsedUrl.protocol === 'https:' ? ':443' : ':80';\n  url += parsedUrl.protocol ? parsedUrl.protocol + '//' : '';\n  url += parsedUrl.username;\n  url += parsedUrl.password ? ':' + parsedUrl.password : '';\n  url += parsedUrl.username || parsedUrl.password ? '@' : '';\n  url += parsedUrl.host ? parsedUrl.host + port : '';\n  url += parsedUrl.pathname + parsedUrl.query + parsedUrl.hash;\n  return url;\n}\n/**\n Utility function to add a port number to a URL\n\n @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n @returns {string} - URL with port\n */\n\n\nfunction addPort(parsedUrl) {\n  if (!parsedUrl.port) {\n    return buildUrlWithStandardPort(parsedUrl);\n  }\n\n  return parsedUrl.toString();\n}\n/**\n Utility function to remove a port number from a URL\n\n @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n @returns {string} - URL without port\n */\n\n\nfunction removePort(parsedUrl) {\n  parsedUrl.set('port', '');\n  return parsedUrl.toString();\n}\n/**\n Utility function to convert request parameter to a string format\n\n @param {string} paramName - The request parameter name\n @param {string|array<string>} paramValue - The request parameter value\n @returns {string} - Formatted parameter string\n */\n\n\nfunction toFormUrlEncodedParam(paramName, paramValue) {\n  if (paramValue instanceof Array) {\n    return Array.from(new Set(paramValue)).sort().map(val => toFormUrlEncodedParam(paramName, val)).reduce((acc, val) => acc + val, '');\n  }\n\n  return paramName + paramValue;\n}\n/**\n Utility function to get the expected signature for a given request\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {string} - signature\n */\n\n\nfunction getExpectedTwilioSignature(authToken, url, params) {\n  if (url.indexOf('bodySHA256') !== -1 && params === null) {\n    params = {};\n  }\n\n  var data = Object.keys(params).sort().reduce((acc, key) => acc + toFormUrlEncodedParam(key, params[key]), url);\n  return crypto.createHmac('sha1', authToken).update(Buffer.from(data, 'utf-8')).digest('base64');\n}\n/**\n Utility function to get the expected body hash for a given request's body\n\n @param {string} body - The plain-text body of the request\n */\n\n\nfunction getExpectedBodyHash(body) {\n  return crypto.createHash('sha256').update(Buffer.from(body, 'utf-8')).digest('hex');\n}\n/**\n Utility function to validate an incoming request is indeed from Twilio\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {boolean} - valid\n */\n\n\nfunction validateRequest(authToken, twilioHeader, url, params) {\n  twilioHeader = twilioHeader || '';\n  const urlObject = new Url(url);\n  const urlWithPort = addPort(urlObject);\n  const urlWithoutPort = removePort(urlObject);\n  /*\n   *  Check signature of the url with and without the port number\n   *  since signature generation on the back end is inconsistent\n   */\n\n  const signatureWithPort = getExpectedTwilioSignature(authToken, urlWithPort, params);\n  const signatureWithoutPort = getExpectedTwilioSignature(authToken, urlWithoutPort, params);\n  const validSignatureWithPort = scmp(Buffer.from(twilioHeader), Buffer.from(signatureWithPort));\n  const validSignatureWithoutPort = scmp(Buffer.from(twilioHeader), Buffer.from(signatureWithoutPort));\n  return validSignatureWithoutPort || validSignatureWithPort;\n}\n\nfunction validateBody(body, bodyHash) {\n  var expectedHash = getExpectedBodyHash(body);\n  return scmp(Buffer.from(bodyHash), Buffer.from(expectedHash));\n}\n/**\n Utility function to validate an incoming request is indeed from Twilio. This also validates\n the request body against the bodySHA256 post parameter.\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {string} body - The body of the request\n @returns {boolean} - valid\n */\n\n\nfunction validateRequestWithBody(authToken, twilioHeader, url, body) {\n  const urlObject = new Url(url, true);\n  return validateRequest(authToken, twilioHeader, url, {}) && validateBody(body, urlObject.query.bodySHA256);\n}\n/**\n Utility function to validate an incoming request is indeed from Twilio (for use with express).\n adapted from https://github.com/crabasa/twiliosig\n\n @param {object} request - An expressjs request object (http://expressjs.com/api.html#req.params)\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {object} opts - options for request validation:\n    - url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n    - host: manually specify the host name used by Twilio in a number's webhook config\n    - protocol: manually specify the protocol used by Twilio in a number's webhook config\n */\n\n\nfunction validateExpressRequest(request, authToken, opts) {\n  var options = opts || {};\n  var webhookUrl;\n\n  if (options.url) {\n    // Let the user specify the full URL\n    webhookUrl = options.url;\n  } else {\n    // Use configured host/protocol, or infer based on request\n    var protocol = options.protocol || request.protocol;\n    var host = options.host || request.headers.host;\n    webhookUrl = urllib.format({\n      protocol: protocol,\n      host: host,\n      pathname: request.originalUrl\n    });\n\n    if (request.originalUrl.search(/\\?/) >= 0) {\n      webhookUrl = webhookUrl.replace(/%3F/g, '?');\n    }\n  }\n\n  if (webhookUrl.indexOf('bodySHA256') > 0) {\n    return validateRequestWithBody(authToken, request.header('X-Twilio-Signature'), webhookUrl, request.rawBody || '{}');\n  } else {\n    return validateRequest(authToken, request.header('X-Twilio-Signature'), webhookUrl, request.body || {});\n  }\n}\n/**\nExpress middleware to accompany a Twilio webhook. Provides Twilio\nrequest validation, and makes the response a little more friendly for our\nTwiML generator.  Request validation requires the express.urlencoded middleware\nto have been applied (e.g. app.use(express.urlencoded()); in your app config).\n\nOptions:\n- validate: {Boolean} whether or not the middleware should validate the request\n    came from Twilio.  Default true. If the request does not originate from\n    Twilio, we will return a text body and a 403.  If there is no configured\n    auth token and validate=true, this is an error condition, so we will return\n    a 500.\n- host: manually specify the host name used by Twilio in a number's webhook config\n- protocol: manually specify the protocol used by Twilio in a number's webhook config\n- url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n\nReturns a middleware function.\n\nExamples:\nvar webhookMiddleware = twilio.webhook();\nvar webhookMiddleware = twilio.webhook('asdha9dhjasd'); //init with auth token\nvar webhookMiddleware = twilio.webhook({\n    validate:false // don't attempt request validation\n});\nvar webhookMiddleware = twilio.webhook({\n    host: 'hook.twilio.com',\n    protocol: 'https'\n});\n */\n\n\nfunction webhook() {\n  var opts = {\n    validate: true\n  }; // Process arguments\n\n  var tokenString;\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    var arg = arguments[i];\n\n    if (typeof arg === 'string') {\n      tokenString = arg;\n    } else {\n      opts = _.extend(opts, arg);\n    }\n  } // set auth token from input or environment variable\n\n\n  opts.authToken = tokenString ? tokenString : process.env.TWILIO_AUTH_TOKEN; // Create middleware function\n\n  return function hook(request, response, next) {\n    // Do validation if requested\n    if (opts.validate) {\n      // Check if the 'X-Twilio-Signature' header exists or not\n      if (!request.header('X-Twilio-Signature')) {\n        return response.type('text/plain').status(400).send('No signature header error - X-Twilio-Signature header does not exist, maybe this request is not coming from Twilio.');\n      } // Check for a valid auth token\n\n\n      if (!opts.authToken) {\n        console.error('[Twilio]: Error - Twilio auth token is required for webhook request validation.');\n        response.type('text/plain').status(500).send('Webhook Error - we attempted to validate this request without first configuring our auth token.');\n      } else {\n        // Check that the request originated from Twilio\n        var valid = validateExpressRequest(request, opts.authToken, {\n          url: opts.url,\n          host: opts.host,\n          protocol: opts.protocol\n        });\n\n        if (valid) {\n          next();\n        } else {\n          return response.type('text/plain').status(403).send('Twilio Request Validation Failed.');\n        }\n      }\n    } else {\n      next();\n    }\n  };\n}\n\nmodule.exports = {\n  getExpectedTwilioSignature,\n  getExpectedBodyHash,\n  validateRequest,\n  validateRequestWithBody,\n  validateExpressRequest,\n  validateBody,\n  webhook\n};","map":{"version":3,"names":["crypto","require","_","scmp","urllib","Url","buildUrlWithStandardPort","parsedUrl","url","port","protocol","username","password","host","pathname","query","hash","addPort","toString","removePort","set","toFormUrlEncodedParam","paramName","paramValue","Array","from","Set","sort","map","val","reduce","acc","getExpectedTwilioSignature","authToken","params","indexOf","data","Object","keys","key","createHmac","update","Buffer","digest","getExpectedBodyHash","body","createHash","validateRequest","twilioHeader","urlObject","urlWithPort","urlWithoutPort","signatureWithPort","signatureWithoutPort","validSignatureWithPort","validSignatureWithoutPort","validateBody","bodyHash","expectedHash","validateRequestWithBody","bodySHA256","validateExpressRequest","request","opts","options","webhookUrl","headers","format","originalUrl","search","replace","header","rawBody","webhook","validate","tokenString","i","l","arguments","length","arg","extend","process","env","TWILIO_AUTH_TOKEN","hook","response","next","type","status","send","console","error","valid","module","exports"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio/lib/webhooks/webhooks.js"],"sourcesContent":["'use strict';\n\nvar crypto = require('crypto');\nvar _ = require('lodash');\nvar scmp = require('scmp');\nvar urllib = require('url');\nvar Url = require('url-parse');\n\n/**\n * Utility function to construct the URL string, since Node.js url library won't include standard port numbers\n *\n * @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n * @returns {string} - URL with standard port number included\n */\nfunction buildUrlWithStandardPort(parsedUrl) {\n  let url = '';\n  const port = parsedUrl.protocol === 'https:' ? ':443' : ':80';\n\n  url += parsedUrl.protocol ? parsedUrl.protocol + '//' : '';\n  url += parsedUrl.username;\n  url += parsedUrl.password ? ':' + parsedUrl.password : '';\n  url += (parsedUrl.username || parsedUrl.password) ? '@' : '';\n  url += parsedUrl.host ? parsedUrl.host + port : '';\n  url += parsedUrl.pathname + parsedUrl.query + parsedUrl.hash;\n\n  return url;\n}\n\n/**\n Utility function to add a port number to a URL\n\n @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n @returns {string} - URL with port\n */\nfunction addPort(parsedUrl) {\n  if (!parsedUrl.port) {\n    return buildUrlWithStandardPort(parsedUrl);\n  }\n  return parsedUrl.toString();\n}\n\n/**\n Utility function to remove a port number from a URL\n\n @param {Url} parsedUrl - The parsed url object that Twilio requested on your server\n @returns {string} - URL without port\n */\nfunction removePort(parsedUrl) {\n  parsedUrl.set('port', '');\n  return parsedUrl.toString();\n}\n\n/**\n Utility function to convert request parameter to a string format\n\n @param {string} paramName - The request parameter name\n @param {string|array<string>} paramValue - The request parameter value\n @returns {string} - Formatted parameter string\n */\nfunction toFormUrlEncodedParam(paramName, paramValue) {\n  if (paramValue instanceof Array) {\n    return Array.from(new Set(paramValue))\n      .sort()\n      .map(val => toFormUrlEncodedParam(paramName, val))\n      .reduce((acc, val) => acc + val, '');\n  }\n  return paramName + paramValue;\n}\n\n/**\n Utility function to get the expected signature for a given request\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {string} - signature\n */\nfunction getExpectedTwilioSignature(authToken, url, params) {\n  if (url.indexOf('bodySHA256') !== -1 && params === null) {\n    params = {};\n  }\n\n  var data = Object.keys(params)\n    .sort()\n    .reduce((acc, key) => acc + toFormUrlEncodedParam(key, params[key]), url);\n\n  return crypto\n    .createHmac('sha1', authToken)\n    .update(Buffer.from(data, 'utf-8'))\n    .digest('base64');\n}\n\n/**\n Utility function to get the expected body hash for a given request's body\n\n @param {string} body - The plain-text body of the request\n */\nfunction getExpectedBodyHash(body) {\n  return crypto\n    .createHash('sha256')\n    .update(Buffer.from(body, 'utf-8'))\n    .digest('hex');\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {boolean} - valid\n */\nfunction validateRequest(authToken, twilioHeader, url, params) {\n  twilioHeader = twilioHeader || '';\n  const urlObject = new Url(url);\n  const urlWithPort = addPort(urlObject);\n  const urlWithoutPort = removePort(urlObject);\n\n  /*\n   *  Check signature of the url with and without the port number\n   *  since signature generation on the back end is inconsistent\n   */\n  const signatureWithPort = getExpectedTwilioSignature(authToken, urlWithPort, params);\n  const signatureWithoutPort = getExpectedTwilioSignature(authToken, urlWithoutPort, params);\n  const validSignatureWithPort = scmp(Buffer.from(twilioHeader), Buffer.from(signatureWithPort));\n  const validSignatureWithoutPort = scmp(Buffer.from(twilioHeader), Buffer.from(signatureWithoutPort));\n\n  return validSignatureWithoutPort || validSignatureWithPort;\n}\n\nfunction validateBody(body, bodyHash) {\n  var expectedHash = getExpectedBodyHash(body);\n  return scmp(Buffer.from(bodyHash), Buffer.from(expectedHash));\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio. This also validates\n the request body against the bodySHA256 post parameter.\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {string} body - The body of the request\n @returns {boolean} - valid\n */\nfunction validateRequestWithBody(authToken, twilioHeader, url, body) {\n  const urlObject = new Url(url, true);\n  return validateRequest(authToken, twilioHeader, url, {}) &&\n    validateBody(body, urlObject.query.bodySHA256);\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio (for use with express).\n adapted from https://github.com/crabasa/twiliosig\n\n @param {object} request - An expressjs request object (http://expressjs.com/api.html#req.params)\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {object} opts - options for request validation:\n    - url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n    - host: manually specify the host name used by Twilio in a number's webhook config\n    - protocol: manually specify the protocol used by Twilio in a number's webhook config\n */\nfunction validateExpressRequest(request, authToken, opts) {\n  var options = opts || {};\n  var webhookUrl;\n\n  if (options.url) {\n    // Let the user specify the full URL\n    webhookUrl = options.url;\n  } else {\n    // Use configured host/protocol, or infer based on request\n    var protocol = options.protocol || request.protocol;\n    var host = options.host || request.headers.host;\n\n    webhookUrl = urllib.format({\n      protocol: protocol,\n      host: host,\n      pathname: request.originalUrl,\n    });\n    if (request.originalUrl.search(/\\?/) >= 0) {\n      webhookUrl = webhookUrl.replace(/%3F/g, '?');\n    }\n\n  }\n\n  if (webhookUrl.indexOf('bodySHA256') > 0) {\n    return validateRequestWithBody(\n      authToken,\n      request.header('X-Twilio-Signature'),\n      webhookUrl,\n      request.rawBody || '{}'\n    );\n  } else {\n    return validateRequest(\n      authToken,\n      request.header('X-Twilio-Signature'),\n      webhookUrl,\n      request.body || {}\n    );\n  }\n}\n\n/**\nExpress middleware to accompany a Twilio webhook. Provides Twilio\nrequest validation, and makes the response a little more friendly for our\nTwiML generator.  Request validation requires the express.urlencoded middleware\nto have been applied (e.g. app.use(express.urlencoded()); in your app config).\n\nOptions:\n- validate: {Boolean} whether or not the middleware should validate the request\n    came from Twilio.  Default true. If the request does not originate from\n    Twilio, we will return a text body and a 403.  If there is no configured\n    auth token and validate=true, this is an error condition, so we will return\n    a 500.\n- host: manually specify the host name used by Twilio in a number's webhook config\n- protocol: manually specify the protocol used by Twilio in a number's webhook config\n- url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n\nReturns a middleware function.\n\nExamples:\nvar webhookMiddleware = twilio.webhook();\nvar webhookMiddleware = twilio.webhook('asdha9dhjasd'); //init with auth token\nvar webhookMiddleware = twilio.webhook({\n    validate:false // don't attempt request validation\n});\nvar webhookMiddleware = twilio.webhook({\n    host: 'hook.twilio.com',\n    protocol: 'https'\n});\n */\nfunction webhook() {\n  var opts = {\n    validate: true,\n  };\n\n  // Process arguments\n  var tokenString;\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    var arg = arguments[i];\n    if (typeof arg === 'string') {\n      tokenString = arg;\n    } else {\n      opts = _.extend(opts, arg);\n    }\n  }\n\n  // set auth token from input or environment variable\n  opts.authToken = tokenString ? tokenString : process.env.TWILIO_AUTH_TOKEN;\n\n  // Create middleware function\n  return function hook(request, response, next) {\n    // Do validation if requested\n    if (opts.validate) {\n      // Check if the 'X-Twilio-Signature' header exists or not\n      if (!request.header('X-Twilio-Signature')) {\n        return response.type('text/plain')\n          .status(400)\n          .send('No signature header error - X-Twilio-Signature header does not exist, maybe this request is not coming from Twilio.');\n      }\n      // Check for a valid auth token\n      if (!opts.authToken) {\n        console.error('[Twilio]: Error - Twilio auth token is required for webhook request validation.');\n        response.type('text/plain')\n          .status(500)\n          .send('Webhook Error - we attempted to validate this request without first configuring our auth token.');\n      } else {\n        // Check that the request originated from Twilio\n        var valid = validateExpressRequest(request, opts.authToken, {\n          url: opts.url,\n          host: opts.host,\n          protocol: opts.protocol,\n        });\n\n        if (valid) {\n          next();\n        } else {\n          return response\n            .type('text/plain')\n            .status(403)\n            .send('Twilio Request Validation Failed.');\n        }\n      }\n    } else {\n      next();\n    }\n  };\n}\n\nmodule.exports = {\n  getExpectedTwilioSignature,\n  getExpectedBodyHash,\n  validateRequest,\n  validateRequestWithBody,\n  validateExpressRequest,\n  validateBody,\n  webhook,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}