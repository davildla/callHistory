{"ast":null,"code":"import { InviteServerTransaction } from \"../transactions/invite-server-transaction.js\";\nimport { UserAgentServer } from \"./user-agent-server.js\";\n/**\n * Re-INVITE UAS.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.2 UAS Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.2\n * @public\n */\n\nexport class ReInviteUserAgentServer extends UserAgentServer {\n  constructor(dialog, message, delegate) {\n    super(InviteServerTransaction, dialog.userAgentCore, message, delegate);\n    dialog.reinviteUserAgentServer = this;\n    this.dialog = dialog;\n  }\n  /**\n   * Update the dialog signaling state on a 2xx response.\n   * @param options - Options bucket.\n   */\n\n\n  accept() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      statusCode: 200\n    };\n    // FIXME: The next two lines SHOULD go away, but I suppose it's technically harmless...\n    // These are here because some versions of SIP.js prior to 0.13.8 set the route set\n    // of all in dialog ACKs based on the Record-Route headers in the associated 2xx\n    // response. While this worked for dialog forming 2xx responses, it was technically\n    // broken for re-INVITE ACKS as it only worked if the UAS populated the Record-Route\n    // headers in the re-INVITE 2xx response (which is not required and a waste of bandwidth\n    // as the should be ignored if present in re-INVITE ACKS) and the UAS populated\n    // the Record-Route headers with the correct values (would be weird not too, but...).\n    // Anyway, for now the technically useless Record-Route headers are being added\n    // to maintain \"backwards compatibility\" with the older broken versions of SIP.js.\n    options.extraHeaders = options.extraHeaders || [];\n    options.extraHeaders = options.extraHeaders.concat(this.dialog.routeSet.map(route => `Record-Route: ${route}`)); // Send and return the response\n\n    const response = super.accept(options);\n    const session = this.dialog;\n    const result = Object.assign(Object.assign({}, response), {\n      session\n    });\n\n    if (options.body) {\n      // Update dialog signaling state with offer/answer in body\n      this.dialog.signalingStateTransition(options.body);\n    } // Update dialog\n\n\n    this.dialog.reConfirm();\n    return result;\n  }\n  /**\n   * Update the dialog signaling state on a 1xx response.\n   * @param options - Progress options bucket.\n   */\n\n\n  progress() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      statusCode: 180\n    };\n    // Send and return the response\n    const response = super.progress(options);\n    const session = this.dialog;\n    const result = Object.assign(Object.assign({}, response), {\n      session\n    }); // Update dialog signaling state\n\n    if (options.body) {\n      this.dialog.signalingStateTransition(options.body);\n    }\n\n    return result;\n  }\n  /**\n   * TODO: Not Yet Supported\n   * @param contacts - Contacts to redirect to.\n   * @param options - Redirect options bucket.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  redirect(contacts) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      statusCode: 302\n    };\n    this.dialog.signalingStateRollback();\n    this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n\n    throw new Error(\"Unimplemented.\");\n  }\n  /**\n   * 3.1 Background on Re-INVITE Handling by UASs\n   * An error response to a re-INVITE has the following semantics.  As\n   * specified in Section 12.2.2 of RFC 3261 [RFC3261], if a re-INVITE is\n   * rejected, no state changes are performed.\n   * https://tools.ietf.org/html/rfc6141#section-3.1\n   * @param options - Reject options bucket.\n   */\n\n\n  reject() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      statusCode: 488\n    };\n    this.dialog.signalingStateRollback();\n    this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n\n    return super.reject(options);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}