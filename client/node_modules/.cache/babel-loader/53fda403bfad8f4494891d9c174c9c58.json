{"ast":null,"code":"import * as XLSX from 'xlsx';\n\nconst readExcel = async (file, setItems) => {\n  const promise = new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.readAsArrayBuffer(file);\n\n    fileReader.onload = e => {\n      const bufferArray = e.target.result;\n      const wb = XLSX.read(bufferArray, {\n        type: \"buffer\"\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_json(ws);\n      resolve(data);\n    };\n\n    fileReader.onerror = error => {\n      reject(error);\n    };\n  });\n  promise.then(d => {\n    setItems(d);\n  });\n}; // the func check if number is valid, if valid return fixed number else return null\n\n\nconst validateNumber = number => {\n  number = String(number);\n  let res = null;\n  let notEmpty = number !== '';\n\n  if (number && notEmpty) {\n    // if the input exists and not empty\n    // we can check now if its a valid phone\n    let phone = number.replace(/\\D/g, ''); // remove chars that are not digits\n\n    phone = Number(phone); // remove opening '0' if have\n\n    phone = `${phone}`; // return number without opening '0' to be string\n\n    if (phone.indexOf('972') === 0) phone = phone.slice(3); // remove '972' from number if have\n    // if its a phone number\n\n    if (phone.indexOf('5') === 0 && phone.length === 9) res = `972${phone}`; // if its a landline number\n    else {\n      let prefixExitsList = ['2', '3', '4', '8', '9'].map(item => phone.indexOf(item) === 0);\n      let haveLandlinePrefix = prefixExitsList.reduce((prev, current) => prev || current);\n      if (haveLandlinePrefix && phone.length === 8) res = `972${phone}`;\n    }\n  }\n\n  return res;\n};\n\nconst funcs = {\n  readExcel,\n  validateNumber\n};\nexport default funcs;","map":{"version":3,"names":["XLSX","readExcel","file","setItems","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","onerror","error","then","d","validateNumber","number","String","res","notEmpty","phone","replace","Number","indexOf","slice","length","prefixExitsList","map","item","haveLandlinePrefix","reduce","prev","current","funcs"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/utils/utils.js"],"sourcesContent":["import * as XLSX from 'xlsx'; \n\nconst readExcel = async (file, setItems) => {\n    const promise = new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(file);\n\n        fileReader.onload = (e) => {\n            const bufferArray = e.target.result;\n    \n            const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n    \n            const wsname = wb.SheetNames[0];\n    \n            const ws = wb.Sheets[wsname];\n    \n            const data = XLSX.utils.sheet_to_json(ws);\n\n            resolve(data);\n    };\n\n        fileReader.onerror = (error) => {\n            reject(error);\n        };\n    });\n\n    promise.then((d) => {\n        setItems(d);\n    });\n};\n\n// the func check if number is valid, if valid return fixed number else return null\nconst validateNumber = (number) => {\n    number = String(number);\n    \n    let res = null;\n    let notEmpty = number !== '';\n\n    if(number && notEmpty) {\n        // if the input exists and not empty\n        // we can check now if its a valid phone\n        let phone = number.replace(/\\D/g,''); // remove chars that are not digits\n        phone = Number(phone); // remove opening '0' if have\n        phone = `${phone}`; // return number without opening '0' to be string\n\n        if (phone.indexOf('972') === 0) phone = phone.slice(3); // remove '972' from number if have\n\n        // if its a phone number\n        if (phone.indexOf('5') === 0 && phone.length === 9) res = `972${phone}`;\n\n        // if its a landline number\n        else {\n            let prefixExitsList = ['2','3','4','8','9'].map((item) => phone.indexOf(item) === 0); \n            let haveLandlinePrefix = prefixExitsList.reduce ((prev, current) => prev || current);\n\n            if (haveLandlinePrefix && phone.length === 8) res = `972${phone}`;\n        }\n    }\n    return res;\n}\n\nconst funcs = {\n    readExcel,\n    validateNumber,\n}\n\nexport default funcs;"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;;AAEA,MAAMC,SAAS,GAAG,OAAOC,IAAP,EAAaC,QAAb,KAA0B;EACxC,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IAC7C,MAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;IACAD,UAAU,CAACE,iBAAX,CAA6BR,IAA7B;;IAEAM,UAAU,CAACG,MAAX,GAAqBC,CAAD,IAAO;MACvB,MAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,MAA7B;MAEA,MAAMC,EAAE,GAAGhB,IAAI,CAACiB,IAAL,CAAUJ,WAAV,EAAuB;QAAEK,IAAI,EAAE;MAAR,CAAvB,CAAX;MAEA,MAAMC,MAAM,GAAGH,EAAE,CAACI,UAAH,CAAc,CAAd,CAAf;MAEA,MAAMC,EAAE,GAAGL,EAAE,CAACM,MAAH,CAAUH,MAAV,CAAX;MAEA,MAAMI,IAAI,GAAGvB,IAAI,CAACwB,KAAL,CAAWC,aAAX,CAAyBJ,EAAzB,CAAb;MAEAf,OAAO,CAACiB,IAAD,CAAP;IACP,CAZG;;IAcAf,UAAU,CAACkB,OAAX,GAAsBC,KAAD,IAAW;MAC5BpB,MAAM,CAACoB,KAAD,CAAN;IACH,CAFD;EAGH,CArBe,CAAhB;EAuBAvB,OAAO,CAACwB,IAAR,CAAcC,CAAD,IAAO;IAChB1B,QAAQ,CAAC0B,CAAD,CAAR;EACH,CAFD;AAGH,CA3BD,C,CA6BA;;;AACA,MAAMC,cAAc,GAAIC,MAAD,IAAY;EAC/BA,MAAM,GAAGC,MAAM,CAACD,MAAD,CAAf;EAEA,IAAIE,GAAG,GAAG,IAAV;EACA,IAAIC,QAAQ,GAAGH,MAAM,KAAK,EAA1B;;EAEA,IAAGA,MAAM,IAAIG,QAAb,EAAuB;IACnB;IACA;IACA,IAAIC,KAAK,GAAGJ,MAAM,CAACK,OAAP,CAAe,KAAf,EAAqB,EAArB,CAAZ,CAHmB,CAGmB;;IACtCD,KAAK,GAAGE,MAAM,CAACF,KAAD,CAAd,CAJmB,CAII;;IACvBA,KAAK,GAAI,GAAEA,KAAM,EAAjB,CALmB,CAKC;;IAEpB,IAAIA,KAAK,CAACG,OAAN,CAAc,KAAd,MAAyB,CAA7B,EAAgCH,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,CAAZ,CAAR,CAPb,CAOqC;IAExD;;IACA,IAAIJ,KAAK,CAACG,OAAN,CAAc,GAAd,MAAuB,CAAvB,IAA4BH,KAAK,CAACK,MAAN,KAAiB,CAAjD,EAAoDP,GAAG,GAAI,MAAKE,KAAM,EAAlB,CAApD,CAEA;IAFA,KAGK;MACD,IAAIM,eAAe,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAsBC,GAAtB,CAA2BC,IAAD,IAAUR,KAAK,CAACG,OAAN,CAAcK,IAAd,MAAwB,CAA5D,CAAtB;MACA,IAAIC,kBAAkB,GAAGH,eAAe,CAACI,MAAhB,CAAwB,CAACC,IAAD,EAAOC,OAAP,KAAmBD,IAAI,IAAIC,OAAnD,CAAzB;MAEA,IAAIH,kBAAkB,IAAIT,KAAK,CAACK,MAAN,KAAiB,CAA3C,EAA8CP,GAAG,GAAI,MAAKE,KAAM,EAAlB;IACjD;EACJ;;EACD,OAAOF,GAAP;AACH,CA3BD;;AA6BA,MAAMe,KAAK,GAAG;EACV/C,SADU;EAEV6B;AAFU,CAAd;AAKA,eAAekB,KAAf"},"metadata":{},"sourceType":"module"}