{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar TollfreeVerificationList;\nvar TollfreeVerificationPage;\nvar TollfreeVerificationInstance;\nvar TollfreeVerificationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TollfreeVerificationList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nTollfreeVerificationList = function TollfreeVerificationList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function tollfreeVerifications\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.TollfreeVerificationContext}\n   */\n\n  /* jshint ignore:end */\n  function TollfreeVerificationListInstance(sid) {\n    return TollfreeVerificationListInstance.get(sid);\n  }\n\n  TollfreeVerificationListInstance._version = version; // Path Solution\n\n  TollfreeVerificationListInstance._solution = {};\n  TollfreeVerificationListInstance._uri = `/Tollfree/Verifications`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams TollfreeVerificationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.tollfreePhoneNumberSid] -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {tollfree_verification.status} [opts.status] -\n   *          The compliance status of the Tollfree Verification record.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TollfreeVerificationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TollfreeVerificationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.tollfreePhoneNumberSid] -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {tollfree_verification.status} [opts.status] -\n   *          The compliance status of the Tollfree Verification record.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollfreeVerificationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TollfreeVerificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.tollfreePhoneNumberSid] -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {tollfree_verification.status} [opts.status] -\n   *          The compliance status of the Tollfree Verification record.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollfreeVerificationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'TollfreePhoneNumberSid': _.get(opts, 'tollfreePhoneNumberSid'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollfreeVerificationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TollfreeVerificationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollfreeVerificationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollfreeVerificationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a TollfreeVerificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.businessName -\n   *          The name of the business or organization using the Tollfree number\n   * @param {string} opts.businessWebsite -\n   *          The website of the business or organization using the Tollfree number\n   * @param {string} opts.notificationEmail -\n   *          The email address to receive the notification about the verification result.\n   * @param {string|list} opts.useCaseCategories -\n   *          The category of the use case for the Tollfree Number. List as many are applicable.\n   * @param {string} opts.useCaseSummary -\n   *          Further explaination on how messaging is used by the business or organization\n   * @param {string} opts.productionMessageSample -\n   *          An example of message content, i.e. a sample message\n   * @param {string|list} opts.optInImageUrls -\n   *          Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL\n   * @param {tollfree_verification.opt_in_type} opts.optInType -\n   *          Describe how a user opts-in to text messages\n   * @param {string} opts.messageVolume -\n   *          Estimate monthly volume of messages from the Tollfree Number\n   * @param {string} opts.tollfreePhoneNumberSid -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {string} [opts.customerProfileSid] - Customer's Profile Bundle BundleSid\n   * @param {string} [opts.businessStreetAddress] -\n   *          The address of the business or organization using the Tollfree number\n   * @param {string} [opts.businessStreetAddress2] -\n   *          The address of the business or organization using the Tollfree number\n   * @param {string} [opts.businessCity] -\n   *          The city of the business or organization using the Tollfree number\n   * @param {string} [opts.businessStateProvinceRegion] -\n   *          The state/province/region of the business or organization using the Tollfree number\n   * @param {string} [opts.businessPostalCode] -\n   *          The postal code of the business or organization using the Tollfree number\n   * @param {string} [opts.businessCountry] -\n   *          The country of the business or organization using the Tollfree number\n   * @param {string} [opts.additionalInformation] -\n   *          Additional information to be provided for verification\n   * @param {string} [opts.businessContactFirstName] -\n   *          The first name of the contact for the business or organization using the Tollfree number\n   * @param {string} [opts.businessContactLastName] -\n   *          The last name of the contact for the business or organization using the Tollfree number\n   * @param {string} [opts.businessContactEmail] -\n   *          The email address of the contact for the business or organization using the Tollfree number\n   * @param {string} [opts.businessContactPhone] -\n   *          The phone number of the contact for the business or organization using the Tollfree number\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TollfreeVerificationInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  TollfreeVerificationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['businessName'])) {\n      throw new Error('Required parameter \"opts[\\'businessName\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['businessWebsite'])) {\n      throw new Error('Required parameter \"opts[\\'businessWebsite\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['notificationEmail'])) {\n      throw new Error('Required parameter \"opts[\\'notificationEmail\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['useCaseCategories'])) {\n      throw new Error('Required parameter \"opts[\\'useCaseCategories\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['useCaseSummary'])) {\n      throw new Error('Required parameter \"opts[\\'useCaseSummary\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['productionMessageSample'])) {\n      throw new Error('Required parameter \"opts[\\'productionMessageSample\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['optInImageUrls'])) {\n      throw new Error('Required parameter \"opts[\\'optInImageUrls\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['optInType'])) {\n      throw new Error('Required parameter \"opts[\\'optInType\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['messageVolume'])) {\n      throw new Error('Required parameter \"opts[\\'messageVolume\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['tollfreePhoneNumberSid'])) {\n      throw new Error('Required parameter \"opts[\\'tollfreePhoneNumberSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'BusinessName': _.get(opts, 'businessName'),\n      'BusinessWebsite': _.get(opts, 'businessWebsite'),\n      'NotificationEmail': _.get(opts, 'notificationEmail'),\n      'UseCaseCategories': serialize.map(_.get(opts, 'useCaseCategories'), function (e) {\n        return e;\n      }),\n      'UseCaseSummary': _.get(opts, 'useCaseSummary'),\n      'ProductionMessageSample': _.get(opts, 'productionMessageSample'),\n      'OptInImageUrls': serialize.map(_.get(opts, 'optInImageUrls'), function (e) {\n        return e;\n      }),\n      'OptInType': _.get(opts, 'optInType'),\n      'MessageVolume': _.get(opts, 'messageVolume'),\n      'TollfreePhoneNumberSid': _.get(opts, 'tollfreePhoneNumberSid'),\n      'CustomerProfileSid': _.get(opts, 'customerProfileSid'),\n      'BusinessStreetAddress': _.get(opts, 'businessStreetAddress'),\n      'BusinessStreetAddress2': _.get(opts, 'businessStreetAddress2'),\n      'BusinessCity': _.get(opts, 'businessCity'),\n      'BusinessStateProvinceRegion': _.get(opts, 'businessStateProvinceRegion'),\n      'BusinessPostalCode': _.get(opts, 'businessPostalCode'),\n      'BusinessCountry': _.get(opts, 'businessCountry'),\n      'AdditionalInformation': _.get(opts, 'additionalInformation'),\n      'BusinessContactFirstName': _.get(opts, 'businessContactFirstName'),\n      'BusinessContactLastName': _.get(opts, 'businessContactLastName'),\n      'BusinessContactEmail': _.get(opts, 'businessContactEmail'),\n      'BusinessContactPhone': _.get(opts, 'businessContactPhone')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollfreeVerificationInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a tollfree_verification\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {string} sid - Tollfree Verification Sid\n   *\n   * @returns {Twilio.Messaging.V1.TollfreeVerificationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TollfreeVerificationListInstance.get = function get(sid) {\n    return new TollfreeVerificationContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TollfreeVerificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TollfreeVerificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TollfreeVerificationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TollfreeVerificationPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TollfreeVerificationSolution} solution - Path solution\n *\n * @returns TollfreeVerificationPage\n */\n\n/* jshint ignore:end */\n\n\nTollfreeVerificationPage = function TollfreeVerificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TollfreeVerificationPage.prototype, Page.prototype);\n\nTollfreeVerificationPage.prototype.constructor = TollfreeVerificationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TollfreeVerificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.TollfreeVerificationPage#\n *\n * @param {TollfreeVerificationPayload} payload - Payload response from the API\n *\n * @returns TollfreeVerificationInstance\n */\n\n/* jshint ignore:end */\n\nTollfreeVerificationPage.prototype.getInstance = function getInstance(payload) {\n  return new TollfreeVerificationInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.TollfreeVerificationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTollfreeVerificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTollfreeVerificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TollfreeVerificationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationInstance\n *\n * @property {string} sid - Tollfree Verification Sid\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} customerProfileSid - Customer's Profile Bundle BundleSid\n * @property {string} trustProductSid - Tollfree TrustProduct Bundle BundleSid\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} regulatedItemSid - The SID of the Regulated Item\n * @property {string} businessName -\n *          The name of the business or organization using the Tollfree number\n * @property {string} businessStreetAddress -\n *          The address of the business or organization using the Tollfree number\n * @property {string} businessStreetAddress2 -\n *          The address of the business or organization using the Tollfree number\n * @property {string} businessCity -\n *          The city of the business or organization using the Tollfree number\n * @property {string} businessStateProvinceRegion -\n *          The state/province/region of the business or organization using the Tollfree number\n * @property {string} businessPostalCode -\n *          The postal code of the business or organization using the Tollfree number\n * @property {string} businessCountry -\n *          The country of the business or organization using the Tollfree number\n * @property {string} businessWebsite -\n *          The website of the business or organization using the Tollfree number\n * @property {string} businessContactFirstName -\n *          The first name of the contact for the business or organization using the Tollfree number\n * @property {string} businessContactLastName -\n *          The last name of the contact for the business or organization using the Tollfree number\n * @property {string} businessContactEmail -\n *          The email address of the contact for the business or organization using the Tollfree number\n * @property {string} businessContactPhone -\n *          The phone number of the contact for the business or organization using the Tollfree number\n * @property {string} notificationEmail -\n *          The email address to receive the notification about the verification result.\n * @property {string} useCaseCategories -\n *          The category of the use case for the Tollfree Number. List as many are applicable.\n * @property {string} useCaseSummary -\n *          Further explaination on how messaging is used by the business or organization\n * @property {string} productionMessageSample -\n *          An example of message content, i.e. a sample message\n * @property {string} optInImageUrls -\n *          Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL\n * @property {tollfree_verification.opt_in_type} optInType -\n *          Describe how a user opts-in to text messages\n * @property {string} messageVolume -\n *          Estimate monthly volume of messages from the Tollfree Number\n * @property {string} additionalInformation -\n *          Additional information to be provided for verification\n * @property {string} tollfreePhoneNumberSid -\n *          The SID of the Phone Number associated with the Tollfree Verification\n * @property {tollfree_verification.status} status -\n *          The compliance status of the Tollfree Verification record.\n * @property {string} url - The absolute URL of the Tollfree Verification\n * @property {object} resourceLinks -\n *          The URLs of the documents associated with the Tollfree Verification resource\n *\n * @param {V1} version - Version of the resource\n * @param {TollfreeVerificationPayload} payload - The instance payload\n * @param {sid} sid - Tollfree Verification Sid\n */\n\n/* jshint ignore:end */\n\n\nTollfreeVerificationInstance = function TollfreeVerificationInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.customerProfileSid = payload.customer_profile_sid; // jshint ignore:line\n\n  this.trustProductSid = payload.trust_product_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.regulatedItemSid = payload.regulated_item_sid; // jshint ignore:line\n\n  this.businessName = payload.business_name; // jshint ignore:line\n\n  this.businessStreetAddress = payload.business_street_address; // jshint ignore:line\n\n  this.businessStreetAddress2 = payload.business_street_address2; // jshint ignore:line\n\n  this.businessCity = payload.business_city; // jshint ignore:line\n\n  this.businessStateProvinceRegion = payload.business_state_province_region; // jshint ignore:line\n\n  this.businessPostalCode = payload.business_postal_code; // jshint ignore:line\n\n  this.businessCountry = payload.business_country; // jshint ignore:line\n\n  this.businessWebsite = payload.business_website; // jshint ignore:line\n\n  this.businessContactFirstName = payload.business_contact_first_name; // jshint ignore:line\n\n  this.businessContactLastName = payload.business_contact_last_name; // jshint ignore:line\n\n  this.businessContactEmail = payload.business_contact_email; // jshint ignore:line\n\n  this.businessContactPhone = payload.business_contact_phone; // jshint ignore:line\n\n  this.notificationEmail = payload.notification_email; // jshint ignore:line\n\n  this.useCaseCategories = payload.use_case_categories; // jshint ignore:line\n\n  this.useCaseSummary = payload.use_case_summary; // jshint ignore:line\n\n  this.productionMessageSample = payload.production_message_sample; // jshint ignore:line\n\n  this.optInImageUrls = payload.opt_in_image_urls; // jshint ignore:line\n\n  this.optInType = payload.opt_in_type; // jshint ignore:line\n\n  this.messageVolume = payload.message_volume; // jshint ignore:line\n\n  this.additionalInformation = payload.additional_information; // jshint ignore:line\n\n  this.tollfreePhoneNumberSid = payload.tollfree_phone_number_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.resourceLinks = payload.resource_links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TollfreeVerificationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TollfreeVerificationContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TollfreeVerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.TollfreeVerificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TollfreeVerificationInstance\n */\n\n/* jshint ignore:end */\n\nTollfreeVerificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.TollfreeVerificationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTollfreeVerificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTollfreeVerificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TollfreeVerificationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - Tollfree Verification Sid\n */\n\n/* jshint ignore:end */\n\n\nTollfreeVerificationContext = function TollfreeVerificationContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Tollfree/Verifications/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TollfreeVerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.TollfreeVerificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TollfreeVerificationInstance\n */\n\n/* jshint ignore:end */\n\n\nTollfreeVerificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TollfreeVerificationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.TollfreeVerificationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTollfreeVerificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTollfreeVerificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TollfreeVerificationList: TollfreeVerificationList,\n  TollfreeVerificationPage: TollfreeVerificationPage,\n  TollfreeVerificationInstance: TollfreeVerificationInstance,\n  TollfreeVerificationContext: TollfreeVerificationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","TollfreeVerificationList","TollfreeVerificationPage","TollfreeVerificationInstance","TollfreeVerificationContext","version","TollfreeVerificationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","map","e","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","customerProfileSid","customer_profile_sid","trustProductSid","trust_product_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","regulatedItemSid","regulated_item_sid","businessName","business_name","businessStreetAddress","business_street_address","businessStreetAddress2","business_street_address2","businessCity","business_city","businessStateProvinceRegion","business_state_province_region","businessPostalCode","business_postal_code","businessCountry","business_country","businessWebsite","business_website","businessContactFirstName","business_contact_first_name","businessContactLastName","business_contact_last_name","businessContactEmail","business_contact_email","businessContactPhone","business_contact_phone","notificationEmail","notification_email","useCaseCategories","use_case_categories","useCaseSummary","use_case_summary","productionMessageSample","production_message_sample","optInImageUrls","opt_in_image_urls","optInType","opt_in_type","messageVolume","message_volume","additionalInformation","additional_information","tollfreePhoneNumberSid","tollfree_phone_number_sid","status","url","resourceLinks","resource_links","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio/lib/rest/messaging/v1/tollfreeVerification.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar TollfreeVerificationList;\nvar TollfreeVerificationPage;\nvar TollfreeVerificationInstance;\nvar TollfreeVerificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TollfreeVerificationList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nTollfreeVerificationList = function TollfreeVerificationList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function tollfreeVerifications\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.TollfreeVerificationContext}\n   */\n  /* jshint ignore:end */\n  function TollfreeVerificationListInstance(sid) {\n    return TollfreeVerificationListInstance.get(sid);\n  }\n\n  TollfreeVerificationListInstance._version = version;\n  // Path Solution\n  TollfreeVerificationListInstance._solution = {};\n  TollfreeVerificationListInstance._uri = `/Tollfree/Verifications`;\n  /* jshint ignore:start */\n  /**\n   * Streams TollfreeVerificationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.tollfreePhoneNumberSid] -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {tollfree_verification.status} [opts.status] -\n   *          The compliance status of the Tollfree Verification record.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TollfreeVerificationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TollfreeVerificationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.tollfreePhoneNumberSid] -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {tollfree_verification.status} [opts.status] -\n   *          The compliance status of the Tollfree Verification record.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollfreeVerificationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TollfreeVerificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.tollfreePhoneNumberSid] -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {tollfree_verification.status} [opts.status] -\n   *          The compliance status of the Tollfree Verification record.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollfreeVerificationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'TollfreePhoneNumberSid': _.get(opts, 'tollfreePhoneNumberSid'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollfreeVerificationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TollfreeVerificationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollfreeVerificationListInstance.getPage = function getPage(targetUrl, callback)\n                                                               {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollfreeVerificationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TollfreeVerificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.businessName -\n   *          The name of the business or organization using the Tollfree number\n   * @param {string} opts.businessWebsite -\n   *          The website of the business or organization using the Tollfree number\n   * @param {string} opts.notificationEmail -\n   *          The email address to receive the notification about the verification result.\n   * @param {string|list} opts.useCaseCategories -\n   *          The category of the use case for the Tollfree Number. List as many are applicable.\n   * @param {string} opts.useCaseSummary -\n   *          Further explaination on how messaging is used by the business or organization\n   * @param {string} opts.productionMessageSample -\n   *          An example of message content, i.e. a sample message\n   * @param {string|list} opts.optInImageUrls -\n   *          Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL\n   * @param {tollfree_verification.opt_in_type} opts.optInType -\n   *          Describe how a user opts-in to text messages\n   * @param {string} opts.messageVolume -\n   *          Estimate monthly volume of messages from the Tollfree Number\n   * @param {string} opts.tollfreePhoneNumberSid -\n   *          The SID of the Phone Number associated with the Tollfree Verification\n   * @param {string} [opts.customerProfileSid] - Customer's Profile Bundle BundleSid\n   * @param {string} [opts.businessStreetAddress] -\n   *          The address of the business or organization using the Tollfree number\n   * @param {string} [opts.businessStreetAddress2] -\n   *          The address of the business or organization using the Tollfree number\n   * @param {string} [opts.businessCity] -\n   *          The city of the business or organization using the Tollfree number\n   * @param {string} [opts.businessStateProvinceRegion] -\n   *          The state/province/region of the business or organization using the Tollfree number\n   * @param {string} [opts.businessPostalCode] -\n   *          The postal code of the business or organization using the Tollfree number\n   * @param {string} [opts.businessCountry] -\n   *          The country of the business or organization using the Tollfree number\n   * @param {string} [opts.additionalInformation] -\n   *          Additional information to be provided for verification\n   * @param {string} [opts.businessContactFirstName] -\n   *          The first name of the contact for the business or organization using the Tollfree number\n   * @param {string} [opts.businessContactLastName] -\n   *          The last name of the contact for the business or organization using the Tollfree number\n   * @param {string} [opts.businessContactEmail] -\n   *          The email address of the contact for the business or organization using the Tollfree number\n   * @param {string} [opts.businessContactPhone] -\n   *          The phone number of the contact for the business or organization using the Tollfree number\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TollfreeVerificationInstance\n   */\n  /* jshint ignore:end */\n  TollfreeVerificationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['businessName'])) {\n      throw new Error('Required parameter \"opts[\\'businessName\\']\" missing.');\n    }\n    if (_.isUndefined(opts['businessWebsite'])) {\n      throw new Error('Required parameter \"opts[\\'businessWebsite\\']\" missing.');\n    }\n    if (_.isUndefined(opts['notificationEmail'])) {\n      throw new Error('Required parameter \"opts[\\'notificationEmail\\']\" missing.');\n    }\n    if (_.isUndefined(opts['useCaseCategories'])) {\n      throw new Error('Required parameter \"opts[\\'useCaseCategories\\']\" missing.');\n    }\n    if (_.isUndefined(opts['useCaseSummary'])) {\n      throw new Error('Required parameter \"opts[\\'useCaseSummary\\']\" missing.');\n    }\n    if (_.isUndefined(opts['productionMessageSample'])) {\n      throw new Error('Required parameter \"opts[\\'productionMessageSample\\']\" missing.');\n    }\n    if (_.isUndefined(opts['optInImageUrls'])) {\n      throw new Error('Required parameter \"opts[\\'optInImageUrls\\']\" missing.');\n    }\n    if (_.isUndefined(opts['optInType'])) {\n      throw new Error('Required parameter \"opts[\\'optInType\\']\" missing.');\n    }\n    if (_.isUndefined(opts['messageVolume'])) {\n      throw new Error('Required parameter \"opts[\\'messageVolume\\']\" missing.');\n    }\n    if (_.isUndefined(opts['tollfreePhoneNumberSid'])) {\n      throw new Error('Required parameter \"opts[\\'tollfreePhoneNumberSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'BusinessName': _.get(opts, 'businessName'),\n      'BusinessWebsite': _.get(opts, 'businessWebsite'),\n      'NotificationEmail': _.get(opts, 'notificationEmail'),\n      'UseCaseCategories': serialize.map(_.get(opts, 'useCaseCategories'), function(e) { return e; }),\n      'UseCaseSummary': _.get(opts, 'useCaseSummary'),\n      'ProductionMessageSample': _.get(opts, 'productionMessageSample'),\n      'OptInImageUrls': serialize.map(_.get(opts, 'optInImageUrls'), function(e) { return e; }),\n      'OptInType': _.get(opts, 'optInType'),\n      'MessageVolume': _.get(opts, 'messageVolume'),\n      'TollfreePhoneNumberSid': _.get(opts, 'tollfreePhoneNumberSid'),\n      'CustomerProfileSid': _.get(opts, 'customerProfileSid'),\n      'BusinessStreetAddress': _.get(opts, 'businessStreetAddress'),\n      'BusinessStreetAddress2': _.get(opts, 'businessStreetAddress2'),\n      'BusinessCity': _.get(opts, 'businessCity'),\n      'BusinessStateProvinceRegion': _.get(opts, 'businessStateProvinceRegion'),\n      'BusinessPostalCode': _.get(opts, 'businessPostalCode'),\n      'BusinessCountry': _.get(opts, 'businessCountry'),\n      'AdditionalInformation': _.get(opts, 'additionalInformation'),\n      'BusinessContactFirstName': _.get(opts, 'businessContactFirstName'),\n      'BusinessContactLastName': _.get(opts, 'businessContactLastName'),\n      'BusinessContactEmail': _.get(opts, 'businessContactEmail'),\n      'BusinessContactPhone': _.get(opts, 'businessContactPhone')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollfreeVerificationInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a tollfree_verification\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @param {string} sid - Tollfree Verification Sid\n   *\n   * @returns {Twilio.Messaging.V1.TollfreeVerificationContext}\n   */\n  /* jshint ignore:end */\n  TollfreeVerificationListInstance.get = function get(sid) {\n    return new TollfreeVerificationContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.TollfreeVerificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TollfreeVerificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TollfreeVerificationListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TollfreeVerificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TollfreeVerificationPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TollfreeVerificationSolution} solution - Path solution\n *\n * @returns TollfreeVerificationPage\n */\n/* jshint ignore:end */\nTollfreeVerificationPage = function TollfreeVerificationPage(version, response,\n    solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TollfreeVerificationPage.prototype, Page.prototype);\nTollfreeVerificationPage.prototype.constructor = TollfreeVerificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TollfreeVerificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.TollfreeVerificationPage#\n *\n * @param {TollfreeVerificationPayload} payload - Payload response from the API\n *\n * @returns TollfreeVerificationInstance\n */\n/* jshint ignore:end */\nTollfreeVerificationPage.prototype.getInstance = function getInstance(payload) {\n  return new TollfreeVerificationInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.TollfreeVerificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTollfreeVerificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTollfreeVerificationPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TollfreeVerificationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationInstance\n *\n * @property {string} sid - Tollfree Verification Sid\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} customerProfileSid - Customer's Profile Bundle BundleSid\n * @property {string} trustProductSid - Tollfree TrustProduct Bundle BundleSid\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} regulatedItemSid - The SID of the Regulated Item\n * @property {string} businessName -\n *          The name of the business or organization using the Tollfree number\n * @property {string} businessStreetAddress -\n *          The address of the business or organization using the Tollfree number\n * @property {string} businessStreetAddress2 -\n *          The address of the business or organization using the Tollfree number\n * @property {string} businessCity -\n *          The city of the business or organization using the Tollfree number\n * @property {string} businessStateProvinceRegion -\n *          The state/province/region of the business or organization using the Tollfree number\n * @property {string} businessPostalCode -\n *          The postal code of the business or organization using the Tollfree number\n * @property {string} businessCountry -\n *          The country of the business or organization using the Tollfree number\n * @property {string} businessWebsite -\n *          The website of the business or organization using the Tollfree number\n * @property {string} businessContactFirstName -\n *          The first name of the contact for the business or organization using the Tollfree number\n * @property {string} businessContactLastName -\n *          The last name of the contact for the business or organization using the Tollfree number\n * @property {string} businessContactEmail -\n *          The email address of the contact for the business or organization using the Tollfree number\n * @property {string} businessContactPhone -\n *          The phone number of the contact for the business or organization using the Tollfree number\n * @property {string} notificationEmail -\n *          The email address to receive the notification about the verification result.\n * @property {string} useCaseCategories -\n *          The category of the use case for the Tollfree Number. List as many are applicable.\n * @property {string} useCaseSummary -\n *          Further explaination on how messaging is used by the business or organization\n * @property {string} productionMessageSample -\n *          An example of message content, i.e. a sample message\n * @property {string} optInImageUrls -\n *          Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL\n * @property {tollfree_verification.opt_in_type} optInType -\n *          Describe how a user opts-in to text messages\n * @property {string} messageVolume -\n *          Estimate monthly volume of messages from the Tollfree Number\n * @property {string} additionalInformation -\n *          Additional information to be provided for verification\n * @property {string} tollfreePhoneNumberSid -\n *          The SID of the Phone Number associated with the Tollfree Verification\n * @property {tollfree_verification.status} status -\n *          The compliance status of the Tollfree Verification record.\n * @property {string} url - The absolute URL of the Tollfree Verification\n * @property {object} resourceLinks -\n *          The URLs of the documents associated with the Tollfree Verification resource\n *\n * @param {V1} version - Version of the resource\n * @param {TollfreeVerificationPayload} payload - The instance payload\n * @param {sid} sid - Tollfree Verification Sid\n */\n/* jshint ignore:end */\nTollfreeVerificationInstance = function TollfreeVerificationInstance(version,\n    payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.customerProfileSid = payload.customer_profile_sid; // jshint ignore:line\n  this.trustProductSid = payload.trust_product_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.regulatedItemSid = payload.regulated_item_sid; // jshint ignore:line\n  this.businessName = payload.business_name; // jshint ignore:line\n  this.businessStreetAddress = payload.business_street_address; // jshint ignore:line\n  this.businessStreetAddress2 = payload.business_street_address2; // jshint ignore:line\n  this.businessCity = payload.business_city; // jshint ignore:line\n  this.businessStateProvinceRegion = payload.business_state_province_region; // jshint ignore:line\n  this.businessPostalCode = payload.business_postal_code; // jshint ignore:line\n  this.businessCountry = payload.business_country; // jshint ignore:line\n  this.businessWebsite = payload.business_website; // jshint ignore:line\n  this.businessContactFirstName = payload.business_contact_first_name; // jshint ignore:line\n  this.businessContactLastName = payload.business_contact_last_name; // jshint ignore:line\n  this.businessContactEmail = payload.business_contact_email; // jshint ignore:line\n  this.businessContactPhone = payload.business_contact_phone; // jshint ignore:line\n  this.notificationEmail = payload.notification_email; // jshint ignore:line\n  this.useCaseCategories = payload.use_case_categories; // jshint ignore:line\n  this.useCaseSummary = payload.use_case_summary; // jshint ignore:line\n  this.productionMessageSample = payload.production_message_sample; // jshint ignore:line\n  this.optInImageUrls = payload.opt_in_image_urls; // jshint ignore:line\n  this.optInType = payload.opt_in_type; // jshint ignore:line\n  this.messageVolume = payload.message_volume; // jshint ignore:line\n  this.additionalInformation = payload.additional_information; // jshint ignore:line\n  this.tollfreePhoneNumberSid = payload.tollfree_phone_number_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.resourceLinks = payload.resource_links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(TollfreeVerificationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TollfreeVerificationContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TollfreeVerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.TollfreeVerificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TollfreeVerificationInstance\n */\n/* jshint ignore:end */\nTollfreeVerificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.TollfreeVerificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTollfreeVerificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTollfreeVerificationInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TollfreeVerificationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.TollfreeVerificationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - Tollfree Verification Sid\n */\n/* jshint ignore:end */\nTollfreeVerificationContext = function TollfreeVerificationContext(version, sid)\n    {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Tollfree/Verifications/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TollfreeVerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.TollfreeVerificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TollfreeVerificationInstance\n */\n/* jshint ignore:end */\nTollfreeVerificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TollfreeVerificationInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.TollfreeVerificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTollfreeVerificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTollfreeVerificationContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TollfreeVerificationList: TollfreeVerificationList,\n  TollfreeVerificationPage: TollfreeVerificationPage,\n  TollfreeVerificationInstance: TollfreeVerificationInstance,\n  TollfreeVerificationContext: TollfreeVerificationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}