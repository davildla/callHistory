{"ast":null,"code":"import { Levels } from \"./levels.js\";\nimport { Logger } from \"./logger.js\";\n/**\n * Logger.\n * @public\n */\n\nexport class LoggerFactory {\n  constructor() {\n    this.builtinEnabled = true;\n    this._level = Levels.log; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.loggers = {};\n    this.logger = this.getLogger(\"sip:loggerfactory\");\n  }\n\n  get level() {\n    return this._level;\n  }\n\n  set level(newLevel) {\n    if (newLevel >= 0 && newLevel <= 3) {\n      this._level = newLevel;\n    } else if (newLevel > 3) {\n      this._level = 3; // eslint-disable-next-line no-prototype-builtins\n    } else if (Levels.hasOwnProperty(newLevel)) {\n      this._level = newLevel;\n    } else {\n      this.logger.error(\"invalid 'level' parameter value: \" + JSON.stringify(newLevel));\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  get connector() {\n    return this._connector;\n  }\n\n  set connector(value) {\n    if (!value) {\n      this._connector = undefined;\n    } else if (typeof value === \"function\") {\n      this._connector = value;\n    } else {\n      this.logger.error(\"invalid 'connector' parameter value: \" + JSON.stringify(value));\n    }\n  }\n\n  getLogger(category, label) {\n    if (label && this.level === 3) {\n      return new Logger(this, category, label);\n    } else if (this.loggers[category]) {\n      return this.loggers[category];\n    } else {\n      const logger = new Logger(this, category);\n      this.loggers[category] = logger;\n      return logger;\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  genericLog(levelToLog, category, label, content) {\n    if (this.level >= levelToLog) {\n      if (this.builtinEnabled) {\n        this.print(levelToLog, category, label, content);\n      }\n    }\n\n    if (this.connector) {\n      this.connector(Levels[levelToLog], category, label, content);\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  print(levelToLog, category, label, content) {\n    if (typeof content === \"string\") {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const prefix = [new Date(), category];\n\n      if (label) {\n        prefix.push(label);\n      }\n\n      content = prefix.concat(content).join(\" | \");\n    }\n\n    switch (levelToLog) {\n      case Levels.error:\n        // eslint-disable-next-line no-console\n        console.error(content);\n        break;\n\n      case Levels.warn:\n        // eslint-disable-next-line no-console\n        console.warn(content);\n        break;\n\n      case Levels.log:\n        // eslint-disable-next-line no-console\n        console.log(content);\n        break;\n\n      case Levels.debug:\n        // eslint-disable-next-line no-console\n        console.debug(content);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}