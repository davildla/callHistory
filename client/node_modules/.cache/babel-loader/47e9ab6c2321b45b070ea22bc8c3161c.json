{"ast":null,"code":"/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n\n/* eslint-disable no-undefined */\n// The legacy max volume, which is the positive half of a signed short integer.\nvar OLD_MAX_VOLUME = 32767;\nvar NativeRTCStatsReport = typeof window !== 'undefined' ? window.RTCStatsReport : undefined;\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\n\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n\n  var self = this;\n  Object.defineProperties(this, {\n    size: {\n      enumerable: true,\n      get: function () {\n        return self._map.size;\n      }\n    },\n    _map: {\n      value: statsMap\n    }\n  });\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n} // If RTCStatsReport is available natively, inherit it. Keep our constructor.\n\n\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n} // Map the Map-like read methods to the underlying Map\n\n\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(function (key) {\n  MockRTCStatsReport.prototype[key] = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return (_a = this._map)[key].apply(_a, args);\n  };\n});\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\n\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce(function (map, rtcStats) {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\n\n\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  var activeCandidatePairId;\n  var transportIds = new Map();\n  var statsMap = statsResponse.result().reduce(function (map, report) {\n    var id = report.id;\n\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(\"rtp-\" + id, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(\"rtp-\" + id, createRTCOutboundRTPStreamStats(report));\n        }\n\n        map.set(\"track-\" + id, createRTCMediaStreamTrackStats(report));\n        map.set(\"codec-\" + id, createRTCCodecStats(report));\n        break;\n\n      case 'googComponent':\n        var transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n\n    return map;\n  }, new Map());\n\n  if (activeCandidatePairId) {\n    var activeTransportId = transportIds.get(activeCandidatePairId);\n\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n\n  return new MockRTCStatsReport(statsMap);\n};\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\n\n\nfunction createRTCTransportStats(report) {\n  return {\n    type: 'transport',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    bytesSent: undefined,\n    bytesReceived: undefined,\n    rtcpTransportStatsId: undefined,\n    dtlsState: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\n\n\nfunction createRTCCodecStats(report) {\n  return {\n    type: 'codec',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    payloadType: undefined,\n    mimeType: report.stat('mediaType') + \"/\" + report.stat('googCodecName'),\n    clockRate: undefined,\n    channels: undefined,\n    sdpFmtpLine: undefined,\n    implementation: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\n\n\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    type: 'track',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    remoteSource: undefined,\n    ended: undefined,\n    kind: report.stat('mediaType'),\n    detached: undefined,\n    ssrcIds: undefined,\n    frameWidth: isPresent(report, 'googFrameWidthReceived') ? getInt(report, 'googFrameWidthReceived') : getInt(report, 'googFrameWidthSent'),\n    frameHeight: isPresent(report, 'googFrameHeightReceived') ? getInt(report, 'googFrameHeightReceived') : getInt(report, 'googFrameHeightSent'),\n    framesPerSecond: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    framesReceived: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesCorrupted: undefined,\n    partialFramesLost: undefined,\n    fullFramesLost: undefined,\n    audioLevel: isPresent(report, 'audioOutputLevel') ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\n\n\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    ssrc: report.stat('ssrc'),\n    associateStatsId: undefined,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    trackId: \"track-\" + report.id,\n    transportId: report.stat('transportId'),\n    codecId: \"codec-\" + report.id,\n    firCount: isInbound ? getInt(report, 'googFirsSent') : undefined,\n    pliCount: isInbound ? getInt(report, 'googPlisSent') : getInt(report, 'googPlisReceived'),\n    nackCount: isInbound ? getInt(report, 'googNacksSent') : getInt(report, 'googNacksReceived'),\n    sliCount: undefined,\n    qpSum: getInt(report, 'qpSum')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\n\n\nfunction createRTCInboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, true);\n  Object.assign(rtp, {\n    type: 'inbound-rtp',\n    packetsReceived: getInt(report, 'packetsReceived'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    packetsLost: getInt(report, 'packetsLost'),\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    fractionLost: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    packetsDiscarded: undefined,\n    packetsRepaired: undefined,\n    burstPacketsLost: undefined,\n    burstPacketsDiscarded: undefined,\n    burstLossCount: undefined,\n    burstDiscardCount: undefined,\n    burstLossRate: undefined,\n    burstDiscardRate: undefined,\n    gapLossRate: undefined,\n    gapDiscardRate: undefined,\n    framesDecoded: getInt(report, 'framesDecoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\n\n\nfunction createRTCOutboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, false);\n  Object.assign(rtp, {\n    type: 'outbound-rtp',\n    remoteTimestamp: undefined,\n    packetsSent: getInt(report, 'packetsSent'),\n    bytesSent: getInt(report, 'bytesSent'),\n    targetBitrate: undefined,\n    framesEncoded: getInt(report, 'framesEncoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\n\n\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    type: isRemote ? 'remote-candidate' : 'local-candidate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    isRemote: isRemote,\n    ip: report.stat('ipAddress'),\n    port: getInt(report, 'portNumber'),\n    protocol: report.stat('transport'),\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    priority: getFloat(report, 'priority'),\n    url: undefined,\n    relayProtocol: undefined,\n    deleted: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\n\n\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    type: 'candidate-pair',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('googChannelId'),\n    localCandidateId: report.stat('localCandidateId'),\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    state: undefined,\n    priority: undefined,\n    nominated: undefined,\n    writable: getBoolean(report, 'googWritable'),\n    readable: undefined,\n    bytesSent: getInt(report, 'bytesSent'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    lastPacketSentTimestamp: undefined,\n    lastPacketReceivedTimestamp: undefined,\n    totalRoundTripTime: undefined,\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    availableOutgoingBitrate: undefined,\n    availableIncomingBitrate: undefined,\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    consentRequestsSent: getInt(report, 'consentRequestsSent')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\n\n\nfunction createRTCCertificateStats(report) {\n  return {\n    type: 'certificate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    base64Certificate: report.stat('googDerBase64'),\n    issuerCertificateId: report.stat('googIssuerId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\n\n\nfunction createRTCDataChannelStats(report) {\n  return {\n    type: 'data-channel',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    label: report.stat('label'),\n    protocol: report.stat('protocol'),\n    datachannelid: report.stat('datachannelid'),\n    transportId: report.stat('transportId'),\n    state: report.stat('state'),\n    messagesSent: undefined,\n    bytesSent: undefined,\n    messagesReceived: undefined,\n    bytesReceived: undefined\n  };\n}\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\n\n\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === '' ? undefined : parseInt(inMs, 10) / 1000;\n}\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\n\n\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n\n    case 'serverreflexive':\n      return 'srflx';\n\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\n\nfunction getInt(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseInt(stat, 10) : undefined;\n}\n\nfunction getFloat(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseFloat(stat) : undefined;\n}\n\nfunction getBoolean(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? stat === 'true' || stat === true : undefined;\n}\n\nfunction isPresent(report, statName) {\n  var stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\n\nmodule.exports = MockRTCStatsReport; //# sourceMappingURL=mockrtcstatsreport.js.map","map":null,"metadata":{},"sourceType":"script"}