{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @internalapi\n */\n\n/* tslint:disable max-classes-per-file */\n\nvar generated_1 = require(\"./generated\");\n\nexports.AuthorizationErrors = generated_1.AuthorizationErrors;\nexports.ClientErrors = generated_1.ClientErrors;\nexports.GeneralErrors = generated_1.GeneralErrors;\nexports.MediaErrors = generated_1.MediaErrors;\nexports.SignalingErrors = generated_1.SignalingErrors;\nexports.TwilioError = generated_1.TwilioError;\nexports.UserMediaErrors = generated_1.UserMediaErrors; // Application errors that can be avoided by good app logic\n\nvar InvalidArgumentError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidArgumentError, _super);\n\n  function InvalidArgumentError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'InvalidArgumentError';\n    return _this;\n  }\n\n  return InvalidArgumentError;\n}(Error);\n\nexports.InvalidArgumentError = InvalidArgumentError;\n\nvar InvalidStateError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidStateError, _super);\n\n  function InvalidStateError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'InvalidStateError';\n    return _this;\n  }\n\n  return InvalidStateError;\n}(Error);\n\nexports.InvalidStateError = InvalidStateError;\n\nvar NotSupportedError =\n/** @class */\nfunction (_super) {\n  __extends(NotSupportedError, _super);\n\n  function NotSupportedError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'NotSupportedError';\n    return _this;\n  }\n\n  return NotSupportedError;\n}(Error);\n\nexports.NotSupportedError = NotSupportedError; // This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\n\nfunction getErrorByCode(code) {\n  var error = generated_1.errorsByCode.get(code);\n\n  if (!error) {\n    throw new InvalidArgumentError(\"Error code \" + code + \" not found\");\n  }\n\n  return error;\n}\n\nexports.getErrorByCode = getErrorByCode; // This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\n\nfunction hasErrorByCode(code) {\n  return generated_1.errorsByCode.has(code);\n}\n\nexports.hasErrorByCode = hasErrorByCode; //# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}