{"ast":null,"code":"/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n\n/* eslint-disable no-undefined */\n// The legacy max volume, which is the positive half of a signed short integer.\nvar OLD_MAX_VOLUME = 32767;\nvar NativeRTCStatsReport = typeof window !== 'undefined' ? window.RTCStatsReport : undefined;\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\n\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n\n  var self = this;\n  Object.defineProperties(this, {\n    size: {\n      enumerable: true,\n      get: function () {\n        return self._map.size;\n      }\n    },\n    _map: {\n      value: statsMap\n    }\n  });\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n} // If RTCStatsReport is available natively, inherit it. Keep our constructor.\n\n\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n} // Map the Map-like read methods to the underlying Map\n\n\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(function (key) {\n  MockRTCStatsReport.prototype[key] = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return (_a = this._map)[key].apply(_a, args);\n  };\n});\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\n\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce(function (map, rtcStats) {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\n\n\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  var activeCandidatePairId;\n  var transportIds = new Map();\n  var statsMap = statsResponse.result().reduce(function (map, report) {\n    var id = report.id;\n\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(\"rtp-\" + id, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(\"rtp-\" + id, createRTCOutboundRTPStreamStats(report));\n        }\n\n        map.set(\"track-\" + id, createRTCMediaStreamTrackStats(report));\n        map.set(\"codec-\" + id, createRTCCodecStats(report));\n        break;\n\n      case 'googComponent':\n        var transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n\n    return map;\n  }, new Map());\n\n  if (activeCandidatePairId) {\n    var activeTransportId = transportIds.get(activeCandidatePairId);\n\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n\n  return new MockRTCStatsReport(statsMap);\n};\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\n\n\nfunction createRTCTransportStats(report) {\n  return {\n    type: 'transport',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    bytesSent: undefined,\n    bytesReceived: undefined,\n    rtcpTransportStatsId: undefined,\n    dtlsState: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\n\n\nfunction createRTCCodecStats(report) {\n  return {\n    type: 'codec',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    payloadType: undefined,\n    mimeType: report.stat('mediaType') + \"/\" + report.stat('googCodecName'),\n    clockRate: undefined,\n    channels: undefined,\n    sdpFmtpLine: undefined,\n    implementation: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\n\n\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    type: 'track',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    remoteSource: undefined,\n    ended: undefined,\n    kind: report.stat('mediaType'),\n    detached: undefined,\n    ssrcIds: undefined,\n    frameWidth: isPresent(report, 'googFrameWidthReceived') ? getInt(report, 'googFrameWidthReceived') : getInt(report, 'googFrameWidthSent'),\n    frameHeight: isPresent(report, 'googFrameHeightReceived') ? getInt(report, 'googFrameHeightReceived') : getInt(report, 'googFrameHeightSent'),\n    framesPerSecond: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    framesReceived: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesCorrupted: undefined,\n    partialFramesLost: undefined,\n    fullFramesLost: undefined,\n    audioLevel: isPresent(report, 'audioOutputLevel') ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\n\n\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    ssrc: report.stat('ssrc'),\n    associateStatsId: undefined,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    trackId: \"track-\" + report.id,\n    transportId: report.stat('transportId'),\n    codecId: \"codec-\" + report.id,\n    firCount: isInbound ? getInt(report, 'googFirsSent') : undefined,\n    pliCount: isInbound ? getInt(report, 'googPlisSent') : getInt(report, 'googPlisReceived'),\n    nackCount: isInbound ? getInt(report, 'googNacksSent') : getInt(report, 'googNacksReceived'),\n    sliCount: undefined,\n    qpSum: getInt(report, 'qpSum')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\n\n\nfunction createRTCInboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, true);\n  Object.assign(rtp, {\n    type: 'inbound-rtp',\n    packetsReceived: getInt(report, 'packetsReceived'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    packetsLost: getInt(report, 'packetsLost'),\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    fractionLost: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    packetsDiscarded: undefined,\n    packetsRepaired: undefined,\n    burstPacketsLost: undefined,\n    burstPacketsDiscarded: undefined,\n    burstLossCount: undefined,\n    burstDiscardCount: undefined,\n    burstLossRate: undefined,\n    burstDiscardRate: undefined,\n    gapLossRate: undefined,\n    gapDiscardRate: undefined,\n    framesDecoded: getInt(report, 'framesDecoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\n\n\nfunction createRTCOutboundRTPStreamStats(report) {\n  var rtp = createRTCRTPStreamStats(report, false);\n  Object.assign(rtp, {\n    type: 'outbound-rtp',\n    remoteTimestamp: undefined,\n    packetsSent: getInt(report, 'packetsSent'),\n    bytesSent: getInt(report, 'bytesSent'),\n    targetBitrate: undefined,\n    framesEncoded: getInt(report, 'framesEncoded')\n  });\n  return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\n\n\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    type: isRemote ? 'remote-candidate' : 'local-candidate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    isRemote: isRemote,\n    ip: report.stat('ipAddress'),\n    port: getInt(report, 'portNumber'),\n    protocol: report.stat('transport'),\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    priority: getFloat(report, 'priority'),\n    url: undefined,\n    relayProtocol: undefined,\n    deleted: undefined\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\n\n\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    type: 'candidate-pair',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('googChannelId'),\n    localCandidateId: report.stat('localCandidateId'),\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    state: undefined,\n    priority: undefined,\n    nominated: undefined,\n    writable: getBoolean(report, 'googWritable'),\n    readable: undefined,\n    bytesSent: getInt(report, 'bytesSent'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    lastPacketSentTimestamp: undefined,\n    lastPacketReceivedTimestamp: undefined,\n    totalRoundTripTime: undefined,\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    availableOutgoingBitrate: undefined,\n    availableIncomingBitrate: undefined,\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    consentRequestsSent: getInt(report, 'consentRequestsSent')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\n\n\nfunction createRTCCertificateStats(report) {\n  return {\n    type: 'certificate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    base64Certificate: report.stat('googDerBase64'),\n    issuerCertificateId: report.stat('googIssuerId')\n  };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\n\n\nfunction createRTCDataChannelStats(report) {\n  return {\n    type: 'data-channel',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    label: report.stat('label'),\n    protocol: report.stat('protocol'),\n    datachannelid: report.stat('datachannelid'),\n    transportId: report.stat('transportId'),\n    state: report.stat('state'),\n    messagesSent: undefined,\n    bytesSent: undefined,\n    messagesReceived: undefined,\n    bytesReceived: undefined\n  };\n}\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\n\n\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === '' ? undefined : parseInt(inMs, 10) / 1000;\n}\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\n\n\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n\n    case 'serverreflexive':\n      return 'srflx';\n\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\n\nfunction getInt(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseInt(stat, 10) : undefined;\n}\n\nfunction getFloat(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? parseFloat(stat) : undefined;\n}\n\nfunction getBoolean(report, statName) {\n  var stat = report.stat(statName);\n  return isPresent(report, statName) ? stat === 'true' || stat === true : undefined;\n}\n\nfunction isPresent(report, statName) {\n  var stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\n\nmodule.exports = MockRTCStatsReport;","map":{"version":3,"mappings":"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","names":["OLD_MAX_VOLUME","NativeRTCStatsReport","window","RTCStatsReport","undefined","MockRTCStatsReport","statsMap","self","Object","defineProperties","size","enumerable","get","_map","value","Symbol","iterator","prototype","create","constructor","forEach","key","args","apply","_a","fromArray","array","reduce","map","rtcStats","set","id","Map","fromRTCStatsResponse","statsResponse","activeCandidatePairId","transportIds","result","report","type","createRTCCertificateStats","createRTCDataChannelStats","getBoolean","createRTCIceCandidatePairStats","createRTCIceCandidateStats","isPresent","createRTCInboundRTPStreamStats","createRTCOutboundRTPStreamStats","createRTCMediaStreamTrackStats","createRTCCodecStats","transportReport","createRTCTransportStats","selectedCandidatePairId","activeTransportId","dtlsState","timestamp","Date","parse","bytesSent","bytesReceived","rtcpTransportStatsId","stat","localCertificateId","remoteCertificateId","payloadType","mimeType","clockRate","channels","sdpFmtpLine","implementation","trackIdentifier","remoteSource","ended","kind","detached","ssrcIds","frameWidth","getInt","frameHeight","framesPerSecond","framesSent","framesReceived","framesDecoded","framesDropped","framesCorrupted","partialFramesLost","fullFramesLost","audioLevel","echoReturnLoss","getFloat","echoReturnLossEnhancement","createRTCRTPStreamStats","isInbound","ssrc","associateStatsId","isRemote","mediaType","trackId","transportId","codecId","firCount","pliCount","nackCount","sliCount","qpSum","rtp","assign","packetsReceived","packetsLost","jitter","convertMsToSeconds","fractionLost","roundTripTime","packetsDiscarded","packetsRepaired","burstPacketsLost","burstPacketsDiscarded","burstLossCount","burstDiscardCount","burstLossRate","burstDiscardRate","gapLossRate","gapDiscardRate","remoteTimestamp","packetsSent","targetBitrate","framesEncoded","ip","port","protocol","candidateType","translateCandidateType","priority","url","relayProtocol","deleted","localCandidateId","remoteCandidateId","state","nominated","writable","readable","lastPacketSentTimestamp","lastPacketReceivedTimestamp","totalRoundTripTime","currentRoundTripTime","availableOutgoingBitrate","availableIncomingBitrate","requestsReceived","requestsSent","responsesReceived","responsesSent","retransmissionsReceived","retransmissionsSent","consentRequestsSent","fingerprint","fingerprintAlgorithm","base64Certificate","issuerCertificateId","label","datachannelid","messagesSent","messagesReceived","inMs","isNaN","parseInt","statName","parseFloat","module","exports"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio-client/lib/twilio/rtc/mockrtcstatsreport.js"],"sourcesContent":["/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n\n/* eslint-disable no-undefined */\n\n// The legacy max volume, which is the positive half of a signed short integer.\nconst OLD_MAX_VOLUME = 32767;\n\nconst NativeRTCStatsReport = typeof window !== 'undefined'\n  ? window.RTCStatsReport : undefined;\n\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\nfunction MockRTCStatsReport(statsMap) {\n  if (!(this instanceof MockRTCStatsReport)) {\n    return new MockRTCStatsReport(statsMap);\n  }\n\n  const self = this;\n  Object.defineProperties(this, {\n    size: {\n      enumerable: true,\n      get() {\n        return self._map.size;\n      }\n    },\n    _map: { value: statsMap }\n  });\n\n  this[Symbol.iterator] = statsMap[Symbol.iterator];\n}\n\n// If RTCStatsReport is available natively, inherit it. Keep our constructor.\nif (NativeRTCStatsReport) {\n  MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n  MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n}\n\n// Map the Map-like read methods to the underlying Map\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(key => {\n  MockRTCStatsReport.prototype[key] = function(...args) {\n    return this._map[key](...args);\n  };\n});\n\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\nMockRTCStatsReport.fromArray = function fromArray(array) {\n  return new MockRTCStatsReport(array.reduce((map, rtcStats) => {\n    map.set(rtcStats.id, rtcStats);\n    return map;\n  }, new Map()));\n};\n\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n  let activeCandidatePairId;\n  const transportIds = new Map();\n\n  const statsMap = statsResponse.result().reduce((map, report) => {\n    const id = report.id;\n    switch (report.type) {\n      case 'googCertificate':\n        map.set(id, createRTCCertificateStats(report));\n        break;\n      case 'datachannel':\n        map.set(id, createRTCDataChannelStats(report));\n        break;\n      case 'googCandidatePair':\n        if (getBoolean(report, 'googActiveConnection')) {\n          activeCandidatePairId = id;\n        }\n\n        map.set(id, createRTCIceCandidatePairStats(report));\n        break;\n      case 'localcandidate':\n        map.set(id, createRTCIceCandidateStats(report, false));\n        break;\n      case 'remotecandidate':\n        map.set(id, createRTCIceCandidateStats(report, true));\n        break;\n      case 'ssrc':\n        if (isPresent(report, 'packetsReceived')) {\n          map.set(`rtp-${id}`, createRTCInboundRTPStreamStats(report));\n        } else {\n          map.set(`rtp-${id}`, createRTCOutboundRTPStreamStats(report));\n        }\n\n        map.set(`track-${id}`, createRTCMediaStreamTrackStats(report));\n        map.set(`codec-${id}`, createRTCCodecStats(report));\n        break;\n      case 'googComponent':\n        const transportReport = createRTCTransportStats(report);\n        transportIds.set(transportReport.selectedCandidatePairId, id);\n        map.set(id, createRTCTransportStats(report));\n        break;\n    }\n\n    return map;\n  }, new Map());\n\n  if (activeCandidatePairId) {\n    const activeTransportId = transportIds.get(activeCandidatePairId);\n    if (activeTransportId) {\n      statsMap.get(activeTransportId).dtlsState = 'connected';\n    }\n  }\n\n  return new MockRTCStatsReport(statsMap);\n};\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\nfunction createRTCTransportStats(report) {\n  return {\n    type: 'transport',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    bytesSent: undefined,\n    bytesReceived: undefined,\n    rtcpTransportStatsId: undefined,\n    dtlsState: undefined,\n    selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n    localCertificateId: report.stat('localCertificateId'),\n    remoteCertificateId: report.stat('remoteCertificateId')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\nfunction createRTCCodecStats(report) {\n  return {\n    type: 'codec',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    payloadType: undefined,\n    mimeType: `${report.stat('mediaType')}/${report.stat('googCodecName')}`,\n    clockRate: undefined,\n    channels: undefined,\n    sdpFmtpLine: undefined,\n    implementation: undefined\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\nfunction createRTCMediaStreamTrackStats(report) {\n  return {\n    type: 'track',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    trackIdentifier: report.stat('googTrackId'),\n    remoteSource: undefined,\n    ended: undefined,\n    kind: report.stat('mediaType'),\n    detached: undefined,\n    ssrcIds: undefined,\n    frameWidth: isPresent(report, 'googFrameWidthReceived')\n      ? getInt(report, 'googFrameWidthReceived')\n      : getInt(report, 'googFrameWidthSent'),\n    frameHeight: isPresent(report, 'googFrameHeightReceived')\n      ? getInt(report, 'googFrameHeightReceived')\n      : getInt(report, 'googFrameHeightSent'),\n    framesPerSecond: undefined,\n    framesSent: getInt(report, 'framesEncoded'),\n    framesReceived: undefined,\n    framesDecoded: getInt(report, 'framesDecoded'),\n    framesDropped: undefined,\n    framesCorrupted: undefined,\n    partialFramesLost: undefined,\n    fullFramesLost: undefined,\n    audioLevel: isPresent(report, 'audioOutputLevel')\n      ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME\n      : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n    echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n    echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\nfunction createRTCRTPStreamStats(report, isInbound) {\n  return {\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    ssrc: report.stat('ssrc'),\n    associateStatsId: undefined,\n    isRemote: undefined,\n    mediaType: report.stat('mediaType'),\n    trackId: `track-${report.id}`,\n    transportId: report.stat('transportId'),\n    codecId: `codec-${report.id}`,\n    firCount: isInbound\n      ? getInt(report, 'googFirsSent')\n      : undefined,\n    pliCount: isInbound\n      ? getInt(report, 'googPlisSent')\n      : getInt(report, 'googPlisReceived'),\n    nackCount: isInbound\n      ? getInt(report, 'googNacksSent')\n      : getInt(report, 'googNacksReceived'),\n    sliCount: undefined,\n    qpSum: getInt(report, 'qpSum')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\nfunction createRTCInboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, true);\n\n  Object.assign(rtp, {\n    type: 'inbound-rtp',\n    packetsReceived: getInt(report, 'packetsReceived'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    packetsLost: getInt(report, 'packetsLost'),\n    jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n    fractionLost: undefined,\n    roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    packetsDiscarded: undefined,\n    packetsRepaired: undefined,\n    burstPacketsLost: undefined,\n    burstPacketsDiscarded: undefined,\n    burstLossCount: undefined,\n    burstDiscardCount: undefined,\n    burstLossRate: undefined,\n    burstDiscardRate: undefined,\n    gapLossRate: undefined,\n    gapDiscardRate: undefined,\n    framesDecoded: getInt(report, 'framesDecoded')\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\nfunction createRTCOutboundRTPStreamStats(report) {\n  const rtp = createRTCRTPStreamStats(report, false);\n\n  Object.assign(rtp, {\n    type: 'outbound-rtp',\n    remoteTimestamp: undefined,\n    packetsSent: getInt(report, 'packetsSent'),\n    bytesSent: getInt(report, 'bytesSent'),\n    targetBitrate: undefined,\n    framesEncoded: getInt(report, 'framesEncoded')\n  });\n\n  return rtp;\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\nfunction createRTCIceCandidateStats(report, isRemote) {\n  return {\n    type: isRemote\n      ? 'remote-candidate'\n      : 'local-candidate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: undefined,\n    isRemote,\n    ip: report.stat('ipAddress'),\n    port: getInt(report, 'portNumber'),\n    protocol: report.stat('transport'),\n    candidateType: translateCandidateType(report.stat('candidateType')),\n    priority: getFloat(report, 'priority'),\n    url: undefined,\n    relayProtocol: undefined,\n    deleted: undefined\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\nfunction createRTCIceCandidatePairStats(report) {\n  return {\n    type: 'candidate-pair',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    transportId: report.stat('googChannelId'),\n    localCandidateId: report.stat('localCandidateId'),\n    remoteCandidateId: report.stat('remoteCandidateId'),\n    state: undefined,\n    priority: undefined,\n    nominated: undefined,\n    writable: getBoolean(report, 'googWritable'),\n    readable: undefined,\n    bytesSent: getInt(report, 'bytesSent'),\n    bytesReceived: getInt(report, 'bytesReceived'),\n    lastPacketSentTimestamp: undefined,\n    lastPacketReceivedTimestamp: undefined,\n    totalRoundTripTime: undefined,\n    currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n    availableOutgoingBitrate: undefined,\n    availableIncomingBitrate: undefined,\n    requestsReceived: getInt(report, 'requestsReceived'),\n    requestsSent: getInt(report, 'requestsSent'),\n    responsesReceived: getInt(report, 'responsesReceived'),\n    responsesSent: getInt(report, 'responsesSent'),\n    retransmissionsReceived: undefined,\n    retransmissionsSent: undefined,\n    consentRequestsSent: getInt(report, 'consentRequestsSent')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\nfunction createRTCCertificateStats(report) {\n  return {\n    type: 'certificate',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    fingerprint: report.stat('googFingerprint'),\n    fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n    base64Certificate: report.stat('googDerBase64'),\n    issuerCertificateId: report.stat('googIssuerId')\n  };\n}\n\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\nfunction createRTCDataChannelStats(report) {\n  return {\n    type: 'data-channel',\n    id: report.id,\n    timestamp: Date.parse(report.timestamp),\n    label: report.stat('label'),\n    protocol: report.stat('protocol'),\n    datachannelid: report.stat('datachannelid'),\n    transportId: report.stat('transportId'),\n    state: report.stat('state'),\n    messagesSent: undefined,\n    bytesSent: undefined,\n    messagesReceived: undefined,\n    bytesReceived: undefined\n  };\n}\n\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\nfunction convertMsToSeconds(inMs) {\n  return isNaN(inMs) || inMs === ''\n    ? undefined\n    : parseInt(inMs, 10) / 1000;\n}\n\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\nfunction translateCandidateType(type) {\n  switch (type) {\n    case 'peerreflexive':\n      return 'prflx';\n    case 'serverreflexive':\n      return 'srflx';\n    case 'host':\n    case 'relay':\n    default:\n      return type;\n  }\n}\n\nfunction getInt(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseInt(stat, 10)\n    : undefined;\n}\n\nfunction getFloat(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? parseFloat(stat)\n    : undefined;\n}\n\nfunction getBoolean(report, statName) {\n  const stat = report.stat(statName);\n  return isPresent(report, statName)\n    ? (stat === 'true' || stat === true)\n    : undefined;\n}\n\nfunction isPresent(report, statName) {\n  const stat = report.stat(statName);\n  return typeof stat !== 'undefined' && stat !== '';\n}\n\nmodule.exports = MockRTCStatsReport;\n"]},"metadata":{},"sourceType":"script"}