{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @internalapi\n */\n\n/* tslint:disable max-classes-per-file */\n\nvar generated_1 = require(\"./generated\");\n\nexports.AuthorizationErrors = generated_1.AuthorizationErrors;\nexports.ClientErrors = generated_1.ClientErrors;\nexports.GeneralErrors = generated_1.GeneralErrors;\nexports.MediaErrors = generated_1.MediaErrors;\nexports.SignalingErrors = generated_1.SignalingErrors; // Application errors that can be avoided by good app logic\n\nvar InvalidArgumentError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidArgumentError, _super);\n\n  function InvalidArgumentError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'InvalidArgumentError';\n    return _this;\n  }\n\n  return InvalidArgumentError;\n}(Error);\n\nexports.InvalidArgumentError = InvalidArgumentError;\n\nvar InvalidStateError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidStateError, _super);\n\n  function InvalidStateError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'InvalidStateError';\n    return _this;\n  }\n\n  return InvalidStateError;\n}(Error);\n\nexports.InvalidStateError = InvalidStateError;\n\nvar NotSupportedError =\n/** @class */\nfunction (_super) {\n  __extends(NotSupportedError, _super);\n\n  function NotSupportedError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'NotSupportedError';\n    return _this;\n  }\n\n  return NotSupportedError;\n}(Error);\n\nexports.NotSupportedError = NotSupportedError; // This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\n\nfunction getErrorByCode(code) {\n  var error = generated_1.errorsByCode.get(code);\n\n  if (!error) {\n    throw new InvalidArgumentError(\"Error code \" + code + \" not found\");\n  }\n\n  return error;\n}\n\nexports.getErrorByCode = getErrorByCode;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAIA;;AACA;;AA0CEA,8BAzCAC,+BAyCA;AACAD,uBAzCAC,wBAyCA;AACAD,wBAxCAC,yBAwCA;AACAD,sBAxCAC,uBAwCA;AACAD,0BAxCAC,2BAwCA,C,CApCF;;AACA;AAAA;AAAA;EAA0CC;;EACxC,8BAAYC,OAAZ,EAA4B;IAA5B,YACEC,kBAAMD,OAAN,KAAc,IADhB;;IAEEE,KAAI,CAACC,IAAL,GAAY,sBAAZ;;EACD;;EACH;AAAC,CALD,CAA0CC,KAA1C;;AAAaP;;AAMb;AAAA;AAAA;EAAuCE;;EACrC,2BAAYC,OAAZ,EAA4B;IAA5B,YACEC,kBAAMD,OAAN,KAAc,IADhB;;IAEEE,KAAI,CAACC,IAAL,GAAY,mBAAZ;;EACD;;EACH;AAAC,CALD,CAAuCC,KAAvC;;AAAaP;;AAMb;AAAA;AAAA;EAAuCE;;EACrC,2BAAYC,OAAZ,EAA4B;IAA5B,YACEC,kBAAMD,OAAN,KAAc,IADhB;;IAEEE,KAAI,CAACC,IAAL,GAAY,mBAAZ;;EACD;;EACH;AAAC,CALD,CAAuCC,KAAvC;;AAAaP,8C,CAOb;AACA;;AACA,SAAgBQ,cAAhB,CAA+BC,IAA/B,EAA2C;EACzC,IAAMC,KAAK,GAA4BT,yBAAaU,GAAb,CAAiBF,IAAjB,CAAvC;;EACA,IAAI,CAACC,KAAL,EAAY;IACV,MAAM,IAAIE,oBAAJ,CAAyB,gBAAcH,IAAd,GAAkB,YAA3C,CAAN;EACD;;EACD,OAAOC,KAAP;AACD;;AANDV","names":["exports","generated_1","__extends","message","_super","_this","name","Error","getErrorByCode","code","error","get","InvalidArgumentError"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio-client/lib/twilio/errors/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  errorsByCode,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n} from './generated';\n\n// Application errors that can be avoided by good app logic\nexport class InvalidArgumentError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidArgumentError';\n  }\n}\nexport class InvalidStateError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'InvalidStateError';\n  }\n}\nexport class NotSupportedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'NotSupportedError';\n  }\n}\n\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nexport function getErrorByCode(code: number): TwilioError {\n  const error: TwilioError | undefined = errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(`Error code ${code} not found`);\n  }\n  return error;\n}\n\n// All errors we want to throw or emit locally in the SDK need to be passed through here.\nexport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n};\n"]},"metadata":{},"sourceType":"script"}