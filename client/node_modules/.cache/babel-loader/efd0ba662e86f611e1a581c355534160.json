{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/workSpace/bots-dashboard/src/pages/Phone.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Device } from 'twilio-client';\nimport utils from '../utils/phoneUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Phone(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"phone\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Phone;\nexport default Phone; // {\n//     const [identity, setIdentity] = useState('');\n//     const [status, setStatus] = useState('');\n//     const [ready, setReady] = useState(false);\n//     const [device, setDevice] = useState(null);\n//     const [callActive, setCallActice] = useState(false);\n//     const [call, setCall] = useState();\n//     useEffect(()=>{\n//         let isMounted = true;\n//         const getData = async ()=>{\n//             return await utils.generateToken('625fd948e048daaba715ba73');\n//         };\n//         getData().then(\n//             data => {\n//                 if (isMounted) {\n//                     const twilioDevice = new Device(data.token); \n//                     twilioDevice.on('incoming', connection => {\n//                         // immediately accepts incoming connection\n//                         connection.accept();\n//                         console.log(2);\n//                         setStatus(connection.status());\n//                     });\n//                     twilioDevice.on('ready', device => {\n//                         setStatus(\"device ready\");\n//                         setReady(true);\n//                         setDevice(device)\n//                     });\n//                     twilioDevice.on('connect', connection => {\n//                         if (connection.status() === 'open') {\n//                             setCallActice(true)\n//                             setCall(connection)\n//                         } \n//                         setStatus(connection.status())\n//                         if (\"phoneNumber\" in connection.message) {\n//                             setStatus(\"In call with \" + connection.message.phoneNumber);\n//                         }\n//                     });\n//                     twilioDevice.on('disconnect', connection => {\n//                         console.log(connection.status());\n//                         setStatus(connection.status())\n//                         if (connection.status() === 'closed') {\n//                             setCallActice(false)\n//                         } \n//                     });\n//                     twilioDevice.on(\"error\", (error) => {\n//                         console.log(\"Twilio.Device Error: \" + error.message);\n//                         setStatus(\"ERROR: \" + error.message);\n//                     });\n//                 }\n//             }\n//         );\n//         return () => { isMounted = false };\n//     },[]);\n//     useEffect(() => {\n//         let isMounted = true;\n//         const interval = setInterval(async () => {\n//             const data = await utils.generateToken('625fd948e048daaba715ba73');\n//             if (isMounted){\n//                 device.setup(data.token);\n//             }\n//         }, 1000 * 60 * 50); // renew jwt every 50 minutes\n//         return () => { \n//             isMounted = false\n//             clearInterval(interval);\n//         };\n//     })\n//     return (\n//         <div>\n//                     <input \n//                         type=\"text\" \n//                         value={identity}\n//                         placeholder=\"phone\"\n//                         onChange={(e) => setIdentity(e.target.value)}\n//                     />\n//                     <input \n//                         disabled={ready ? false : true}\n//                         type=\"button\" \n//                         value=\"call\" \n//                         onClick={async () => {\n//                             device.connect({ \n//                                 phoneNumber : '972534217014',\n//                                 did         : '972765996311',\n//                                 userId      : '625fd948e048daaba715ba73',\n//                                 userName    : 'אדמין',\n//                                 company     : 'do-help'\n//                             });\n//                         }}\n//                     />\n//                     <br/>\n//                     <button\n//                         disabled={!callActive}\n//                         onClick={() => device.disconnectAll()}\n//                     >\n//                         hangup\n//                     </button>\n//                     <button\n//                         disabled={!callActive}\n//                         onClick={() => call.mute(true)}\n//                     >\n//                         mute\n//                     </button>\n//                     <button\n//                         disabled={!callActive}\n//                         onClick={() => call.mute(false)}\n//                     >\n//                         unmute\n//                     </button>\n//             <p>{ status }</p>\n//         </div>\n//     );\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"Phone\");","map":{"version":3,"names":["React","useState","useEffect","Device","utils","Phone","props"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/pages/Phone.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Device } from 'twilio-client'\nimport utils from '../utils/phoneUtils';\n\nfunction Phone(props) {\n\n    return (\n        <div>\n            phone\n        </div>\n    );\n}\n\nexport default Phone;\n\n\n// {\n//     const [identity, setIdentity] = useState('');\n//     const [status, setStatus] = useState('');\n//     const [ready, setReady] = useState(false);\n//     const [device, setDevice] = useState(null);\n//     const [callActive, setCallActice] = useState(false);\n//     const [call, setCall] = useState();\n\n//     useEffect(()=>{\n//         let isMounted = true;\n\n//         const getData = async ()=>{\n//             return await utils.generateToken('625fd948e048daaba715ba73');\n//         };\n\n//         getData().then(\n//             data => {\n//                 if (isMounted) {\n//                     const twilioDevice = new Device(data.token); \n        \n//                     twilioDevice.on('incoming', connection => {\n//                         // immediately accepts incoming connection\n//                         connection.accept();\n//                         console.log(2);\n//                         setStatus(connection.status());\n//                     });\n                        \n//                     twilioDevice.on('ready', device => {\n//                         setStatus(\"device ready\");\n//                         setReady(true);\n//                         setDevice(device)\n//                     });\n                    \n//                     twilioDevice.on('connect', connection => {\n                        \n//                         if (connection.status() === 'open') {\n//                             setCallActice(true)\n//                             setCall(connection)\n//                         } \n\n//                         setStatus(connection.status())\n//                         if (\"phoneNumber\" in connection.message) {\n//                             setStatus(\"In call with \" + connection.message.phoneNumber);\n//                         }\n//                     });\n                    \n//                     twilioDevice.on('disconnect', connection => {\n//                         console.log(connection.status());\n//                         setStatus(connection.status())\n//                         if (connection.status() === 'closed') {\n//                             setCallActice(false)\n//                         } \n//                     });\n        \n//                     twilioDevice.on(\"error\", (error) => {\n//                         console.log(\"Twilio.Device Error: \" + error.message);\n//                         setStatus(\"ERROR: \" + error.message);\n//                     });\n//                 }\n//             }\n//         );\n\n//         return () => { isMounted = false };\n//     },[]);\n\n//     useEffect(() => {\n//         let isMounted = true;\n\n//         const interval = setInterval(async () => {\n\n//             const data = await utils.generateToken('625fd948e048daaba715ba73');\n\n//             if (isMounted){\n//                 device.setup(data.token);\n//             }\n//         }, 1000 * 60 * 50); // renew jwt every 50 minutes\n\n//         return () => { \n//             isMounted = false\n//             clearInterval(interval);\n//         };\n//     })\n\n//     return (\n//         <div>\n//                     <input \n//                         type=\"text\" \n//                         value={identity}\n//                         placeholder=\"phone\"\n//                         onChange={(e) => setIdentity(e.target.value)}\n//                     />\n//                     <input \n//                         disabled={ready ? false : true}\n//                         type=\"button\" \n//                         value=\"call\" \n//                         onClick={async () => {\n//                             device.connect({ \n//                                 phoneNumber : '972534217014',\n//                                 did         : '972765996311',\n//                                 userId      : '625fd948e048daaba715ba73',\n//                                 userName    : 'אדמין',\n//                                 company     : 'do-help'\n//                             });\n//                         }}\n//                     />\n//                     <br/>\n//                     <button\n//                         disabled={!callActive}\n//                         onClick={() => device.disconnectAll()}\n//                     >\n//                         hangup\n//                     </button>\n//                     <button\n//                         disabled={!callActive}\n//                         onClick={() => call.mute(true)}\n//                     >\n//                         mute\n//                     </button>\n//                     <button\n//                         disabled={!callActive}\n//                         onClick={() => call.mute(false)}\n//                     >\n//                         unmute\n//                     </button>\n//             <p>{ status }</p>\n//         </div>\n//     );\n// }"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;EAElB,oBACI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;;KAPQD,K;AAST,eAAeA,KAAf},"metadata":{},"sourceType":"module"}