{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/workSpace/bots-dashboard/src/pages/Phone.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Device } from 'twilio-client';\nimport utils from '../utils/phoneUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Phone(props) {\n  _s();\n\n  const [identity, setIdentity] = useState('');\n  const [status, setStatus] = useState('');\n  const [ready, setReady] = useState(false);\n  const [device, setDevice] = useState(null);\n  const [callActive, setCallActice] = useState(false);\n  const [call, setCall] = useState();\n  useEffect(() => {\n    let isMounted = true;\n\n    const getData = async () => {\n      return await utils.generateToken('userName');\n    };\n\n    const interval = setInterval(() => {\n      getData().then(data => {\n        if (isMounted) {\n          const twilioDevice = new Device(data.token);\n          twilioDevice.on('incoming', connection => {\n            // immediately accepts incoming connection\n            connection.accept();\n            console.log(2);\n            setStatus(connection.status());\n          });\n          twilioDevice.on('ready', device => {\n            setStatus(\"device ready\");\n            setReady(true);\n            setDevice(device);\n          });\n          twilioDevice.on('connect', connection => {\n            if (connection.status() === 'open') {\n              setCallActice(true);\n              setCall(connection);\n            }\n\n            setStatus(connection.status());\n\n            if (\"phoneNumber\" in connection.message) {\n              setStatus(\"In call with \" + connection.message.phoneNumber);\n            }\n          });\n          twilioDevice.on('disconnect', connection => {\n            console.log(connection.status());\n            setStatus(connection.status());\n\n            if (connection.status() === 'closed') {\n              setCallActice(false);\n            }\n          });\n          twilioDevice.on(\"error\", error => {\n            console.log(\"Twilio.Device Error: \" + error.message);\n            setStatus(\"ERROR: \" + error.message);\n          }, 1000 * 60 * 50); // 50 minutes\n        }\n      });\n    });\n    return () => {\n      isMounted = false;\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: identity,\n      placeholder: \"phone\",\n      onChange: e => setIdentity(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      disabled: ready ? false : true,\n      type: \"button\",\n      value: \"call\",\n      onClick: async () => {\n        device.connect({\n          phoneNumber: '972534217014'\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !callActive,\n      onClick: () => device.disconnectAll(),\n      children: \"hangup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !callActive,\n      onClick: () => call.mute(true),\n      children: \"mute\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !callActive,\n      onClick: () => call.mute(false),\n      children: \"unmute\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Phone, \"DzEmKeTdz4RnLiIDln1UnfxH/PY=\");\n\n_c = Phone;\nexport default Phone;\n\nvar _c;\n\n$RefreshReg$(_c, \"Phone\");","map":{"version":3,"names":["React","useState","useEffect","Device","utils","Phone","props","identity","setIdentity","status","setStatus","ready","setReady","device","setDevice","callActive","setCallActice","call","setCall","isMounted","getData","generateToken","interval","setInterval","then","data","twilioDevice","token","on","connection","accept","console","log","message","phoneNumber","error","clearInterval","e","target","value","connect","disconnectAll","mute"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/pages/Phone.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Device } from 'twilio-client'\nimport utils from '../utils/phoneUtils';\n\nfunction Phone(props) {\n    const [identity, setIdentity] = useState('');\n    const [status, setStatus] = useState('');\n    const [ready, setReady] = useState(false);\n    const [device, setDevice] = useState(null);\n    const [callActive, setCallActice] = useState(false);\n    const [call, setCall] = useState();\n\n    useEffect(()=>{\n        let isMounted = true;\n\n        const getData = async ()=>{\n            return await utils.generateToken('userName');\n        };\n\n        const interval = setInterval(() => {\n            getData().then(\n                data => {\n                    if (isMounted) {\n                        const twilioDevice = new Device(data.token); \n            \n                        twilioDevice.on('incoming', connection => {\n                            // immediately accepts incoming connection\n                            connection.accept();\n                            console.log(2);\n                            setStatus(connection.status());\n                        });\n                            \n                        twilioDevice.on('ready', device => {\n                            setStatus(\"device ready\");\n                            setReady(true);\n                            setDevice(device)\n                        });\n                        \n                        twilioDevice.on('connect', connection => {\n                            \n                            if (connection.status() === 'open') {\n                                setCallActice(true)\n                                setCall(connection)\n                            } \n    \n                            setStatus(connection.status())\n                            if (\"phoneNumber\" in connection.message) {\n                                setStatus(\"In call with \" + connection.message.phoneNumber);\n                            }\n                        });\n                        \n                        twilioDevice.on('disconnect', connection => {\n                            console.log(connection.status());\n                            setStatus(connection.status())\n                            if (connection.status() === 'closed') {\n                                setCallActice(false)\n                            } \n                        });\n            \n                        twilioDevice.on(\"error\", (error) => {\n                            console.log(\"Twilio.Device Error: \" + error.message);\n                            setStatus(\"ERROR: \" + error.message);\n                        }, 1000 * 60 * 50); // 50 minutes\n                    }\n                }\n            );\n        })\n\n\n        return () => { \n            isMounted = false\n            clearInterval(interval);\n        };\n    },[]);\n    \n\n    return (\n        <div>\n                    <input \n                        type=\"text\" \n                        value={identity}\n                        placeholder=\"phone\"\n                        onChange={(e) => setIdentity(e.target.value)}\n                    />\n                    <input \n                        disabled={ready ? false : true}\n                        type=\"button\" \n                        value=\"call\" \n                        onClick={async () => {\n                            device.connect({ phoneNumber : '972534217014' });\n                        }}\n                    />\n                    <br/>\n                    <button\n                        disabled={!callActive}\n                        onClick={() => device.disconnectAll()}\n                    >\n                        hangup\n                    </button>\n                    <button\n                        disabled={!callActive}\n                        onClick={() => call.mute(true)}\n                    >\n                        mute\n                    </button>\n                    <button\n                        disabled={!callActive}\n                        onClick={() => call.mute(false)}\n                    >\n                        unmute\n                    </button>\n            <p>{ status }</p>\n        </div>\n    );\n}\n\nexport default Phone;"],"mappings":"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"},"metadata":{},"sourceType":"module"}