{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LogLevelModule = require(\"loglevel\");\n\nvar constants_1 = require(\"./constants\");\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\n\n\nvar Log =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  function Log(options) {\n    this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(constants_1.PACKAGE_NAME);\n  }\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n\n\n  Log.getInstance = function () {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n\n    return Log.instance;\n  };\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n\n\n  Log.prototype.debug = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).debug.apply(_a, args);\n  };\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n\n\n  Log.prototype.error = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).error.apply(_a, args);\n  };\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n\n\n  Log.prototype.info = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).info.apply(_a, args);\n  };\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n\n\n  Log.prototype.setDefaultLevel = function (level) {\n    this._log.setDefaultLevel(level);\n  };\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n\n\n  Log.prototype.warn = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    (_a = this._log).warn.apply(_a, args);\n  };\n  /**\n   * Log levels\n   */\n\n\n  Log.levels = LogLevelModule.levels;\n  return Log;\n}();\n\nexports.default = Log;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;AAMA;;AACA;AAaA;;;;;;AAIA;AAAA;AAAA;EA2BE;;;;EAIA,aAAYA,OAAZ,EAAgC;IAC9B,KAAKC,IAAL,GAAY,CAACD,OAAO,IAAIA,OAAO,CAACE,cAAnB,GAAoCF,OAAO,CAACE,cAA5C,GAA6DA,cAA9D,EAA8EC,SAA9E,CAAwFC,wBAAxF,CAAZ;EACD;EA3BD;;;;;;EAIOC,kBAAP;IACE,IAAI,CAACA,GAAG,CAACC,QAAT,EAAmB;MACjBD,GAAG,CAACC,QAAJ,GAAe,IAAID,GAAJ,EAAf;IACD;;IACD,OAAOA,GAAG,CAACC,QAAX;EACD,CALM;EAyBP;;;;;;EAIAD;;;IAAM;;SAAA,yCAAc;MAAdE;;;IACJ,WAAKN,IAAL,EAAUO,KAAV,CAAeC,KAAf,CAAeC,EAAf,EAAmBH,IAAnB;EACD,CAFD;EAIA;;;;;;EAIAF;;;IAAM;;SAAA,yCAAc;MAAdE;;;IACJ,WAAKN,IAAL,EAAUU,KAAV,CAAeF,KAAf,CAAeC,EAAf,EAAmBH,IAAnB;EACD,CAFD;EAIA;;;;;;EAIAF;;;IAAK;;SAAA,yCAAc;MAAdE;;;IACH,WAAKN,IAAL,EAAUW,IAAV,CAAcH,KAAd,CAAcC,EAAd,EAAkBH,IAAlB;EACD,CAFD;EAIA;;;;;EAGAF,0CAAgBQ,KAAhB,EAAkD;IAChD,KAAKZ,IAAL,CAAUa,eAAV,CAA0BD,KAA1B;EACD,CAFD;EAIA;;;;;;EAIAR;;;IAAK;;SAAA,yCAAc;MAAdE;;;IACH,WAAKN,IAAL,EAAUc,IAAV,CAAcN,KAAd,CAAcC,EAAd,EAAkBH,IAAlB;EACD,CAFD;EArEA;;;;;EAGOF,aAAkCH,cAAc,CAACc,MAAjD;EAqET;AAAC,CAzED;;AA2EAC,kBAAeZ,GAAf","names":["options","_log","LogLevelModule","getLogger","constants_1","Log","instance","args","debug","apply","_a","error","info","level","setDefaultLevel","warn","levels","exports"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio-client/lib/twilio/log.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\n\nimport * as LogLevelModule from 'loglevel';\nimport { PACKAGE_NAME } from './constants';\n\n/**\n * Options that may be passed to the {@link Log} constructor for internal testing.\n * @private\n */\nexport interface LogOptions {\n  /**\n   * Custom loglevel module\n   */\n  LogLevelModule: any;\n}\n\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\nclass Log {\n  /**\n   * Log levels\n   */\n  static levels: LogLevelModule.LogLevel = LogLevelModule.levels;\n\n  /**\n   * Create the logger singleton instance if it doesn't exists\n   * @returns The singleton {@link Log} instance\n   */\n  static getInstance(): Log {\n    if (!Log.instance) {\n      Log.instance = new Log();\n    }\n    return Log.instance;\n  }\n\n  /**\n   * The logger singleton instance\n   */\n  private static instance: Log;\n\n  /**\n   * The loglevel logger instance that will be used in this {@link Log}\n   */\n  private _log: LogLevelModule.Logger;\n\n  /**\n   * @constructor\n   * @param [options] - Optional settings\n   */\n  constructor(options?: LogOptions) {\n    this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(PACKAGE_NAME);\n  }\n\n  /**\n   * Log a debug message\n   * @param args - Any number of arguments to be passed to loglevel.debug\n   */\n  debug(...args: any[]): void {\n    this._log.debug(...args);\n  }\n\n  /**\n   * Log an error message\n   * @param args - Any number of arguments to be passed to loglevel.error\n   */\n  error(...args: any[]): void {\n    this._log.error(...args);\n  }\n\n  /**\n   * Log an info message\n   * @param args - Any number of arguments to be passed to loglevel.info\n   */\n  info(...args: any[]): void {\n    this._log.info(...args);\n  }\n\n  /**\n   * Set a default log level to disable all logging below the given level\n   */\n  setDefaultLevel(level: LogLevelModule.LogLevelDesc): void {\n    this._log.setDefaultLevel(level);\n  }\n\n  /**\n   * Log a warning message\n   * @param args - Any number of arguments to be passed to loglevel.warn\n   */\n  warn(...args: any[]): void {\n    this._log.warn(...args);\n  }\n}\n\nexport default Log;\n"]},"metadata":{},"sourceType":"script"}