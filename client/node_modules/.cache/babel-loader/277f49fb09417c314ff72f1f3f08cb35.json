{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/workSpace/amanCallHistory/client/src/components/SimpleTableComp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SimpleTableComp = _ref => {\n  _s();\n\n  let {\n    columns = [],\n    rows = [],\n    maxLines = 8,\n    showSelection = false,\n    selectState,\n    loading\n  } = _ref;\n  const [allRowsSelected, setAllRowsSelected] = useState(false);\n  const [selectedRows, setSelectedRows] = selectState || [null, () => {}]; // Use useEffect hook to update allRowsSelected when selectedRows changes\n\n  useEffect(() => {\n    setAllRowsSelected((selectedRows === null || selectedRows === void 0 ? void 0 : selectedRows.length) === (rows === null || rows === void 0 ? void 0 : rows.length) && (selectedRows === null || selectedRows === void 0 ? void 0 : selectedRows.length) !== 0);\n  }, [selectedRows, rows]);\n\n  const handleCheckboxChange = row => {\n    if (selectedRows !== null && selectedRows !== void 0 && selectedRows.includes(row)) {\n      setSelectedRows(selectedRows => {\n        let res = selectedRows.filter(r => r !== row);\n        return res;\n      });\n    } else {\n      setSelectedRows(selectedRows => {\n        let res = [...selectedRows, row];\n        return res;\n      });\n    }\n\n    setAllRowsSelected(selectedRows.length === rows.length);\n  };\n\n  const handleSelectAllChange = event => {\n    setSelectedRows(event.target.checked ? rows : []);\n    setAllRowsSelected(event.target.checked);\n  };\n\n  const overflowStyle = maxLines > 0 ? {\n    overflowY: 'scroll',\n    minHeight: `${57 + maxLines * 53.02}px`,\n    maxHeight: showSelection ? `${57 + (maxLines - 1) * 54.02}px` : `${57 + maxLines * 53.02}px`\n  } : {}; // 50px is an estimate of the row height\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    style: overflowStyle,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        style: {\n          position: 'sticky',\n          top: '0',\n          backgroundColor: 'white'\n        },\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [showSelection && /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: allRowsSelected,\n              onChange: handleSelectAllChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: column.header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this)\n          }, column.accessor, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: loading ? /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            colSpan: showSelection ? columns.length + 1 : columns.length,\n            rowSpan: maxLines,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n              style: {\n                position: 'relative',\n                top: `${(maxLines - 1) / 2 * 53.02}px`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this) : rows.length > 0 ? rows.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [showSelection && /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedRows === null || selectedRows === void 0 ? void 0 : selectedRows.includes(row),\n              onChange: () => handleCheckboxChange(row)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 37\n          }, this), columns.map(column => {\n            let value = row;\n            column.accessor.split('.').forEach(prop => {\n              value = value[prop];\n            });\n            return /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              style: {\n                minWidth: column.width || '100px'\n              },\n              children: column.renderCell ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: column.renderCell(row)\n              }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: value\n              }, void 0, false)\n            }, column.accessor, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 41\n            }, this);\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            rowSpan: maxLines,\n            colSpan: showSelection ? columns.length + 1 : columns.length,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                position: 'relative',\n                top: `${maxLines / 3 * 53.02}px`\n              },\n              children: \"\\u05D4\\u05D8\\u05D1\\u05DC\\u05D4 \\u05E8\\u05D9\\u05E7\\u05D4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SimpleTableComp, \"5m+mhBq2g0YU9vjVpuKlaSMhN5Q=\");\n\n_c = SimpleTableComp;\nexport default SimpleTableComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleTableComp\");","map":{"version":3,"names":["React","useState","useEffect","Table","TableBody","TableCell","TableHead","TableRow","Paper","CircularProgress","SimpleTableComp","columns","rows","maxLines","showSelection","selectState","loading","allRowsSelected","setAllRowsSelected","selectedRows","setSelectedRows","length","handleCheckboxChange","row","includes","res","filter","r","handleSelectAllChange","event","target","checked","overflowStyle","overflowY","minHeight","maxHeight","position","top","backgroundColor","map","column","header","accessor","index","value","split","forEach","prop","minWidth","width","renderCell"],"sources":["/home/david/Desktop/workSpace/amanCallHistory/client/src/components/SimpleTableComp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nconst SimpleTableComp = ({ columns = [], rows = [], maxLines = 8, showSelection = false, selectState, loading }) => {\n    const [allRowsSelected, setAllRowsSelected] = useState(false);\n    const [selectedRows, setSelectedRows] = selectState || [null, () => { }];\n\n    // Use useEffect hook to update allRowsSelected when selectedRows changes\n    useEffect(() => {\n        setAllRowsSelected((selectedRows?.length === rows?.length) && (selectedRows?.length !== 0));\n    }, [selectedRows, rows]);\n\n    const handleCheckboxChange = (row) => {\n        if (selectedRows?.includes(row)) {\n            setSelectedRows(selectedRows => {\n                let res = selectedRows.filter(r => r !== row);\n                return res;\n            });\n        } else {\n            setSelectedRows(selectedRows => {\n                let res = [...selectedRows, row];\n                return res;\n            });\n        }\n        setAllRowsSelected(selectedRows.length === rows.length);\n    };\n\n    const handleSelectAllChange = (event) => {\n        setSelectedRows(event.target.checked ? rows : []);\n        setAllRowsSelected(event.target.checked);\n    };\n\n    const overflowStyle = maxLines > 0 ? {\n        overflowY: 'scroll',\n        minHeight: `${57 + (maxLines * 53.02)}px`,\n        maxHeight: showSelection ? `${57 + ((maxLines - 1) * 54.02)}px` : `${57 + (maxLines * 53.02)}px`,\n    } : {}; // 50px is an estimate of the row height\n\n    return (\n        <Paper style={overflowStyle}>\n            <Table>\n                <TableHead style={{ position: 'sticky', top: '0', backgroundColor: 'white' }}>\n                    <TableRow>\n                        {showSelection &&\n                            <TableCell align=\"center\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={allRowsSelected}\n                                    onChange={handleSelectAllChange}\n                                />\n                            </TableCell>\n                        }\n                        {columns.map(column => (\n                            <TableCell key={column.accessor} align=\"right\">\n                                <b>{column.header}</b>\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {loading ? (\n                        <TableRow>\n                            <TableCell\n                                colSpan={showSelection ? columns.length + 1 : columns.length}\n                                rowSpan={maxLines}\n                                align=\"center\"\n                            >\n                                <CircularProgress style={{ position: 'relative', top: `${((maxLines - 1) / 2) * 53.02}px` }} />\n                            </TableCell>\n                        </TableRow>\n                    ) : rows.length > 0 ? (\n                        rows.map((row, index) => (\n                            <TableRow key={index}>\n                                {showSelection &&\n                                    <TableCell align=\"center\">\n                                        <input\n                                            type=\"checkbox\"\n                                            checked={selectedRows?.includes(row)}\n                                            onChange={() => handleCheckboxChange(row)}\n                                        />\n                                    </TableCell>\n                                }\n                                {columns.map(column => {\n                                    let value = row;\n                                    column.accessor.split('.').forEach(prop => {\n                                        value = value[prop];\n                                    });\n                                    return (\n                                        <TableCell key={column.accessor} align=\"right\" style={{ minWidth: column.width || '100px' }}>\n                                            {column.renderCell ? <>{column.renderCell(row)}</> : <>{value}</>}\n                                        </TableCell>\n                                    );\n                                })}\n                            </TableRow>\n                        ))\n                    ) : (\n                        <TableRow>\n                            <TableCell rowSpan={maxLines} colSpan={showSelection ? columns.length + 1 : columns.length} align=\"center\">\n                                <h3 style={{ position: 'relative', top: `${((maxLines) / 3) * 53.02}px` }}>\n                                    הטבלה ריקה\n                                </h3>\n                            </TableCell>\n                        </TableRow>\n                    )}\n                </TableBody>\n            </Table>\n        </Paper>\n    );\n};\n\nexport default SimpleTableComp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}