{"ast":null,"code":"import * as React from 'react';\nimport { useValidation } from './useValidation';\nimport { useLocalizationContext } from '../useUtils';\nexport var validateDate = function validateDate(_ref) {\n  var props = _ref.props,\n      value = _ref.value,\n      adapter = _ref.adapter;\n  var now = adapter.utils.date();\n  var date = adapter.utils.date(value);\n  var shouldDisableDate = props.shouldDisableDate,\n      _props$minDate = props.minDate,\n      minDate = _props$minDate === void 0 ? adapter.defaultDates.minDate : _props$minDate,\n      _props$maxDate = props.maxDate,\n      maxDate = _props$maxDate === void 0 ? adapter.defaultDates.maxDate : _props$maxDate,\n      disableFuture = props.disableFuture,\n      disablePast = props.disablePast;\n\n  if (date === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !adapter.utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(shouldDisableDate && shouldDisableDate(date)):\n      return 'shouldDisableDate';\n\n    case Boolean(disableFuture && adapter.utils.isAfterDay(date, now)):\n      return 'disableFuture';\n\n    case Boolean(disablePast && adapter.utils.isBeforeDay(date, now)):\n      return 'disablePast';\n\n    case Boolean(minDate && adapter.utils.isBeforeDay(date, minDate)):\n      return 'minDate';\n\n    case Boolean(maxDate && adapter.utils.isAfterDay(date, maxDate)):\n      return 'maxDate';\n\n    default:\n      return null;\n  }\n};\nexport var useIsDayDisabled = function useIsDayDisabled(_ref2) {\n  var shouldDisableDate = _ref2.shouldDisableDate,\n      minDate = _ref2.minDate,\n      maxDate = _ref2.maxDate,\n      disableFuture = _ref2.disableFuture,\n      disablePast = _ref2.disablePast;\n  var adapter = useLocalizationContext();\n  return React.useCallback(function (day) {\n    return validateDate({\n      adapter: adapter,\n      value: day,\n      props: {\n        shouldDisableDate: shouldDisableDate,\n        minDate: minDate,\n        maxDate: maxDate,\n        disableFuture: disableFuture,\n        disablePast: disablePast\n      }\n    }) !== null;\n  }, [adapter, shouldDisableDate, minDate, maxDate, disableFuture, disablePast]);\n};\n\nvar isSameDateError = function isSameDateError(a, b) {\n  return a === b;\n};\n\nexport var useDateValidation = function useDateValidation(props) {\n  return useValidation(props, validateDate, isSameDateError);\n};","map":null,"metadata":{},"sourceType":"module"}