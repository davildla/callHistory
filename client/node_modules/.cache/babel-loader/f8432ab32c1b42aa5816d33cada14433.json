{"ast":null,"code":"import { IncomingRequestMessage } from \"./incoming-request-message.js\";\nimport { IncomingResponseMessage } from \"./incoming-response-message.js\";\nimport { OutgoingRequestMessage } from \"./outgoing-request-message.js\"; // If the Content-Disposition header field is missing, bodies of\n// Content-Type application/sdp imply the disposition \"session\", while\n// other content types imply \"render\".\n// https://tools.ietf.org/html/rfc3261#section-13.2.1\n\nfunction contentTypeToContentDisposition(contentType) {\n  if (contentType === \"application/sdp\") {\n    return \"session\";\n  } else {\n    return \"render\";\n  }\n}\n/**\n * Create a Body given a legacy body type.\n * @param bodyLegacy - Body Object\n * @internal\n */\n\n\nexport function fromBodyLegacy(bodyLegacy) {\n  const content = typeof bodyLegacy === \"string\" ? bodyLegacy : bodyLegacy.body;\n  const contentType = typeof bodyLegacy === \"string\" ? \"application/sdp\" : bodyLegacy.contentType;\n  const contentDisposition = contentTypeToContentDisposition(contentType);\n  const body = {\n    contentDisposition,\n    contentType,\n    content\n  };\n  return body;\n}\n/**\n * User-Defined Type Guard for Body.\n * @param body - Body to check.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function isBody(body) {\n  return body && typeof body.content === \"string\" && typeof body.contentType === \"string\" && body.contentDisposition === undefined ? true : typeof body.contentDisposition === \"string\";\n}\n/**\n * Given a message, get a normalized body.\n * The content disposition is inferred if not set.\n * @param message - The message.\n * @internal\n */\n\nexport function getBody(message) {\n  let contentDisposition;\n  let contentType;\n  let content; // We're in UAS role, receiving incoming request\n\n  if (message instanceof IncomingRequestMessage) {\n    if (message.body) {\n      // FIXME: Parsing needs typing\n      const parse = message.parseHeader(\"Content-Disposition\");\n      contentDisposition = parse ? parse.type : undefined;\n      contentType = message.parseHeader(\"Content-Type\");\n      content = message.body;\n    }\n  } // We're in UAC role, receiving incoming response\n\n\n  if (message instanceof IncomingResponseMessage) {\n    if (message.body) {\n      // FIXME: Parsing needs typing\n      const parse = message.parseHeader(\"Content-Disposition\");\n      contentDisposition = parse ? parse.type : undefined;\n      contentType = message.parseHeader(\"Content-Type\");\n      content = message.body;\n    }\n  } // We're in UAC role, sending outgoing request\n\n\n  if (message instanceof OutgoingRequestMessage) {\n    if (message.body) {\n      contentDisposition = message.getHeader(\"Content-Disposition\");\n      contentType = message.getHeader(\"Content-Type\");\n\n      if (typeof message.body === \"string\") {\n        // FIXME: OutgoingRequest should not allow a \"string\" body without a \"Content-Type\" header.\n        if (!contentType) {\n          throw new Error(\"Header content type header does not equal body content type.\");\n        }\n\n        content = message.body;\n      } else {\n        // FIXME: OutgoingRequest should not allow the \"Content-Type\" header not to match th body content type\n        if (contentType && contentType !== message.body.contentType) {\n          throw new Error(\"Header content type header does not equal body content type.\");\n        }\n\n        contentType = message.body.contentType;\n        content = message.body.body;\n      }\n    }\n  } // We're in UAS role, sending outgoing response\n\n\n  if (isBody(message)) {\n    contentDisposition = message.contentDisposition;\n    contentType = message.contentType;\n    content = message.content;\n  } // No content, no body.\n\n\n  if (!content) {\n    return undefined;\n  }\n\n  if (contentType && !contentDisposition) {\n    contentDisposition = contentTypeToContentDisposition(contentType);\n  }\n\n  if (!contentDisposition) {\n    throw new Error(\"Content disposition undefined.\");\n  }\n\n  if (!contentType) {\n    throw new Error(\"Content type undefined.\");\n  }\n\n  return {\n    contentDisposition,\n    contentType,\n    content\n  };\n}","map":null,"metadata":{},"sourceType":"module"}