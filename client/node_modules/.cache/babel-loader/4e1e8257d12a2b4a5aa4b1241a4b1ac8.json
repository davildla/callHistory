{"ast":null,"code":"import _asyncToGenerator from \"/home/david/Desktop/workSpace/bots-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/david/Desktop/workSpace/bots-dashboard/src/components/FormComp.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React from 'react';\nimport { useFormik, FormikProvider } from 'formik'; // import MultiSelectComp from '../../selectComp/MultiSelectComp';\n\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { TextField, Button, MenuItem, Checkbox } from '@mui/material';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\nfunction FormTamplate(props) {\n  var _this = this;\n\n  var requiredFields = props.requiredFields; // list of required fields\n\n  var initialValues = props.initialValues;\n  var multySelectFlg = props.multiSelect;\n  var onSubmit = props.onSubmit;\n  var fields = props.fields;\n\n  var validate = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(val) {\n      var errors, i, field;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              errors = {};\n              i = 0;\n\n            case 2:\n              if (!(i < requiredFields.length)) {\n                _context.next = 14;\n                break;\n              }\n\n              field = requiredFields[i];\n\n              if (!val[field]) {\n                errors[field] = 'שדה חובה';\n              }\n\n              if (!(field === 'userName')) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return props.isAvailable(val[field]);\n\n            case 8:\n              _context.t0 = _context.sent;\n\n              if (!(_context.t0 === false)) {\n                _context.next = 11;\n                break;\n              }\n\n              errors[field] = 'שם משתמש תפוס';\n\n            case 11:\n              i++;\n              _context.next = 2;\n              break;\n\n            case 14:\n              return _context.abrupt(\"return\", errors);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function validate(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validate: validate\n  });\n\n  var createFields = function createFields(field, index) {\n    var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'large';\n    var fieldName = field.name || field._id;\n    var errorCon = field.mendatory ? formik.errors[fieldName] && formik.touched[fieldName] ? true : false : null;\n    var helperTextCon = field.mendatory ? formik.touched[fieldName] ? formik.errors[fieldName] : null : null;\n    var type = field.type || 'text';\n    var res = null;\n\n    if (type === 'select') {\n      res = /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        style: {\n          paddingLeft: '10px',\n          paddingRight: '10px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, field.title, \" :\", /*#__PURE__*/React.createElement(TextField, Object.assign({\n        select: true,\n        fullWidth: true,\n        size: size,\n        name: fieldName,\n        value: formik.values[fieldName],\n        onChange: formik.handleChange,\n        error: errorCon,\n        helperText: helperTextCon\n      }, formik.getFieldProps(fieldName), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }), field?.items?.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: index,\n          value: option?.val || option?.value,\n          style: {\n            direction: 'rtl'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }\n        }, option?.name || option?.title);\n      })));\n    } else if (type === 'checkbox') {\n      res = /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        style: {\n          paddingLeft: '10px',\n          paddingRight: '10px',\n          direction: 'ltr'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, field.title, /*#__PURE__*/React.createElement(Checkbox, {\n        defaultChecked: initialValues[fieldName],\n        onChange: formik.handleChange,\n        name: fieldName,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      })));\n    } else if (type === \"datetime\") {\n      res = /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        style: {\n          direction: 'rtl',\n          paddingLeft: '10px',\n          paddingRight: '10px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, field.title, \" :\", /*#__PURE__*/React.createElement(LocalizationProvider, {\n        dateAdapter: AdapterDateFns,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DateTimePicker, Object.assign({\n        ampm: false,\n        fullWidth: true,\n        size: size,\n        error: errorCon,\n        name: fieldName,\n        helperText: helperTextCon\n      }, formik.getFieldProps(fieldName), {\n        value: formik.values[fieldName] || Date.now(),\n        onChange: function onChange(val) {\n          var date = new Date(val).getTime();\n          return formik.setFieldValue(fieldName, date);\n        },\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n            size: \"small\",\n            fullWidth: true,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 54\n            }\n          }));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }))));\n    } else {\n      res = /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        style: {\n          paddingLeft: '10px',\n          paddingRight: '10px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, field.title, \" :\", /*#__PURE__*/React.createElement(TextField, Object.assign({\n        fullWidth: true,\n        size: size,\n        type: type,\n        name: fieldName,\n        autoComplete: \"off\",\n        error: errorCon,\n        helperText: helperTextCon\n      }, formik.getFieldProps(fieldName), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      })), size !== 'small' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 50\n        }\n      })) : null);\n    }\n\n    return res;\n  }; // let formFields = fields?.map((field, index) => createFields(field, index));\n\n\n  console.log(fields); // let multiSelect = multySelectFlg ? multySelectFlg.map((item, index)=>(\n  //     <div key={index} style={{paddingLeft : '10px', paddingRight : '10px'}}>\n  //         {item.title}\n  //         <MultiSelectComp \n  //             value={item.value}\n  //             options={item.options}\n  //             handleChange={item.handleChange}\n  //         />\n  //     </div>\n  // ))\n  // : null;\n\n  var form = /*#__PURE__*/React.createElement(FormikProvider, {\n    value: formik,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    style: {\n      'direction': \"rtl\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      'overflow': 'auto',\n      'maxHeight': '60vh',\n      'padding': '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    color: \"success\",\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"\\u05E9\\u05DE\\u05D5\\u05E8\")));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, form);\n}\n\nexport default FormTamplate;","map":{"version":3,"names":["React","useFormik","FormikProvider","DateTimePicker","AdapterDateFns","TextField","Button","MenuItem","Checkbox","LocalizationProvider","FormTamplate","props","requiredFields","initialValues","multySelectFlg","multiSelect","onSubmit","fields","validate","val","errors","i","length","field","isAvailable","formik","createFields","index","size","fieldName","name","_id","errorCon","mendatory","touched","helperTextCon","type","res","paddingLeft","paddingRight","title","values","handleChange","getFieldProps","items","map","option","value","direction","Date","now","date","getTime","setFieldValue","params","console","log","form","handleSubmit"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/components/FormComp.js"],"sourcesContent":["import React from 'react';\nimport { useFormik, FormikProvider } from 'formik';\n// import MultiSelectComp from '../../selectComp/MultiSelectComp';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { TextField, Button, MenuItem, Checkbox } from '@mui/material';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n\nfunction FormTamplate(props) {\n\n    const requiredFields = props.requiredFields; // list of required fields\n    const initialValues = props.initialValues;\n    const multySelectFlg = props.multiSelect;\n    const onSubmit = props.onSubmit;\n    const fields = props.fields;\n\n    const validate = async (val)=>{\n        const errors = {};\n        for (let i = 0; i < requiredFields.length; i++){\n            let field = requiredFields[i];\n            if(!val[field]){\n                errors[field] ='שדה חובה';\n            }\n            if(field === 'userName'){\n                if ( await props.isAvailable(val[field]) === false) errors[field] ='שם משתמש תפוס';\n            }\n        }\n        return errors;\n    }\n\n\n    const formik = useFormik({\n        initialValues : initialValues,\n        onSubmit      : onSubmit,\n        validate      : validate\n    });\n\n    const createFields = (field, index, size='large') => {\n        let fieldName = field.name || field._id;\n        let errorCon = field.mendatory ? (formik.errors[fieldName] && formik.touched[fieldName] ? true : false) : null;\n        let helperTextCon = field.mendatory ?(formik.touched[fieldName]? formik.errors[fieldName] : null) : null;\n        let type = field.type || 'text';\n        let res = null;\n\n        if (type === 'select') {\n            res = (\n                <div key={index} style={{paddingLeft : '10px', paddingRight : '10px'}}>\n                    {field.title} :\n                    <TextField\n                        select\n                        fullWidth\n                        size={size}\n                        name={fieldName}\n                        value={formik.values[fieldName]}\n                        onChange={formik.handleChange}\n                        error = {errorCon}\n                        helperText={helperTextCon} \n                        {...formik.getFieldProps(fieldName)}\n                    >\n                        {field?.items?.map((option, index) => (\n                        <MenuItem key={index} value={option?.val || option?.value} style={{direction : 'rtl'}}>\n                            {option?.name || option?.title}\n                        </MenuItem>\n                        ))}\n                    </TextField>\n                </div>\n            )\n        } else if (type === 'checkbox'){\n            res = (\n                <div key={index} style={{paddingLeft : '10px', paddingRight : '10px', direction : 'ltr'}}>\n                    <label>\n                        {field.title}\n                        <Checkbox \n                            defaultChecked={initialValues[fieldName]} \n                            onChange={formik.handleChange}\n                            name={fieldName}\n                        />\n                    </label>\n                </div>\n            )\n        } else if (type === \"datetime\"){\n            res = (\n                <div  key={index} style={{direction : 'rtl', paddingLeft : '10px', paddingRight : '10px'}}>\n                    {field.title} : \n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <DateTimePicker\n                            ampm={false}\n                            fullWidth\n                            size={size}\n                            error = {errorCon}\n                            name={fieldName}\n                            helperText={helperTextCon} \n                            {...formik.getFieldProps(fieldName)}\n                            value={formik.values[fieldName] || Date.now()}\n                            onChange={val => {\n                                let date = (new Date(val)).getTime();\n                                return formik.setFieldValue(fieldName, date);\n                            }}\n                            renderInput={(params) => <TextField {...params} size=\"small\" fullWidth/>}\n                        /> \n                    </LocalizationProvider>\n                </div>\n            )\n        } else {\n            res = (\n                <div key={index} style={{paddingLeft : '10px', paddingRight : '10px'}}>\n                    {field.title} :\n                    <TextField\n                        fullWidth\n                        size={size}\n                        type={type}\n                        name={fieldName}\n                        autoComplete='off'\n                        error = {errorCon}\n                        helperText={helperTextCon} \n                        {...formik.getFieldProps(fieldName)}\n                    />\n                    { size !== 'small' ?  <><br/><br/></> : null }\n                </div>\n            )\n        }\n        return res\n    }\n\n    // let formFields = fields?.map((field, index) => createFields(field, index));\n    console.log(fields);\n\n    // let multiSelect = multySelectFlg ? multySelectFlg.map((item, index)=>(\n    //     <div key={index} style={{paddingLeft : '10px', paddingRight : '10px'}}>\n    //         {item.title}\n    //         <MultiSelectComp \n    //             value={item.value}\n    //             options={item.options}\n    //             handleChange={item.handleChange}\n    //         />\n    //     </div>\n    // ))\n    // : null;\n\n    let form = (\n        <FormikProvider value={formik}>\n            <form onSubmit={formik.handleSubmit} style = {{'direction' : \"rtl\"}} >\n                <div style = {{'overflow' : 'auto', 'maxHeight' : '60vh', 'padding' : '10px'}}> {/* maybe need to change */}\n                    {/* {formFields} */}\n                    {/* {multiSelect} */}\n                </div>\n\n                <Button type=\"submit\" fullWidth color = 'success' variant=\"contained\">שמור</Button>\n            </form>\n        </FormikProvider>\n    )\n\n    return (\n        <div>\n            {form}\n        </div>\n    );\n}\n\nexport default FormTamplate;"],"mappings":"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"},"metadata":{},"sourceType":"module"}