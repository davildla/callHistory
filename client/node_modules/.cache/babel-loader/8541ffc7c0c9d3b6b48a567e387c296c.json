{"ast":null,"code":"/**\n * @internal\n */\nexport class Parameters {\n  constructor(parameters) {\n    this.parameters = {}; // for in is required here as the Grammar parser is adding to the prototype chain\n\n    for (const param in parameters) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (parameters.hasOwnProperty(param)) {\n        this.setParam(param, parameters[param]);\n      }\n    }\n  }\n\n  setParam(key, value) {\n    if (key) {\n      this.parameters[key.toLowerCase()] = typeof value === \"undefined\" || value === null ? null : value.toString();\n    }\n  }\n\n  getParam(key) {\n    if (key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  }\n\n  hasParam(key) {\n    return !!(key && this.parameters[key.toLowerCase()] !== undefined);\n  }\n\n  deleteParam(key) {\n    key = key.toLowerCase();\n\n    if (this.hasParam(key)) {\n      const value = this.parameters[key];\n      delete this.parameters[key];\n      return value;\n    }\n  }\n\n  clearParams() {\n    this.parameters = {};\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}