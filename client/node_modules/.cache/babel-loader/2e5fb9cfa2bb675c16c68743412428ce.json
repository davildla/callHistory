{"ast":null,"code":"\"use strict\";\n\nvar _a, _b, _c, _d;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\n\nvar errors_1 = require(\"./errors\");\n/**\n * Valid deprecated regions.\n * @private\n */\n\n\nvar DeprecatedRegion;\n\n(function (DeprecatedRegion) {\n  DeprecatedRegion[\"Au\"] = \"au\";\n  DeprecatedRegion[\"Br\"] = \"br\";\n  DeprecatedRegion[\"Ie\"] = \"ie\";\n  DeprecatedRegion[\"Jp\"] = \"jp\";\n  DeprecatedRegion[\"Sg\"] = \"sg\";\n  DeprecatedRegion[\"UsOr\"] = \"us-or\";\n  DeprecatedRegion[\"UsVa\"] = \"us-va\";\n})(DeprecatedRegion = exports.DeprecatedRegion || (exports.DeprecatedRegion = {}));\n/**\n * Valid edges.\n * @private\n */\n\n\nvar Edge;\n\n(function (Edge) {\n  /**\n   * Public edges\n   */\n  Edge[\"Sydney\"] = \"sydney\";\n  Edge[\"SaoPaulo\"] = \"sao-paulo\";\n  Edge[\"Dublin\"] = \"dublin\";\n  Edge[\"Frankfurt\"] = \"frankfurt\";\n  Edge[\"Tokyo\"] = \"tokyo\";\n  Edge[\"Singapore\"] = \"singapore\";\n  Edge[\"Ashburn\"] = \"ashburn\";\n  Edge[\"Umatilla\"] = \"umatilla\";\n  Edge[\"Roaming\"] = \"roaming\";\n  /**\n   * Interconnect edges\n   */\n\n  Edge[\"AshburnIx\"] = \"ashburn-ix\";\n  Edge[\"SanJoseIx\"] = \"san-jose-ix\";\n  Edge[\"LondonIx\"] = \"london-ix\";\n  Edge[\"FrankfurtIx\"] = \"frankfurt-ix\";\n  Edge[\"SingaporeIx\"] = \"singapore-ix\";\n  Edge[\"SydneyIx\"] = \"sydney-ix\";\n  Edge[\"TokyoIx\"] = \"tokyo-ix\";\n})(Edge = exports.Edge || (exports.Edge = {}));\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\n\n\nvar Region;\n\n(function (Region) {\n  Region[\"Au1\"] = \"au1\";\n  Region[\"Au1Ix\"] = \"au1-ix\";\n  Region[\"Br1\"] = \"br1\";\n  Region[\"De1\"] = \"de1\";\n  Region[\"De1Ix\"] = \"de1-ix\";\n  Region[\"Gll\"] = \"gll\";\n  Region[\"Ie1\"] = \"ie1\";\n  Region[\"Ie1Ix\"] = \"ie1-ix\";\n  Region[\"Ie1Tnx\"] = \"ie1-tnx\";\n  Region[\"Jp1\"] = \"jp1\";\n  Region[\"Jp1Ix\"] = \"jp1-ix\";\n  Region[\"Sg1\"] = \"sg1\";\n  Region[\"Sg1Ix\"] = \"sg1-ix\";\n  Region[\"Sg1Tnx\"] = \"sg1-tnx\";\n  Region[\"Us1\"] = \"us1\";\n  Region[\"Us1Ix\"] = \"us1-ix\";\n  Region[\"Us1Tnx\"] = \"us1-tnx\";\n  Region[\"Us2\"] = \"us2\";\n  Region[\"Us2Ix\"] = \"us2-ix\";\n  Region[\"Us2Tnx\"] = \"us2-tnx\";\n})(Region = exports.Region || (exports.Region = {}));\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\n\n\nexports.deprecatedRegions = (_a = {}, _a[DeprecatedRegion.Au] = Region.Au1, _a[DeprecatedRegion.Br] = Region.Br1, _a[DeprecatedRegion.Ie] = Region.Ie1, _a[DeprecatedRegion.Jp] = Region.Jp1, _a[DeprecatedRegion.Sg] = Region.Sg1, _a[DeprecatedRegion.UsOr] = Region.Us1, _a[DeprecatedRegion.UsVa] = Region.Us1, _a);\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\n\nexports.regionShortcodes = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2\n};\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\n\nvar regionURIs = (_b = {}, _b[Region.Au1] = 'chunderw-vpc-gll-au1.twilio.com', _b[Region.Au1Ix] = 'chunderw-vpc-gll-au1-ix.twilio.com', _b[Region.Br1] = 'chunderw-vpc-gll-br1.twilio.com', _b[Region.De1] = 'chunderw-vpc-gll-de1.twilio.com', _b[Region.De1Ix] = 'chunderw-vpc-gll-de1-ix.twilio.com', _b[Region.Gll] = 'chunderw-vpc-gll.twilio.com', _b[Region.Ie1] = 'chunderw-vpc-gll-ie1.twilio.com', _b[Region.Ie1Ix] = 'chunderw-vpc-gll-ie1-ix.twilio.com', _b[Region.Ie1Tnx] = 'chunderw-vpc-gll-ie1-tnx.twilio.com', _b[Region.Jp1] = 'chunderw-vpc-gll-jp1.twilio.com', _b[Region.Jp1Ix] = 'chunderw-vpc-gll-jp1-ix.twilio.com', _b[Region.Sg1] = 'chunderw-vpc-gll-sg1.twilio.com', _b[Region.Sg1Ix] = 'chunderw-vpc-gll-sg1-ix.twilio.com', _b[Region.Sg1Tnx] = 'chunderw-vpc-gll-sg1-tnx.twilio.com', _b[Region.Us1] = 'chunderw-vpc-gll-us1.twilio.com', _b[Region.Us1Ix] = 'chunderw-vpc-gll-us1-ix.twilio.com', _b[Region.Us1Tnx] = 'chunderw-vpc-gll-us1-tnx.twilio.com', _b[Region.Us2] = 'chunderw-vpc-gll-us2.twilio.com', _b[Region.Us2Ix] = 'chunderw-vpc-gll-us2-ix.twilio.com', _b[Region.Us2Tnx] = 'chunderw-vpc-gll-us2-tnx.twilio.com', _b);\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\n\nexports.edgeToRegion = (_c = {}, _c[Edge.Sydney] = Region.Au1, _c[Edge.SaoPaulo] = Region.Br1, _c[Edge.Dublin] = Region.Ie1, _c[Edge.Frankfurt] = Region.De1, _c[Edge.Tokyo] = Region.Jp1, _c[Edge.Singapore] = Region.Sg1, _c[Edge.Ashburn] = Region.Us1, _c[Edge.Umatilla] = Region.Us2, _c[Edge.Roaming] = Region.Gll,\n/**\n * Interconnect edges\n */\n_c[Edge.AshburnIx] = Region.Us1Ix, _c[Edge.SanJoseIx] = Region.Us2Ix, _c[Edge.LondonIx] = Region.Ie1Ix, _c[Edge.FrankfurtIx] = Region.De1Ix, _c[Edge.SingaporeIx] = Region.Sg1Ix, _c[Edge.SydneyIx] = Region.Au1Ix, _c[Edge.TokyoIx] = Region.Jp1Ix, _c);\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\n\nexports.regionToEdge = (_d = {}, _d[Region.Au1] = Edge.Sydney, _d[Region.Br1] = Edge.SaoPaulo, _d[Region.Ie1] = Edge.Dublin, _d[Region.De1] = Edge.Frankfurt, _d[Region.Jp1] = Edge.Tokyo, _d[Region.Sg1] = Edge.Singapore, _d[Region.Us1] = Edge.Ashburn, _d[Region.Us2] = Edge.Umatilla, _d[Region.Gll] = Edge.Roaming,\n/**\n * Interconnect edges\n */\n_d[Region.Us1Ix] = Edge.AshburnIx, _d[Region.Us2Ix] = Edge.SanJoseIx, _d[Region.Ie1Ix] = Edge.LondonIx, _d[Region.De1Ix] = Edge.FrankfurtIx, _d[Region.Sg1Ix] = Edge.SingaporeIx, _d[Region.Au1Ix] = Edge.SydneyIx, _d[Region.Jp1Ix] = Edge.TokyoIx,\n/**\n * Tnx regions\n */\n_d[Region.Us1Tnx] = Edge.AshburnIx, _d[Region.Us2Tnx] = Edge.AshburnIx, _d[Region.Ie1Tnx] = Edge.LondonIx, _d[Region.Sg1Tnx] = Edge.SingaporeIx, _d);\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\n\nexports.defaultRegion = 'gll';\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\n\nexports.defaultEdge = Edge.Roaming;\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\n\nexports.defaultChunderRegionURI = 'chunderw-vpc-gll.twilio.com';\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\n\nfunction createChunderRegionUri(region) {\n  return region === exports.defaultRegion ? exports.defaultChunderRegionURI : \"chunderw-vpc-gll-\" + region + \".twilio.com\";\n}\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\n\n\nfunction createChunderEdgeUri(edge) {\n  return \"voice-js.\" + edge + \".twilio.com\";\n}\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\n\n\nfunction getChunderURIs(edge, region, onDeprecated) {\n  if (!!region && typeof region !== 'string') {\n    throw new errors_1.InvalidArgumentError('If `region` is provided, it must be of type `string`.');\n  }\n\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new errors_1.InvalidArgumentError('If `edge` is provided, it must be of type `string` or an array of strings.');\n  }\n\n  var deprecatedMessages = [];\n  var uris;\n\n  if (region && edge) {\n    throw new errors_1.InvalidArgumentError('You cannot specify `region` when `edge` is specified in' + '`Twilio.Device.Options`.');\n  } else if (region) {\n    var chunderRegion = region;\n    deprecatedMessages.push('Regions are deprecated in favor of edges. Please see this page for ' + 'documentation: https://www.twilio.com/docs/voice/client/edges.');\n    var isDeprecatedRegion = Object.values(DeprecatedRegion).includes(chunderRegion);\n\n    if (isDeprecatedRegion) {\n      chunderRegion = exports.deprecatedRegions[chunderRegion];\n    }\n\n    var isKnownRegion = Object.values(Region).includes(chunderRegion);\n\n    if (isKnownRegion) {\n      var preferredEdge = exports.regionToEdge[chunderRegion];\n      deprecatedMessages.push(\"Region \\\"\" + chunderRegion + \"\\\" is deprecated, please use `edge` \" + (\"\\\"\" + preferredEdge + \"\\\".\"));\n    }\n\n    uris = [createChunderRegionUri(chunderRegion)];\n  } else if (edge) {\n    var edgeValues_1 = Object.values(Edge);\n    var edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map(function (param) {\n      return edgeValues_1.includes(param) ? createChunderRegionUri(exports.edgeToRegion[param]) : createChunderEdgeUri(param);\n    });\n  } else {\n    uris = [exports.defaultChunderRegionURI];\n  }\n\n  if (onDeprecated && deprecatedMessages.length) {\n    setTimeout(function () {\n      return onDeprecated(deprecatedMessages.join('\\n'));\n    });\n  }\n\n  return uris;\n}\n\nexports.getChunderURIs = getChunderURIs;\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\n\nfunction getRegionShortcode(region) {\n  return exports.regionShortcodes[region] || null;\n}\n\nexports.getRegionShortcode = getRegionShortcode; //# sourceMappingURL=regions.js.map","map":null,"metadata":{},"sourceType":"script"}