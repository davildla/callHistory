{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n */\n\nvar events_1 = require(\"events\");\n\nvar errors_1 = require(\"./errors\");\n\nvar log_1 = require(\"./log\");\n\nvar outputdevicecollection_1 = require(\"./outputdevicecollection\");\n\nvar defaultMediaDevices = require(\"./shims/mediadevices\");\n\nvar util_1 = require(\"./util\");\n\nvar MediaDeviceInfoShim = require('./shims/mediadeviceinfo');\n/**\n * Aliases for audio kinds, used for labelling.\n * @private\n */\n\n\nvar kindAliases = {\n  audioinput: 'Audio Input',\n  audiooutput: 'Audio Output'\n};\n/**\n * Provides input and output audio-based functionality in one convenient class.\n * @publicapi\n */\n\nvar AudioHelper =\n/** @class */\nfunction (_super) {\n  __extends(AudioHelper, _super);\n  /**\n   * @constructor\n   * @private\n   * @param onActiveOutputsChanged - A callback to be called when the user changes the active output devices.\n   * @param onActiveInputChanged - A callback to be called when the user changes the active input device.\n   * @param getUserMedia - The getUserMedia method to use.\n   * @param [options]\n   */\n\n\n  function AudioHelper(onActiveOutputsChanged, onActiveInputChanged, getUserMedia, options) {\n    var _this = _super.call(this) || this;\n    /**\n     * A Map of all audio input devices currently available to the browser by their device ID.\n     */\n\n\n    _this.availableInputDevices = new Map();\n    /**\n     * A Map of all audio output devices currently available to the browser by their device ID.\n     */\n\n    _this.availableOutputDevices = new Map();\n    /**\n     * The currently set audio constraints set by setAudioConstraints().\n     */\n\n    _this._audioConstraints = null;\n    /**\n     * The current input device.\n     */\n\n    _this._inputDevice = null;\n    /**\n     * The current input stream.\n     */\n\n    _this._inputStream = null;\n    /**\n     * Whether the {@link AudioHelper} is currently polling the input stream's volume.\n     */\n\n    _this._isPollingInputVolume = false;\n    /**\n     * An instance of Logger to use.\n     */\n\n    _this._log = log_1.default.getInstance();\n    /**\n     * A record of unknown devices (Devices without labels)\n     */\n\n    _this._unknownDeviceIndexes = {\n      audioinput: {},\n      audiooutput: {}\n    };\n    /**\n     * Remove an input device from inputs\n     * @param lostDevice\n     * @returns Whether the device was active\n     */\n\n    _this._removeLostInput = function (lostDevice) {\n      if (!_this.inputDevice || _this.inputDevice.deviceId !== lostDevice.deviceId) {\n        return false;\n      }\n\n      _this._replaceStream(null);\n\n      _this._inputDevice = null;\n\n      _this._maybeStopPollingVolume();\n\n      var defaultDevice = _this.availableInputDevices.get('default') || Array.from(_this.availableInputDevices.values())[0];\n\n      if (defaultDevice) {\n        _this.setInputDevice(defaultDevice.deviceId);\n      }\n\n      return true;\n    };\n    /**\n     * Remove an input device from outputs\n     * @param lostDevice\n     * @returns Whether the device was active\n     */\n\n\n    _this._removeLostOutput = function (lostDevice) {\n      var wasSpeakerLost = _this.speakerDevices.delete(lostDevice);\n\n      var wasRingtoneLost = _this.ringtoneDevices.delete(lostDevice);\n\n      return wasSpeakerLost || wasRingtoneLost;\n    };\n    /**\n     * Update the available input and output devices\n     */\n\n\n    _this._updateAvailableDevices = function () {\n      if (!_this._mediaDevices) {\n        return Promise.reject('Enumeration not supported');\n      }\n\n      return _this._mediaDevices.enumerateDevices().then(function (devices) {\n        _this._updateDevices(devices.filter(function (d) {\n          return d.kind === 'audiooutput';\n        }), _this.availableOutputDevices, _this._removeLostOutput);\n\n        _this._updateDevices(devices.filter(function (d) {\n          return d.kind === 'audioinput';\n        }), _this.availableInputDevices, _this._removeLostInput);\n\n        var defaultDevice = _this.availableOutputDevices.get('default') || Array.from(_this.availableOutputDevices.values())[0];\n        [_this.speakerDevices, _this.ringtoneDevices].forEach(function (outputDevices) {\n          if (!outputDevices.get().size && _this.availableOutputDevices.size && _this.isOutputSelectionSupported) {\n            outputDevices.set(defaultDevice.deviceId).catch(function (reason) {\n              _this._log.warn(\"Unable to set audio output devices. \" + reason);\n            });\n          }\n        });\n      });\n    };\n\n    options = Object.assign({\n      AudioContext: typeof AudioContext !== 'undefined' && AudioContext,\n      setSinkId: typeof HTMLAudioElement !== 'undefined' && HTMLAudioElement.prototype.setSinkId\n    }, options);\n    _this._getUserMedia = getUserMedia;\n    _this._mediaDevices = options.mediaDevices || defaultMediaDevices;\n    _this._onActiveInputChanged = onActiveInputChanged;\n    var isAudioContextSupported = !!(options.AudioContext || options.audioContext);\n    var isEnumerationSupported = !!(_this._mediaDevices && _this._mediaDevices.enumerateDevices);\n    var isSetSinkSupported = typeof options.setSinkId === 'function';\n    _this.isOutputSelectionSupported = isEnumerationSupported && isSetSinkSupported;\n    _this.isVolumeSupported = isAudioContextSupported;\n\n    if (options.enabledSounds) {\n      _this._addEnabledSounds(options.enabledSounds);\n    }\n\n    if (_this.isVolumeSupported) {\n      _this._audioContext = options.audioContext || options.AudioContext && new options.AudioContext();\n\n      if (_this._audioContext) {\n        _this._inputVolumeAnalyser = _this._audioContext.createAnalyser();\n        _this._inputVolumeAnalyser.fftSize = 32;\n        _this._inputVolumeAnalyser.smoothingTimeConstant = 0.3;\n      }\n    }\n\n    _this.ringtoneDevices = new outputdevicecollection_1.default('ringtone', _this.availableOutputDevices, onActiveOutputsChanged, _this.isOutputSelectionSupported);\n    _this.speakerDevices = new outputdevicecollection_1.default('speaker', _this.availableOutputDevices, onActiveOutputsChanged, _this.isOutputSelectionSupported);\n\n    _this.addListener('newListener', function (eventName) {\n      if (eventName === 'inputVolume') {\n        _this._maybeStartPollingVolume();\n      }\n    });\n\n    _this.addListener('removeListener', function (eventName) {\n      if (eventName === 'inputVolume') {\n        _this._maybeStopPollingVolume();\n      }\n    });\n\n    _this.once('newListener', function () {\n      // NOTE (rrowland): Ideally we would only check isEnumerationSupported here, but\n      //   in at least one browser version (Tested in FF48) enumerateDevices actually\n      //   returns bad data for the listed devices. Instead, we check for\n      //   isOutputSelectionSupported to avoid these quirks that may negatively affect customers.\n      if (!_this.isOutputSelectionSupported) {\n        _this._log.warn('Warning: This browser does not support audio output selection.');\n      }\n\n      if (!_this.isVolumeSupported) {\n        _this._log.warn(\"Warning: This browser does not support Twilio's volume indicator feature.\");\n      }\n    });\n\n    if (isEnumerationSupported) {\n      _this._initializeEnumeration();\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(AudioHelper.prototype, \"audioConstraints\", {\n    /**\n     * The currently set audio constraints set by setAudioConstraints(). Starts as null.\n     */\n    get: function () {\n      return this._audioConstraints;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AudioHelper.prototype, \"inputDevice\", {\n    /**\n     * The active input device. Having no inputDevice specified by `setInputDevice()`\n     * will disable input selection related functionality.\n     */\n    get: function () {\n      return this._inputDevice;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AudioHelper.prototype, \"inputStream\", {\n    /**\n     * The current input stream.\n     */\n    get: function () {\n      return this._inputStream;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Start polling volume if it's supported and there's an input stream to poll.\n   * @private\n   */\n\n  AudioHelper.prototype._maybeStartPollingVolume = function () {\n    var _this = this;\n\n    if (!this.isVolumeSupported || !this._inputStream) {\n      return;\n    }\n\n    this._updateVolumeSource();\n\n    if (this._isPollingInputVolume || !this._inputVolumeAnalyser) {\n      return;\n    }\n\n    var bufferLength = this._inputVolumeAnalyser.frequencyBinCount;\n    var buffer = new Uint8Array(bufferLength);\n    this._isPollingInputVolume = true;\n\n    var emitVolume = function () {\n      if (!_this._isPollingInputVolume) {\n        return;\n      }\n\n      if (_this._inputVolumeAnalyser) {\n        _this._inputVolumeAnalyser.getByteFrequencyData(buffer);\n\n        var inputVolume = util_1.average(buffer);\n\n        _this.emit('inputVolume', inputVolume / 255);\n      }\n\n      requestAnimationFrame(emitVolume);\n    };\n\n    requestAnimationFrame(emitVolume);\n  };\n  /**\n   * Stop polling volume if it's currently polling and there are no listeners.\n   * @private\n   */\n\n\n  AudioHelper.prototype._maybeStopPollingVolume = function () {\n    if (!this.isVolumeSupported) {\n      return;\n    }\n\n    if (!this._isPollingInputVolume || this._inputStream && this.listenerCount('inputVolume')) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n\n      delete this._inputVolumeSource;\n    }\n\n    this._isPollingInputVolume = false;\n  };\n  /**\n   * Unbind the listeners from mediaDevices.\n   * @private\n   */\n\n\n  AudioHelper.prototype._unbind = function () {\n    if (!this._mediaDevices) {\n      throw new errors_1.NotSupportedError('Enumeration is not supported');\n    }\n\n    if (this._mediaDevices.removeEventListener) {\n      this._mediaDevices.removeEventListener('devicechange', this._updateAvailableDevices);\n\n      this._mediaDevices.removeEventListener('deviceinfochange', this._updateAvailableDevices);\n    }\n  };\n  /**\n   * Set the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. Any deviceId specified here will be ignored. Instead, device IDs should\n   * be specified using {@link AudioHelper#setInputDevice}. The returned Promise resolves\n   * when the media is successfully reacquired, or immediately if no input device is set.\n   * @param audioConstraints - The MediaTrackConstraints to apply.\n   */\n\n\n  AudioHelper.prototype.setAudioConstraints = function (audioConstraints) {\n    this._audioConstraints = Object.assign({}, audioConstraints);\n    delete this._audioConstraints.deviceId;\n    return this.inputDevice ? this._setInputDevice(this.inputDevice.deviceId, true) : Promise.resolve();\n  };\n  /**\n   * Replace the current input device with a new device by ID.\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   */\n\n\n  AudioHelper.prototype.setInputDevice = function (deviceId) {\n    return !util_1.isFirefox() ? this._setInputDevice(deviceId, false) : Promise.reject(new errors_1.NotSupportedError('Firefox does not currently support opening multiple ' + 'audio input tracks simultaneously, even across different tabs. As a result, ' + 'Device.audio.setInputDevice is disabled on Firefox until support is added.\\n' + 'Related BugZilla thread: https://bugzilla.mozilla.org/show_bug.cgi?id=1299324'));\n  };\n  /**\n   * Unset the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. The returned Promise resolves when the media is successfully reacquired,\n   * or immediately if no input device is set.\n   */\n\n\n  AudioHelper.prototype.unsetAudioConstraints = function () {\n    this._audioConstraints = null;\n    return this.inputDevice ? this._setInputDevice(this.inputDevice.deviceId, true) : Promise.resolve();\n  };\n  /**\n   * Unset the input device, stopping the tracks. This should only be called when not in a connection, and\n   *   will not allow removal of the input device during a live call.\n   */\n\n\n  AudioHelper.prototype.unsetInputDevice = function () {\n    var _this = this;\n\n    if (!this.inputDevice) {\n      return Promise.resolve();\n    }\n\n    return this._onActiveInputChanged(null).then(function () {\n      _this._replaceStream(null);\n\n      _this._inputDevice = null;\n\n      _this._maybeStopPollingVolume();\n    });\n  };\n  /**\n   * Merge the passed enabledSounds into {@link AudioHelper}. Currently used to merge the deprecated\n   *   Device.sounds object onto the new {@link AudioHelper} interface. Mutates\n   *   by reference, sharing state between {@link Device} and {@link AudioHelper}.\n   * @param enabledSounds - The initial sound settings to merge.\n   * @private\n   */\n\n\n  AudioHelper.prototype._addEnabledSounds = function (enabledSounds) {\n    var _this = this;\n\n    function setValue(key, value) {\n      if (typeof value !== 'undefined') {\n        enabledSounds[key] = value;\n      }\n\n      return enabledSounds[key];\n    }\n\n    Object.keys(enabledSounds).forEach(function (key) {\n      _this[key] = setValue.bind(null, key);\n    });\n  };\n  /**\n   * Get the index of an un-labeled Device.\n   * @param mediaDeviceInfo\n   * @returns The index of the passed MediaDeviceInfo\n   */\n\n\n  AudioHelper.prototype._getUnknownDeviceIndex = function (mediaDeviceInfo) {\n    var id = mediaDeviceInfo.deviceId;\n    var kind = mediaDeviceInfo.kind;\n    var index = this._unknownDeviceIndexes[kind][id];\n\n    if (!index) {\n      index = Object.keys(this._unknownDeviceIndexes[kind]).length + 1;\n      this._unknownDeviceIndexes[kind][id] = index;\n    }\n\n    return index;\n  };\n  /**\n   * Initialize output device enumeration.\n   */\n\n\n  AudioHelper.prototype._initializeEnumeration = function () {\n    var _this = this;\n\n    if (!this._mediaDevices) {\n      throw new errors_1.NotSupportedError('Enumeration is not supported');\n    }\n\n    if (this._mediaDevices.addEventListener) {\n      this._mediaDevices.addEventListener('devicechange', this._updateAvailableDevices);\n\n      this._mediaDevices.addEventListener('deviceinfochange', this._updateAvailableDevices);\n    }\n\n    this._updateAvailableDevices().then(function () {\n      if (!_this.isOutputSelectionSupported) {\n        return;\n      }\n\n      Promise.all([_this.speakerDevices.set('default'), _this.ringtoneDevices.set('default')]).catch(function (reason) {\n        _this._log.warn(\"Warning: Unable to set audio output devices. \" + reason);\n      });\n    });\n  };\n  /**\n   * Stop the tracks on the current input stream before replacing it with the passed stream.\n   * @param stream - The new stream\n   */\n\n\n  AudioHelper.prototype._replaceStream = function (stream) {\n    if (this._inputStream) {\n      this._inputStream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    }\n\n    this._inputStream = stream;\n  };\n  /**\n   * Replace the current input device with a new device by ID.\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   * @param forceGetUserMedia - If true, getUserMedia will be called even if\n   *   the specified device is already active.\n   */\n\n\n  AudioHelper.prototype._setInputDevice = function (deviceId, forceGetUserMedia) {\n    var _this = this;\n\n    if (typeof deviceId !== 'string') {\n      return Promise.reject(new errors_1.InvalidArgumentError('Must specify the device to set'));\n    }\n\n    var device = this.availableInputDevices.get(deviceId);\n\n    if (!device) {\n      return Promise.reject(new errors_1.InvalidArgumentError(\"Device not found: \" + deviceId));\n    }\n\n    if (this._inputDevice && this._inputDevice.deviceId === deviceId && this._inputStream) {\n      if (!forceGetUserMedia) {\n        return Promise.resolve();\n      } // If the currently active track is still in readyState `live`, gUM may return the same track\n      // rather than returning a fresh track.\n\n\n      this._inputStream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    }\n\n    var constraints = {\n      audio: Object.assign({\n        deviceId: {\n          exact: deviceId\n        }\n      }, this.audioConstraints)\n    };\n    return this._getUserMedia(constraints).then(function (stream) {\n      return _this._onActiveInputChanged(stream).then(function () {\n        _this._replaceStream(stream);\n\n        _this._inputDevice = device;\n\n        _this._maybeStartPollingVolume();\n      });\n    });\n  };\n  /**\n   * Update a set of devices.\n   * @param updatedDevices - An updated list of available Devices\n   * @param availableDevices - The previous list of available Devices\n   * @param removeLostDevice - The method to call if a previously available Device is\n   *   no longer available.\n   */\n\n\n  AudioHelper.prototype._updateDevices = function (updatedDevices, availableDevices, removeLostDevice) {\n    var _this = this;\n\n    var updatedDeviceIds = updatedDevices.map(function (d) {\n      return d.deviceId;\n    });\n    var knownDeviceIds = Array.from(availableDevices.values()).map(function (d) {\n      return d.deviceId;\n    });\n    var lostActiveDevices = []; // Remove lost devices\n\n    var lostDeviceIds = util_1.difference(knownDeviceIds, updatedDeviceIds);\n    lostDeviceIds.forEach(function (lostDeviceId) {\n      var lostDevice = availableDevices.get(lostDeviceId);\n\n      if (lostDevice) {\n        availableDevices.delete(lostDeviceId);\n\n        if (removeLostDevice(lostDevice)) {\n          lostActiveDevices.push(lostDevice);\n        }\n      }\n    }); // Add any new devices, or devices with updated labels\n\n    var deviceChanged = false;\n    updatedDevices.forEach(function (newDevice) {\n      var existingDevice = availableDevices.get(newDevice.deviceId);\n\n      var newMediaDeviceInfo = _this._wrapMediaDeviceInfo(newDevice);\n\n      if (!existingDevice || existingDevice.label !== newMediaDeviceInfo.label) {\n        availableDevices.set(newDevice.deviceId, newMediaDeviceInfo);\n        deviceChanged = true;\n      }\n    });\n\n    if (deviceChanged || lostDeviceIds.length) {\n      // Force a new gUM in case the underlying tracks of the active stream have changed. One\n      //   reason this might happen is when `default` is selected and set to a USB device,\n      //   then that device is unplugged or plugged back in. We can't check for the 'ended'\n      //   event or readyState because it is asynchronous and may take upwards of 5 seconds,\n      //   in my testing. (rrowland)\n      if (this.inputDevice !== null && this.inputDevice.deviceId === 'default') {\n        this._log.warn(\"Calling getUserMedia after device change to ensure that the           tracks of the active device (default) have not gone stale.\");\n\n        this._setInputDevice(this.inputDevice.deviceId, true);\n      }\n\n      this.emit('deviceChange', lostActiveDevices);\n    }\n  };\n  /**\n   * Disconnect the old input volume source, and create and connect a new one with the current\n   * input stream.\n   */\n\n\n  AudioHelper.prototype._updateVolumeSource = function () {\n    if (!this._inputStream || !this._audioContext || !this._inputVolumeAnalyser) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n    }\n\n    this._inputVolumeSource = this._audioContext.createMediaStreamSource(this._inputStream);\n\n    this._inputVolumeSource.connect(this._inputVolumeAnalyser);\n  };\n  /**\n   * Convert a MediaDeviceInfo to a IMediaDeviceInfoShim.\n   * @param mediaDeviceInfo - The info to convert\n   * @returns The converted shim\n   */\n\n\n  AudioHelper.prototype._wrapMediaDeviceInfo = function (mediaDeviceInfo) {\n    var options = {\n      deviceId: mediaDeviceInfo.deviceId,\n      groupId: mediaDeviceInfo.groupId,\n      kind: mediaDeviceInfo.kind,\n      label: mediaDeviceInfo.label\n    };\n\n    if (!options.label) {\n      if (options.deviceId === 'default') {\n        options.label = 'Default';\n      } else {\n        var index = this._getUnknownDeviceIndex(mediaDeviceInfo);\n\n        options.label = \"Unknown \" + kindAliases[options.kind] + \" Device \" + index;\n      }\n    }\n\n    return new MediaDeviceInfoShim(options);\n  };\n\n  return AudioHelper;\n}(events_1.EventEmitter);\n\n(function (AudioHelper) {})(AudioHelper || (AudioHelper = {}));\n\nexports.default = AudioHelper;","map":{"version":3,"mappings":"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","names":["MediaDeviceInfoShim","require","kindAliases","audioinput","audiooutput","__extends","onActiveOutputsChanged","onActiveInputChanged","getUserMedia","options","_super","_this","Map","log_1","getInstance","lostDevice","inputDevice","deviceId","_replaceStream","_inputDevice","_maybeStopPollingVolume","defaultDevice","availableInputDevices","get","Array","from","values","setInputDevice","wasSpeakerLost","speakerDevices","delete","wasRingtoneLost","ringtoneDevices","_mediaDevices","Promise","reject","enumerateDevices","then","devices","_updateDevices","filter","d","kind","availableOutputDevices","_removeLostOutput","_removeLostInput","forEach","outputDevices","size","isOutputSelectionSupported","set","catch","reason","_log","warn","Object","assign","AudioContext","setSinkId","HTMLAudioElement","prototype","_getUserMedia","mediaDevices","defaultMediaDevices","_onActiveInputChanged","isAudioContextSupported","audioContext","isEnumerationSupported","isSetSinkSupported","isVolumeSupported","enabledSounds","_addEnabledSounds","_audioContext","_inputVolumeAnalyser","createAnalyser","fftSize","smoothingTimeConstant","outputdevicecollection_1","addListener","eventName","_maybeStartPollingVolume","once","_initializeEnumeration","AudioHelper","_audioConstraints","_inputStream","_updateVolumeSource","_isPollingInputVolume","bufferLength","frequencyBinCount","buffer","Uint8Array","emitVolume","getByteFrequencyData","inputVolume","util_1","emit","requestAnimationFrame","listenerCount","_inputVolumeSource","disconnect","errors_1","removeEventListener","_updateAvailableDevices","audioConstraints","_setInputDevice","resolve","setValue","key","value","keys","bind","mediaDeviceInfo","id","index","_unknownDeviceIndexes","length","addEventListener","all","stream","getTracks","track","stop","forceGetUserMedia","device","constraints","audio","exact","updatedDevices","availableDevices","removeLostDevice","updatedDeviceIds","map","knownDeviceIds","lostActiveDevices","lostDeviceIds","lostDeviceId","push","deviceChanged","existingDevice","newDevice","newMediaDeviceInfo","_wrapMediaDeviceInfo","label","createMediaStreamSource","connect","groupId","_getUnknownDeviceIndex","events_1","exports"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio-client/lib/twilio/audiohelper.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n */\nimport { EventEmitter } from 'events';\nimport Device from './device';\nimport { InvalidArgumentError, NotSupportedError } from './errors';\nimport Log from './log';\nimport OutputDeviceCollection from './outputdevicecollection';\nimport * as defaultMediaDevices from './shims/mediadevices';\nimport { average, difference, isFirefox } from './util';\n\nconst MediaDeviceInfoShim = require('./shims/mediadeviceinfo');\n\n/**\n * Aliases for audio kinds, used for labelling.\n * @private\n */\nconst kindAliases: Record<string, string> = {\n  audioinput: 'Audio Input',\n  audiooutput: 'Audio Output',\n};\n\n/**\n * Provides input and output audio-based functionality in one convenient class.\n * @publicapi\n */\nclass AudioHelper extends EventEmitter {\n  /**\n   * The currently set audio constraints set by setAudioConstraints(). Starts as null.\n   */\n  get audioConstraints(): MediaTrackConstraints | null { return this._audioConstraints; }\n\n  /**\n   * A Map of all audio input devices currently available to the browser by their device ID.\n   */\n  availableInputDevices: Map<string, MediaDeviceInfo> = new Map();\n\n  /**\n   * A Map of all audio output devices currently available to the browser by their device ID.\n   */\n  availableOutputDevices: Map<string, MediaDeviceInfo> = new Map();\n\n  /**\n   * The active input device. Having no inputDevice specified by `setInputDevice()`\n   * will disable input selection related functionality.\n   */\n  get inputDevice(): MediaDeviceInfo | null { return this._inputDevice; }\n\n  /**\n   * The current input stream.\n   */\n  get inputStream(): MediaStream | null { return this._inputStream; }\n\n  /**\n   * False if the browser does not support `HTMLAudioElement.setSinkId()` or\n   * `MediaDevices.enumerateDevices()` and Twilio cannot facilitate output selection functionality.\n   */\n  isOutputSelectionSupported: boolean;\n\n  /**\n   * False if the browser does not support AudioContext and Twilio can not analyse the volume\n   * in real-time.\n   */\n  isVolumeSupported: boolean;\n\n  /**\n   * The current set of output devices that incoming ringtone audio is routed through.\n   * These are the sounds that may play while the user is away from the machine or not wearing\n   * their headset. It is important that this audio is heard. If all specified\n   * devices lost, this Set will revert to contain only the \"default\" device.\n   */\n  ringtoneDevices: OutputDeviceCollection;\n\n  /**\n   * The current set of output devices that call audio (`[voice, outgoing, disconnect, dtmf]`)\n   * is routed through. These are the sounds that are initiated by the user, or played while\n   * the user is otherwise present at the endpoint. If all specified devices are lost,\n   * this Set will revert to contain only the \"default\" device.\n   */\n  speakerDevices: OutputDeviceCollection;\n\n  /**\n   * The currently set audio constraints set by setAudioConstraints().\n   */\n  private _audioConstraints: MediaTrackConstraints | null = null;\n\n  /**\n   * An AudioContext to use.\n   */\n  private _audioContext?: AudioContext;\n\n  /**\n   * The `getUserMedia()` function to use.\n   */\n  private _getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;\n\n  /**\n   * The current input device.\n   */\n  private _inputDevice: MediaDeviceInfo | null = null;\n\n  /**\n   * The current input stream.\n   */\n  private _inputStream: MediaStream | null = null;\n\n  /**\n   * An AnalyserNode to use for input volume.\n   */\n  private _inputVolumeAnalyser?: AnalyserNode;\n\n  /**\n   * An MediaStreamSource to use for input volume.\n   */\n  private _inputVolumeSource?: MediaStreamAudioSourceNode;\n\n  /**\n   * Whether the {@link AudioHelper} is currently polling the input stream's volume.\n   */\n  private _isPollingInputVolume: boolean = false;\n\n  /**\n   * An instance of Logger to use.\n   */\n  private _log: Log = Log.getInstance();\n\n  /**\n   * The MediaDevices instance to use.\n   */\n  private _mediaDevices: AudioHelper.MediaDevicesLike | null;\n\n  /**\n   * Called with the new input stream when the active input is changed.\n   */\n  private _onActiveInputChanged: (stream: MediaStream | null) => Promise<void>;\n\n  /**\n   * A record of unknown devices (Devices without labels)\n   */\n  private _unknownDeviceIndexes: Record<string, Record<string, number>> = {\n    audioinput: { },\n    audiooutput: { },\n  };\n\n  /**\n   * @constructor\n   * @private\n   * @param onActiveOutputsChanged - A callback to be called when the user changes the active output devices.\n   * @param onActiveInputChanged - A callback to be called when the user changes the active input device.\n   * @param getUserMedia - The getUserMedia method to use.\n   * @param [options]\n   */\n  constructor(onActiveOutputsChanged: (type: 'ringtone' | 'speaker', outputIds: string[]) => Promise<void>,\n              onActiveInputChanged: (stream: MediaStream | null) => Promise<void>,\n              getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>,\n              options?: AudioHelper.Options) {\n    super();\n\n    options = Object.assign({\n      AudioContext: typeof AudioContext !== 'undefined' && AudioContext,\n      setSinkId: typeof HTMLAudioElement !== 'undefined' && (HTMLAudioElement.prototype as any).setSinkId,\n    }, options);\n\n    this._getUserMedia = getUserMedia;\n    this._mediaDevices = options.mediaDevices || defaultMediaDevices;\n    this._onActiveInputChanged = onActiveInputChanged;\n\n    const isAudioContextSupported: boolean = !!(options.AudioContext || options.audioContext);\n    const isEnumerationSupported: boolean = !!(this._mediaDevices && this._mediaDevices.enumerateDevices);\n    const isSetSinkSupported: boolean = typeof options.setSinkId === 'function';\n    this.isOutputSelectionSupported = isEnumerationSupported && isSetSinkSupported;\n    this.isVolumeSupported = isAudioContextSupported;\n\n    if (options.enabledSounds) {\n      this._addEnabledSounds(options.enabledSounds);\n    }\n\n    if (this.isVolumeSupported) {\n      this._audioContext = options.audioContext || options.AudioContext && new options.AudioContext();\n      if (this._audioContext) {\n        this._inputVolumeAnalyser = this._audioContext.createAnalyser();\n        this._inputVolumeAnalyser.fftSize = 32;\n        this._inputVolumeAnalyser.smoothingTimeConstant = 0.3;\n      }\n    }\n\n    this.ringtoneDevices = new OutputDeviceCollection('ringtone',\n      this.availableOutputDevices, onActiveOutputsChanged, this.isOutputSelectionSupported);\n    this.speakerDevices = new OutputDeviceCollection('speaker',\n      this.availableOutputDevices, onActiveOutputsChanged, this.isOutputSelectionSupported);\n\n    this.addListener('newListener', (eventName: string) => {\n      if (eventName === 'inputVolume') {\n        this._maybeStartPollingVolume();\n      }\n    });\n\n    this.addListener('removeListener', (eventName: string) => {\n      if (eventName === 'inputVolume') {\n        this._maybeStopPollingVolume();\n      }\n    });\n\n    this.once('newListener', () => {\n      // NOTE (rrowland): Ideally we would only check isEnumerationSupported here, but\n      //   in at least one browser version (Tested in FF48) enumerateDevices actually\n      //   returns bad data for the listed devices. Instead, we check for\n      //   isOutputSelectionSupported to avoid these quirks that may negatively affect customers.\n      if (!this.isOutputSelectionSupported) {\n        this._log.warn('Warning: This browser does not support audio output selection.');\n      }\n\n      if (!this.isVolumeSupported) {\n        this._log.warn(`Warning: This browser does not support Twilio's volume indicator feature.`);\n      }\n    });\n\n    if (isEnumerationSupported) {\n      this._initializeEnumeration();\n    }\n  }\n\n  /**\n   * Start polling volume if it's supported and there's an input stream to poll.\n   * @private\n   */\n  _maybeStartPollingVolume(): void {\n    if (!this.isVolumeSupported || !this._inputStream) { return; }\n\n    this._updateVolumeSource();\n\n    if (this._isPollingInputVolume || !this._inputVolumeAnalyser) { return; }\n\n    const bufferLength: number = this._inputVolumeAnalyser.frequencyBinCount;\n    const buffer: Uint8Array = new Uint8Array(bufferLength);\n\n    this._isPollingInputVolume = true;\n\n    const emitVolume = (): void => {\n      if (!this._isPollingInputVolume) { return; }\n\n      if (this._inputVolumeAnalyser) {\n        this._inputVolumeAnalyser.getByteFrequencyData(buffer);\n        const inputVolume: number = average(buffer);\n\n        this.emit('inputVolume', inputVolume / 255);\n      }\n\n      requestAnimationFrame(emitVolume);\n    };\n\n    requestAnimationFrame(emitVolume);\n  }\n\n  /**\n   * Stop polling volume if it's currently polling and there are no listeners.\n   * @private\n   */\n  _maybeStopPollingVolume(): void {\n    if (!this.isVolumeSupported) { return; }\n\n    if (!this._isPollingInputVolume || (this._inputStream && this.listenerCount('inputVolume'))) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n      delete this._inputVolumeSource;\n    }\n\n    this._isPollingInputVolume = false;\n  }\n\n  /**\n   * Unbind the listeners from mediaDevices.\n   * @private\n   */\n  _unbind(): void {\n    if (!this._mediaDevices) {\n      throw new NotSupportedError('Enumeration is not supported');\n    }\n\n    if (this._mediaDevices.removeEventListener) {\n      this._mediaDevices.removeEventListener('devicechange', this._updateAvailableDevices);\n      this._mediaDevices.removeEventListener('deviceinfochange', this._updateAvailableDevices);\n    }\n  }\n\n  /**\n   * Set the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. Any deviceId specified here will be ignored. Instead, device IDs should\n   * be specified using {@link AudioHelper#setInputDevice}. The returned Promise resolves\n   * when the media is successfully reacquired, or immediately if no input device is set.\n   * @param audioConstraints - The MediaTrackConstraints to apply.\n   */\n  setAudioConstraints(audioConstraints: MediaTrackConstraints): Promise<void> {\n    this._audioConstraints = Object.assign({ }, audioConstraints);\n    delete this._audioConstraints.deviceId;\n\n    return this.inputDevice\n      ? this._setInputDevice(this.inputDevice.deviceId, true)\n      : Promise.resolve();\n  }\n\n  /**\n   * Replace the current input device with a new device by ID.\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   */\n  setInputDevice(deviceId: string): Promise<void> {\n    return !isFirefox()\n      ? this._setInputDevice(deviceId, false)\n      : Promise.reject(new NotSupportedError('Firefox does not currently support opening multiple ' +\n        'audio input tracks simultaneously, even across different tabs. As a result, ' +\n        'Device.audio.setInputDevice is disabled on Firefox until support is added.\\n' +\n        'Related BugZilla thread: https://bugzilla.mozilla.org/show_bug.cgi?id=1299324'));\n  }\n\n  /**\n   * Unset the MediaTrackConstraints to be applied on every getUserMedia call for new input\n   * device audio. The returned Promise resolves when the media is successfully reacquired,\n   * or immediately if no input device is set.\n   */\n  unsetAudioConstraints(): Promise<void> {\n    this._audioConstraints = null;\n    return this.inputDevice\n      ? this._setInputDevice(this.inputDevice.deviceId, true)\n      : Promise.resolve();\n  }\n\n  /**\n   * Unset the input device, stopping the tracks. This should only be called when not in a connection, and\n   *   will not allow removal of the input device during a live call.\n   */\n  unsetInputDevice(): Promise<void> {\n    if (!this.inputDevice) { return Promise.resolve(); }\n\n    return this._onActiveInputChanged(null).then(() => {\n      this._replaceStream(null);\n      this._inputDevice = null;\n      this._maybeStopPollingVolume();\n    });\n  }\n\n  /**\n   * Merge the passed enabledSounds into {@link AudioHelper}. Currently used to merge the deprecated\n   *   Device.sounds object onto the new {@link AudioHelper} interface. Mutates\n   *   by reference, sharing state between {@link Device} and {@link AudioHelper}.\n   * @param enabledSounds - The initial sound settings to merge.\n   * @private\n   */\n  private _addEnabledSounds(enabledSounds: { [name: string]: boolean }) {\n    function setValue(key: Device.ToggleableSound, value: boolean) {\n      if (typeof value !== 'undefined') {\n        enabledSounds[key] = value;\n      }\n\n      return enabledSounds[key];\n    }\n\n    Object.keys(enabledSounds).forEach(key => {\n      (this as any)[key] = setValue.bind(null, key);\n    });\n  }\n\n  /**\n   * Get the index of an un-labeled Device.\n   * @param mediaDeviceInfo\n   * @returns The index of the passed MediaDeviceInfo\n   */\n  private _getUnknownDeviceIndex(mediaDeviceInfo: MediaDeviceInfo): number {\n    const id: string = mediaDeviceInfo.deviceId;\n    const kind: string = mediaDeviceInfo.kind;\n\n    let index: number = this._unknownDeviceIndexes[kind][id];\n    if (!index) {\n      index = Object.keys(this._unknownDeviceIndexes[kind]).length + 1;\n      this._unknownDeviceIndexes[kind][id] = index;\n    }\n\n    return index;\n  }\n\n  /**\n   * Initialize output device enumeration.\n   */\n  private _initializeEnumeration(): void {\n    if (!this._mediaDevices) {\n      throw new NotSupportedError('Enumeration is not supported');\n    }\n\n    if (this._mediaDevices.addEventListener) {\n      this._mediaDevices.addEventListener('devicechange', this._updateAvailableDevices);\n      this._mediaDevices.addEventListener('deviceinfochange', this._updateAvailableDevices);\n    }\n\n    this._updateAvailableDevices().then(() => {\n      if (!this.isOutputSelectionSupported) { return; }\n\n      Promise.all([\n        this.speakerDevices.set('default'),\n        this.ringtoneDevices.set('default'),\n      ]).catch(reason => {\n        this._log.warn(`Warning: Unable to set audio output devices. ${reason}`);\n      });\n    });\n  }\n\n  /**\n   * Remove an input device from inputs\n   * @param lostDevice\n   * @returns Whether the device was active\n   */\n  private _removeLostInput = (lostDevice: MediaDeviceInfo): boolean => {\n    if (!this.inputDevice || this.inputDevice.deviceId !== lostDevice.deviceId) {\n      return false;\n    }\n\n    this._replaceStream(null);\n    this._inputDevice = null;\n    this._maybeStopPollingVolume();\n\n    const defaultDevice: MediaDeviceInfo = this.availableInputDevices.get('default')\n      || Array.from(this.availableInputDevices.values())[0];\n\n    if (defaultDevice) {\n      this.setInputDevice(defaultDevice.deviceId);\n    }\n\n    return true;\n  }\n\n  /**\n   * Remove an input device from outputs\n   * @param lostDevice\n   * @returns Whether the device was active\n   */\n  private _removeLostOutput = (lostDevice: MediaDeviceInfo): boolean => {\n    const wasSpeakerLost: boolean = this.speakerDevices.delete(lostDevice);\n    const wasRingtoneLost: boolean = this.ringtoneDevices.delete(lostDevice);\n    return wasSpeakerLost || wasRingtoneLost;\n  }\n\n  /**\n   * Stop the tracks on the current input stream before replacing it with the passed stream.\n   * @param stream - The new stream\n   */\n  private _replaceStream(stream: MediaStream | null): void {\n    if (this._inputStream) {\n      this._inputStream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n\n    this._inputStream = stream;\n  }\n\n  /**\n   * Replace the current input device with a new device by ID.\n   * @param deviceId - An ID of a device to replace the existing\n   *   input device with.\n   * @param forceGetUserMedia - If true, getUserMedia will be called even if\n   *   the specified device is already active.\n   */\n  private _setInputDevice(deviceId: string, forceGetUserMedia: boolean): Promise<void> {\n    if (typeof deviceId !== 'string') {\n      return Promise.reject(new InvalidArgumentError('Must specify the device to set'));\n    }\n\n    const device: MediaDeviceInfo | undefined = this.availableInputDevices.get(deviceId);\n    if (!device) {\n      return Promise.reject(new InvalidArgumentError(`Device not found: ${deviceId}`));\n    }\n\n    if (this._inputDevice && this._inputDevice.deviceId === deviceId && this._inputStream) {\n      if (!forceGetUserMedia) {\n        return Promise.resolve();\n      }\n\n      // If the currently active track is still in readyState `live`, gUM may return the same track\n      // rather than returning a fresh track.\n      this._inputStream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n\n    const constraints = { audio: Object.assign({ deviceId: { exact: deviceId } }, this.audioConstraints) };\n    return this._getUserMedia(constraints).then((stream: MediaStream) => {\n      return this._onActiveInputChanged(stream).then(() => {\n        this._replaceStream(stream);\n        this._inputDevice = device;\n        this._maybeStartPollingVolume();\n      });\n    });\n  }\n\n  /**\n   * Update the available input and output devices\n   */\n  private _updateAvailableDevices = (): Promise<void> => {\n    if (!this._mediaDevices) {\n      return Promise.reject('Enumeration not supported');\n    }\n\n    return this._mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\n      this._updateDevices(devices.filter((d: MediaDeviceInfo) => d.kind === 'audiooutput'),\n        this.availableOutputDevices,\n        this._removeLostOutput);\n\n      this._updateDevices(devices.filter((d: MediaDeviceInfo) => d.kind === 'audioinput'),\n        this.availableInputDevices,\n        this._removeLostInput);\n\n      const defaultDevice = this.availableOutputDevices.get('default')\n        || Array.from(this.availableOutputDevices.values())[0];\n\n      [this.speakerDevices, this.ringtoneDevices].forEach(outputDevices => {\n        if (!outputDevices.get().size && this.availableOutputDevices.size && this.isOutputSelectionSupported) {\n          outputDevices.set(defaultDevice.deviceId)\n            .catch((reason) => {\n              this._log.warn(`Unable to set audio output devices. ${reason}`);\n            });\n        }\n      });\n    });\n  }\n\n  /**\n   * Update a set of devices.\n   * @param updatedDevices - An updated list of available Devices\n   * @param availableDevices - The previous list of available Devices\n   * @param removeLostDevice - The method to call if a previously available Device is\n   *   no longer available.\n   */\n  private _updateDevices(updatedDevices: MediaDeviceInfo[],\n                         availableDevices: Map<string, MediaDeviceInfo>,\n                         removeLostDevice: (lostDevice: MediaDeviceInfo) => boolean): void {\n    const updatedDeviceIds: string[] = updatedDevices.map(d => d.deviceId);\n    const knownDeviceIds: string[] = Array.from(availableDevices.values()).map(d => d.deviceId);\n    const lostActiveDevices: MediaDeviceInfo[] = [];\n\n    // Remove lost devices\n    const lostDeviceIds: string[] = difference(knownDeviceIds, updatedDeviceIds);\n    lostDeviceIds.forEach((lostDeviceId: string) => {\n      const lostDevice: MediaDeviceInfo | undefined = availableDevices.get(lostDeviceId);\n      if (lostDevice) {\n        availableDevices.delete(lostDeviceId);\n        if (removeLostDevice(lostDevice)) { lostActiveDevices.push(lostDevice); }\n      }\n    });\n\n    // Add any new devices, or devices with updated labels\n    let deviceChanged: boolean = false;\n    updatedDevices.forEach(newDevice => {\n      const existingDevice: MediaDeviceInfo | undefined = availableDevices.get(newDevice.deviceId);\n      const newMediaDeviceInfo: MediaDeviceInfo = this._wrapMediaDeviceInfo(newDevice);\n\n      if (!existingDevice || existingDevice.label !== newMediaDeviceInfo.label) {\n        availableDevices.set(newDevice.deviceId, newMediaDeviceInfo);\n        deviceChanged = true;\n      }\n    });\n\n    if (deviceChanged || lostDeviceIds.length) {\n      // Force a new gUM in case the underlying tracks of the active stream have changed. One\n      //   reason this might happen is when `default` is selected and set to a USB device,\n      //   then that device is unplugged or plugged back in. We can't check for the 'ended'\n      //   event or readyState because it is asynchronous and may take upwards of 5 seconds,\n      //   in my testing. (rrowland)\n      if (this.inputDevice !== null && this.inputDevice.deviceId === 'default') {\n        this._log.warn(`Calling getUserMedia after device change to ensure that the \\\n          tracks of the active device (default) have not gone stale.`);\n        this._setInputDevice(this.inputDevice.deviceId, true);\n      }\n\n      this.emit('deviceChange', lostActiveDevices);\n    }\n  }\n\n  /**\n   * Disconnect the old input volume source, and create and connect a new one with the current\n   * input stream.\n   */\n  private _updateVolumeSource(): void {\n    if (!this._inputStream || !this._audioContext || !this._inputVolumeAnalyser) {\n      return;\n    }\n\n    if (this._inputVolumeSource) {\n      this._inputVolumeSource.disconnect();\n    }\n\n    this._inputVolumeSource = this._audioContext.createMediaStreamSource(this._inputStream);\n    this._inputVolumeSource.connect(this._inputVolumeAnalyser);\n  }\n\n  /**\n   * Convert a MediaDeviceInfo to a IMediaDeviceInfoShim.\n   * @param mediaDeviceInfo - The info to convert\n   * @returns The converted shim\n   */\n  private _wrapMediaDeviceInfo(mediaDeviceInfo: MediaDeviceInfo): MediaDeviceInfo {\n    const options: Record<string, string> = {\n      deviceId: mediaDeviceInfo.deviceId,\n      groupId: mediaDeviceInfo.groupId,\n      kind: mediaDeviceInfo.kind,\n      label: mediaDeviceInfo.label,\n    };\n\n    if (!options.label) {\n      if (options.deviceId === 'default') {\n        options.label = 'Default';\n      } else {\n        const index: number = this._getUnknownDeviceIndex(mediaDeviceInfo);\n        options.label = `Unknown ${kindAliases[options.kind]} Device ${index}`;\n      }\n    }\n\n    return new MediaDeviceInfoShim(options) as MediaDeviceInfo;\n  }\n}\n\nnamespace AudioHelper {\n  /**\n   * Emitted when the available set of Devices changes.\n   * @param lostActiveDevices - An array containing any Devices that were previously active\n   * that were lost as a result of this deviceChange event.\n   * @example `device.audio.on('deviceChange', lostActiveDevices => { })`\n   * @event\n   * @private\n   */\n  declare function deviceChangeEvent(lostActiveDevices: MediaDeviceInfo[]): void;\n\n  /**\n   * Emitted on `requestAnimationFrame` (up to 60fps, depending on browser) with\n   *   the current input and output volumes, as a percentage of maximum\n   *   volume, between -100dB and -30dB. Represented by a floating point\n   *   number.\n   * @param inputVolume - A floating point number between 0.0 and 1.0 inclusive.\n   * @example `device.audio.on('inputVolume', volume => { })`\n   * @event\n   */\n  declare function inputVolumeEvent(inputVolume: number): void;\n\n  /**\n   * An object like MediaDevices.\n   * @private\n   */\n  export interface MediaDevicesLike {\n    addEventListener?: (eventName: string, handler: (...args: any[]) => void) => void;\n    enumerateDevices: (...args: any[]) => any;\n    getUserMedia: (...args: any[]) => any;\n    removeEventListener?: (eventName: string, handler: (...args: any[]) => void) => void;\n  }\n\n  /**\n   * Options that can be passed to the AudioHelper constructor\n   * @private\n   */\n  export interface Options {\n    /**\n     * A custom replacement for the AudioContext constructor.\n     */\n    AudioContext?: typeof AudioContext;\n\n    /**\n     * An existing AudioContext instance to use.\n     */\n    audioContext?: AudioContext;\n\n    /**\n     * A Record of sounds. This is modified by reference, and is used to\n     * maintain backward-compatibility. This should be removed or refactored in 2.0.\n     * TODO: Remove / refactor in 2.0. (CLIENT-5302)\n     */\n    enabledSounds?: Record<Device.ToggleableSound, boolean>;\n\n    /**\n     * A custom MediaDevices instance to use.\n     */\n    mediaDevices?: AudioHelper.MediaDevicesLike;\n\n    /**\n     * A custom setSinkId function to use.\n     */\n    setSinkId?: (sinkId: string) => Promise<void>;\n  }\n}\n\nexport default AudioHelper;\n"]},"metadata":{},"sourceType":"script"}