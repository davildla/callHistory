{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/workSpace/bots-dashboard/src/pages/PhoneHandler.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { Inviter, SessionState, UserAgent, Registerer } from \"sip.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebRtcDomain = process.env.REACT_APP_WEBRTC_DOMAIN;\n\nfunction PhoneHandler(_ref) {\n  _s();\n\n  let {\n    children,\n    password,\n    ext\n  } = _ref;\n  const [incomingAlert, setIncomingAlert] = useState(false);\n  const [call, setCall] = useState(null);\n  const audioRef = useRef();\n  const remoteStream = new MediaStream();\n\n  const setupRemoteMedia = session => {\n    session.sessionDescriptionHandler.peerConnection.getReceivers().forEach(receiver => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track);\n      }\n    });\n    let player = audioRef.current;\n    player.srcObject = remoteStream;\n    player.play();\n  };\n\n  const cleanupMedia = () => {\n    let player = audioRef.current;\n    player.srcObject = null;\n    player.pause();\n  };\n\n  const onInvite = invitation => {\n    setIncomingAlert(true);\n    invitation.stateChange.addListener(state => {\n      console.log(`Session state changed to ${state}`);\n\n      switch (state) {\n        case SessionState.Initial:\n          break;\n\n        case SessionState.Establishing:\n          setIncomingAlert(false);\n          break;\n\n        case SessionState.Established:\n          setupRemoteMedia(invitation);\n          break;\n\n        case SessionState.Terminating: // fall through\n\n        case SessionState.Terminated:\n          cleanupMedia();\n          break;\n\n        default:\n          throw new Error(\"Unknown session state.\");\n      }\n    });\n    setCall(invitation); // invitation.accept();\n  };\n\n  const transportOptions = {\n    server: `wss://${WebRtcDomain}/ws` // will be in .env file\n\n  };\n  const uri = UserAgent.makeURI(`sip:${ext}-dataocean@${WebRtcDomain}`);\n  const userAgentOptions = {\n    authorizationPassword: password,\n    authorizationUsername: `${ext}-dataocean`,\n    transportOptions,\n    logBuiltinEnabled: false,\n    // if true show all sip logs\n    delegate: {\n      onInvite\n    },\n    uri\n  };\n  const userAgent = new UserAgent(userAgentOptions);\n  const registerer = new Registerer(userAgent);\n  userAgent.start().then(() => {\n    registerer.register();\n  });\n\n  const makeCall = phone => {\n    const target = UserAgent.makeURI(`sip:${phone}@${WebRtcDomain}`);\n    const inviter = new Inviter(userAgent, target);\n    inviter.stateChange.addListener(state => {\n      console.log(`Session state changed to ${state}`);\n\n      switch (state) {\n        case SessionState.Initial:\n          break;\n\n        case SessionState.Establishing:\n          break;\n\n        case SessionState.Established:\n          setupRemoteMedia(inviter);\n          break;\n\n        case SessionState.Terminating: // fall through\n\n        case SessionState.Terminated:\n          cleanupMedia();\n          break;\n\n        default:\n          throw new Error(\"Unknown session state.\");\n      }\n    });\n    inviter.invite();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'none'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        ref: audioRef,\n        children: \"Your browser does not support the audio element.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/React.cloneElement(children, {\n      makeCall\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PhoneHandler, \"PLlW7v8h0w3hD17rBH8qm5pUoJk=\");\n\n_c = PhoneHandler;\nexport default PhoneHandler;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhoneHandler\");","map":{"version":3,"names":["React","useRef","useState","Inviter","SessionState","UserAgent","Registerer","WebRtcDomain","process","env","REACT_APP_WEBRTC_DOMAIN","PhoneHandler","children","password","ext","incomingAlert","setIncomingAlert","call","setCall","audioRef","remoteStream","MediaStream","setupRemoteMedia","session","sessionDescriptionHandler","peerConnection","getReceivers","forEach","receiver","track","addTrack","player","current","srcObject","play","cleanupMedia","pause","onInvite","invitation","stateChange","addListener","state","console","log","Initial","Establishing","Established","Terminating","Terminated","Error","transportOptions","server","uri","makeURI","userAgentOptions","authorizationPassword","authorizationUsername","logBuiltinEnabled","delegate","userAgent","registerer","start","then","register","makeCall","phone","target","inviter","invite","display","cloneElement"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/pages/PhoneHandler.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { Inviter, SessionState, UserAgent, Registerer } from \"sip.js\";\n\nconst WebRtcDomain = process.env.REACT_APP_WEBRTC_DOMAIN;\n\nfunction PhoneHandler({children, password, ext}) {\n    const [incomingAlert, setIncomingAlert] = useState(false);\n    const [call, setCall] = useState(null);\n\n    const audioRef = useRef();\n\n    const remoteStream = new MediaStream();\n\n    const setupRemoteMedia = (session) => {\n        session.sessionDescriptionHandler.peerConnection.getReceivers().forEach((receiver) => {\n            if (receiver.track) {\n                remoteStream.addTrack(receiver.track);\n            }\n        });\n\n        let player = audioRef.current;\n        player.srcObject = remoteStream;\n        player.play();\n    }\n\n    const cleanupMedia = () => {\n        let player = audioRef.current;\n        player.srcObject = null;\n        player.pause();\n    }\n\n    const onInvite = (invitation) => {\n\n        setIncomingAlert(true);\n\n        invitation.stateChange.addListener((state) => {\n            console.log(`Session state changed to ${state}`);\n            switch (state) {\n                case SessionState.Initial:\n                    break;\n                case SessionState.Establishing:\n                    setIncomingAlert(false);\n                    break;\n                case SessionState.Established:\n                    setupRemoteMedia(invitation);\n                    break;\n                case SessionState.Terminating:\n                // fall through\n                case SessionState.Terminated:\n                    cleanupMedia();\n                    break;\n                default:\n                    throw new Error(\"Unknown session state.\");\n            }\n        });\n\n        setCall(invitation);\n        // invitation.accept();\n    }\n\n    const transportOptions = {\n        server: `wss://${WebRtcDomain}/ws` // will be in .env file\n    };\n\n    const uri = UserAgent.makeURI(`sip:${ext}-dataocean@${WebRtcDomain}`);\n\n    const userAgentOptions = {\n        authorizationPassword: password,\n        authorizationUsername: `${ext}-dataocean`,\n        transportOptions,\n        logBuiltinEnabled : false, // if true show all sip logs\n        delegate: {\n            onInvite\n        },\n        uri\n    };\n\n\n    const userAgent = new UserAgent(userAgentOptions);\n\n    const registerer = new Registerer(userAgent);\n\n    userAgent.start().then(() => {\n        registerer.register();\n    });\n\n    const makeCall = (phone) => {\n        const target = UserAgent.makeURI(`sip:${phone}@${WebRtcDomain}`);\n\n        const inviter = new Inviter(userAgent, target);\n\n        inviter.stateChange.addListener((state) => {\n            console.log(`Session state changed to ${state}`);\n            switch (state) {\n                case SessionState.Initial:\n                    break;\n                case SessionState.Establishing:\n                    break;\n                case SessionState.Established:\n                    setupRemoteMedia(inviter);\n                    break;\n                case SessionState.Terminating:\n                // fall through\n                case SessionState.Terminated:\n                    cleanupMedia();\n                    break;\n                default:\n                    throw new Error(\"Unknown session state.\");\n            }\n        });\n\n        inviter.invite();\n    }\n\n\n    return (\n        <div>\n\n            <div style={{ display: 'none' }}>\n                <audio controls ref={audioRef}>\n                    Your browser does not support the audio element.\n                </audio>\n            </div>\n            {\n                React.cloneElement(children, {makeCall})\n            }\n        </div>\n    );\n}\n\nexport default PhoneHandler;"],"mappings":"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"},"metadata":{},"sourceType":"module"}