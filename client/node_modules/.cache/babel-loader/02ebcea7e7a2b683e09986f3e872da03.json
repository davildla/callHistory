{"ast":null,"code":"import { SessionDescriptionHandler } from \"./session-description-handler.js\";\n/**\n * Start a conference.\n * @param conferenceSessions - The sessions to conference.\n *\n * @beta\n */\n\nexport function startLocalConference(conferenceSessions) {\n  if (conferenceSessions.length < 2) {\n    throw new Error(\"Start local conference requires at leaast 2 sessions.\");\n  } // Return all possible pairs of elements in an array.\n\n\n  const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).reduce((acc, curVal) => acc.concat(curVal), []); // For each pair of sessions making up the conference, join their media together.\n  // A session desciprion handler manages the media, streams and tracks for a session.\n\n\n  pairs(conferenceSessions.map(session => session.sessionDescriptionHandler)).forEach(_ref => {\n    let [sdh0, sdh1] = _ref;\n\n    if (!(sdh0 instanceof WebAudioSessionDescriptionHandler && sdh1 instanceof WebAudioSessionDescriptionHandler)) {\n      throw new Error(\"Session description handler not instance of SessionManagerSessionDescriptionHandler\");\n    }\n\n    sdh0.joinWith(sdh1);\n  });\n}\n/**\n * A WebAudioSessionDescriptionHandler uses the Web Audio API to enable local conferencing of audio streams.\n * @remarks\n * This handler only works for one track of audio per peer connection. While the session description handler\n * being extended supports both audio and video, attempting to utilize video with this handler is not defined.\n *\n * @beta\n */\n\nexport class WebAudioSessionDescriptionHandler extends SessionDescriptionHandler {\n  constructor(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration) {\n    super(logger, mediaStreamFactory, sessionDescriptionHandlerConfiguration);\n\n    if (!WebAudioSessionDescriptionHandler.audioContext) {\n      WebAudioSessionDescriptionHandler.audioContext = new AudioContext();\n    }\n  }\n  /**\n   * Helper function to enable/disable media tracks.\n   * @param enable - If true enable tracks.\n   */\n\n\n  enableSenderTracks(enable) {\n    // This session decription handler is not using the original outbound (local) media stream source\n    // and has instead inserted a Web Audio proxy media stream to allow conferencing and mixing of stream.\n    // So here, we only want to mute the original source and not the proxy as it may be mixing other\n    // sources into the outbound stream and we do not want to enable/disable those. We only want to\n    // enable/disable the original stream source so that it's media gets muted/unmuted going to the proxy.\n    const stream = this.localMediaStreamReal;\n\n    if (stream === undefined) {\n      throw new Error(\"Stream undefined.\");\n    }\n\n    stream.getAudioTracks().forEach(track => {\n      track.enabled = enable;\n    });\n  }\n  /**\n   * Returns a WebRTC MediaStream proxying the provided audio media stream.\n   * This allows additional Web Audio media stream source nodes to be connected\n   * to the destination node assoicated with the returned stream so we can mix\n   * aditional audio sorces into the local media stream (ie for 3-way conferencing).\n   * @param stream - The MediaStream to proxy.\n   */\n\n\n  initLocalMediaStream(stream) {\n    if (!WebAudioSessionDescriptionHandler.audioContext) {\n      throw new Error(\"SessionManagerSessionDescriptionHandler.audioContext undefined.\");\n    }\n\n    this.localMediaStreamReal = stream;\n    this.localMediaStreamSourceNode = WebAudioSessionDescriptionHandler.audioContext.createMediaStreamSource(stream);\n    this.localMediaStreamDestinationNode = WebAudioSessionDescriptionHandler.audioContext.createMediaStreamDestination();\n    this.localMediaStreamSourceNode.connect(this.localMediaStreamDestinationNode);\n    return this.localMediaStreamDestinationNode.stream;\n  }\n  /**\n   * Join (conference) media streams with another party.\n   * @param peer - The session description handler of the peer to join with.\n   */\n\n\n  joinWith(peer) {\n    if (!WebAudioSessionDescriptionHandler.audioContext) {\n      throw new Error(\"SessionManagerSessionDescriptionHandler.audioContext undefined.\");\n    } // Mix our inbound (remote) stream into the peer's outbound (local) streams.\n\n\n    const ourNewInboundStreamSource = WebAudioSessionDescriptionHandler.audioContext.createMediaStreamSource(this.remoteMediaStream);\n    const peerOutboundStreamDestination = peer.localMediaStreamDestinationNode;\n\n    if (peerOutboundStreamDestination === undefined) {\n      throw new Error(\"Peer outbound (local) stream local media stream destination is undefined.\");\n    }\n\n    ourNewInboundStreamSource.connect(peerOutboundStreamDestination); // Mix the peer's inbound (remote) streams into our outbound (local) stream.\n\n    const peerNewInboundStreamSource = WebAudioSessionDescriptionHandler.audioContext.createMediaStreamSource(peer.remoteMediaStream);\n    const ourOutboundStreamDestination = this.localMediaStreamDestinationNode;\n\n    if (ourOutboundStreamDestination === undefined) {\n      throw new Error(\"Our outbound (local) stream local media stream destination is undefined.\");\n    }\n\n    peerNewInboundStreamSource.connect(ourOutboundStreamDestination);\n  }\n  /**\n   * Sets the original local media stream.\n   * @param stream - Media stream containing tracks to be utilized.\n   * @remarks\n   * Only the first audio and video tracks of the provided MediaStream are utilized.\n   * Adds tracks if audio and/or video tracks are not already present, otherwise replaces tracks.\n   */\n\n\n  setRealLocalMediaStream(stream) {\n    if (!WebAudioSessionDescriptionHandler.audioContext) {\n      throw new Error(\"SessionManagerSessionDescriptionHandler.audioContext undefined.\");\n    }\n\n    if (!this.localMediaStreamReal) {\n      this.initLocalMediaStream(stream);\n      return;\n    }\n\n    if (!this.localMediaStreamDestinationNode || !this.localMediaStreamSourceNode || !this.localMediaStreamReal) {\n      throw new Error(\"Local media stream undefined.\");\n    }\n\n    this.localMediaStreamReal = stream;\n    this.localMediaStreamSourceNode.disconnect(this.localMediaStreamDestinationNode);\n    this.localMediaStreamSourceNode = WebAudioSessionDescriptionHandler.audioContext.createMediaStreamSource(stream);\n    this.localMediaStreamSourceNode.connect(this.localMediaStreamDestinationNode);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}