{"ast":null,"code":"import { Inviter, SessionState, UserAgent, Registerer } from \"sip.js\";\n\nclass SipClient {\n  constructor(audioRef) {\n    this.audioRef = audioRef;\n    this.remoteStream = new MediaStream();\n    this.userAgent = null;\n    this.inviter = null;\n  }\n\n  setupRemoteMedia(session) {\n    session.sessionDescriptionHandler.peerConnection.getReceivers().forEach(receiver => {\n      if (receiver.track) {\n        this.remoteStream.addTrack(receiver.track);\n      }\n    });\n    let player = this.audioRef.current;\n    player.srcObject = this.remoteStream;\n    player.play();\n  }\n\n  cleanupMedia() {\n    let player = this.audioRef.current;\n    player.srcObject = null;\n    player.pause();\n  }\n\n  onInvite(invitation) {\n    invitation.stateChange.addListener(state => {\n      console.log(`Session state changed to ${state}`);\n\n      switch (state) {\n        case SessionState.Initial:\n          break;\n\n        case SessionState.Establishing:\n          break;\n\n        case SessionState.Established:\n          this.setupRemoteMedia(invitation);\n          break;\n\n        case SessionState.Terminating: // fall through\n\n        case SessionState.Terminated:\n          this.cleanupMedia();\n          break;\n\n        default:\n          throw new Error(\"Unknown session state.\");\n      }\n    });\n    invitation.accept();\n  }\n\n  register() {\n    const transportOptions = {\n      server: \"wss://webrtc.1com.co.il/ws\"\n    };\n    const uri = UserAgent.makeURI(\"sip:200-dataocean@webrtc.1com.co.il\");\n    const userAgentOptions = {\n      authorizationPassword: 'RjH2TV2s9s8FHSpz',\n      authorizationUsername: '200-dataocean',\n      transportOptions,\n      delegate: {\n        onInvite: this.onInvite.bind(this)\n      },\n      uri\n    };\n    this.userAgent = new UserAgent(userAgentOptions);\n    const registerer = new Registerer(this.userAgent);\n    this.userAgent.start().then(() => {\n      registerer.register();\n    });\n  }\n\n  makeCall(phone) {\n    this.userAgent.start().then(() => {\n      const target = UserAgent.makeURI(`sip:${phone}@webrtc.1com.co.il`);\n      this.inviter = new Inviter(this.userAgent, target);\n      this.inviter.stateChange.addListener(state => {\n        console.log(`Session state changed to ${state}`);\n\n        switch (state) {\n          case SessionState.Initial:\n            break;\n\n          case SessionState.Establishing:\n            break;\n\n          case SessionState.Established:\n            this.setupRemoteMedia(this.inviter);\n            break;\n\n          case SessionState.Terminating: // fall through\n\n          case SessionState.Terminated:\n            this.cleanupMedia();\n            break;\n\n          default:\n            throw new Error(\"Unknown session state.\");\n        }\n      });\n      this.inviter.invite();\n    });\n  }\n\n}\n\nexport default SipClient;","map":{"version":3,"names":["Inviter","SessionState","UserAgent","Registerer","SipClient","constructor","audioRef","remoteStream","MediaStream","userAgent","inviter","setupRemoteMedia","session","sessionDescriptionHandler","peerConnection","getReceivers","forEach","receiver","track","addTrack","player","current","srcObject","play","cleanupMedia","pause","onInvite","invitation","stateChange","addListener","state","console","log","Initial","Establishing","Established","Terminating","Terminated","Error","accept","register","transportOptions","server","uri","makeURI","userAgentOptions","authorizationPassword","authorizationUsername","delegate","bind","registerer","start","then","makeCall","phone","target","invite"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/pages/SipClient.js"],"sourcesContent":["import { Inviter, SessionState, UserAgent, Registerer } from \"sip.js\";\n\nclass SipClient {\n    constructor( audioRef ) {\n        this.audioRef = audioRef;\n        this.remoteStream = new MediaStream();\n        this.userAgent = null;\n        this.inviter = null;\n    }\n\n    setupRemoteMedia(session) {\n        session.sessionDescriptionHandler.peerConnection.getReceivers().forEach((receiver) => {\n            if (receiver.track) {\n                this.remoteStream.addTrack(receiver.track);\n            }\n        });\n\n        let player = this.audioRef.current;\n        player.srcObject = this.remoteStream;\n        player.play();\n    }\n\n    cleanupMedia() {\n        let player = this.audioRef.current;\n        player.srcObject = null;\n        player.pause();\n    }\n\n    onInvite(invitation) {\n        invitation.stateChange.addListener((state) => {\n            console.log(`Session state changed to ${state}`);\n            switch (state) {\n                case SessionState.Initial:\n                    break;\n                case SessionState.Establishing:\n                    break;\n                case SessionState.Established:\n                    this.setupRemoteMedia(invitation);\n                    break;\n                case SessionState.Terminating:\n                // fall through\n                case SessionState.Terminated:\n                    this.cleanupMedia();\n                    break;\n                default:\n                    throw new Error(\"Unknown session state.\");\n            }\n        });\n        invitation.accept();\n    }\n\n    register() {\n        const transportOptions = {\n            server: \"wss://webrtc.1com.co.il/ws\"\n        };\n\n        const uri = UserAgent.makeURI(\"sip:200-dataocean@webrtc.1com.co.il\");\n\n        const userAgentOptions = {\n            authorizationPassword: 'RjH2TV2s9s8FHSpz',\n            authorizationUsername: '200-dataocean',\n            transportOptions,\n            delegate: {\n                onInvite: this.onInvite.bind(this)\n            },\n            uri\n        };\n\n        this.userAgent = new UserAgent(userAgentOptions);\n\n        const registerer = new Registerer(this.userAgent);\n\n        this.userAgent.start().then(() => {\n            registerer.register();\n        });\n    }\n\n    makeCall(phone) {\n        this.userAgent.start().then(() => {\n            const target = UserAgent.makeURI(`sip:${phone}@webrtc.1com.co.il`);\n\n            this.inviter = new Inviter(this.userAgent, target);\n\n            this.inviter.stateChange.addListener((state) => {\n                console.log(`Session state changed to ${state}`);\n                switch (state) {\n                    case SessionState.Initial:\n                        break;\n                    case SessionState.Establishing:\n                        break;\n                    case SessionState.Established:\n                        this.setupRemoteMedia(this.inviter);\n                        break;\n                    case SessionState.Terminating:\n                    // fall through\n                    case SessionState.Terminated:\n                        this.cleanupMedia();\n                        break;\n                    default:\n                        throw new Error(\"Unknown session state.\");\n                }\n            });\n\n            this.inviter.invite();\n        });\n    }\n}\n\nexport default SipClient;\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,YAAlB,EAAgCC,SAAhC,EAA2CC,UAA3C,QAA6D,QAA7D;;AAEA,MAAMC,SAAN,CAAgB;EACZC,WAAW,CAAEC,QAAF,EAAa;IACpB,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKC,YAAL,GAAoB,IAAIC,WAAJ,EAApB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,OAAL,GAAe,IAAf;EACH;;EAEDC,gBAAgB,CAACC,OAAD,EAAU;IACtBA,OAAO,CAACC,yBAAR,CAAkCC,cAAlC,CAAiDC,YAAjD,GAAgEC,OAAhE,CAAyEC,QAAD,IAAc;MAClF,IAAIA,QAAQ,CAACC,KAAb,EAAoB;QAChB,KAAKX,YAAL,CAAkBY,QAAlB,CAA2BF,QAAQ,CAACC,KAApC;MACH;IACJ,CAJD;IAMA,IAAIE,MAAM,GAAG,KAAKd,QAAL,CAAce,OAA3B;IACAD,MAAM,CAACE,SAAP,GAAmB,KAAKf,YAAxB;IACAa,MAAM,CAACG,IAAP;EACH;;EAEDC,YAAY,GAAG;IACX,IAAIJ,MAAM,GAAG,KAAKd,QAAL,CAAce,OAA3B;IACAD,MAAM,CAACE,SAAP,GAAmB,IAAnB;IACAF,MAAM,CAACK,KAAP;EACH;;EAEDC,QAAQ,CAACC,UAAD,EAAa;IACjBA,UAAU,CAACC,WAAX,CAAuBC,WAAvB,CAAoCC,KAAD,IAAW;MAC1CC,OAAO,CAACC,GAAR,CAAa,4BAA2BF,KAAM,EAA9C;;MACA,QAAQA,KAAR;QACI,KAAK7B,YAAY,CAACgC,OAAlB;UACI;;QACJ,KAAKhC,YAAY,CAACiC,YAAlB;UACI;;QACJ,KAAKjC,YAAY,CAACkC,WAAlB;UACI,KAAKxB,gBAAL,CAAsBgB,UAAtB;UACA;;QACJ,KAAK1B,YAAY,CAACmC,WAAlB,CARJ,CASI;;QACA,KAAKnC,YAAY,CAACoC,UAAlB;UACI,KAAKb,YAAL;UACA;;QACJ;UACI,MAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;MAdR;IAgBH,CAlBD;IAmBAX,UAAU,CAACY,MAAX;EACH;;EAEDC,QAAQ,GAAG;IACP,MAAMC,gBAAgB,GAAG;MACrBC,MAAM,EAAE;IADa,CAAzB;IAIA,MAAMC,GAAG,GAAGzC,SAAS,CAAC0C,OAAV,CAAkB,qCAAlB,CAAZ;IAEA,MAAMC,gBAAgB,GAAG;MACrBC,qBAAqB,EAAE,kBADF;MAErBC,qBAAqB,EAAE,eAFF;MAGrBN,gBAHqB;MAIrBO,QAAQ,EAAE;QACNtB,QAAQ,EAAE,KAAKA,QAAL,CAAcuB,IAAd,CAAmB,IAAnB;MADJ,CAJW;MAOrBN;IAPqB,CAAzB;IAUA,KAAKlC,SAAL,GAAiB,IAAIP,SAAJ,CAAc2C,gBAAd,CAAjB;IAEA,MAAMK,UAAU,GAAG,IAAI/C,UAAJ,CAAe,KAAKM,SAApB,CAAnB;IAEA,KAAKA,SAAL,CAAe0C,KAAf,GAAuBC,IAAvB,CAA4B,MAAM;MAC9BF,UAAU,CAACV,QAAX;IACH,CAFD;EAGH;;EAEDa,QAAQ,CAACC,KAAD,EAAQ;IACZ,KAAK7C,SAAL,CAAe0C,KAAf,GAAuBC,IAAvB,CAA4B,MAAM;MAC9B,MAAMG,MAAM,GAAGrD,SAAS,CAAC0C,OAAV,CAAmB,OAAMU,KAAM,oBAA/B,CAAf;MAEA,KAAK5C,OAAL,GAAe,IAAIV,OAAJ,CAAY,KAAKS,SAAjB,EAA4B8C,MAA5B,CAAf;MAEA,KAAK7C,OAAL,CAAakB,WAAb,CAAyBC,WAAzB,CAAsCC,KAAD,IAAW;QAC5CC,OAAO,CAACC,GAAR,CAAa,4BAA2BF,KAAM,EAA9C;;QACA,QAAQA,KAAR;UACI,KAAK7B,YAAY,CAACgC,OAAlB;YACI;;UACJ,KAAKhC,YAAY,CAACiC,YAAlB;YACI;;UACJ,KAAKjC,YAAY,CAACkC,WAAlB;YACI,KAAKxB,gBAAL,CAAsB,KAAKD,OAA3B;YACA;;UACJ,KAAKT,YAAY,CAACmC,WAAlB,CARJ,CASI;;UACA,KAAKnC,YAAY,CAACoC,UAAlB;YACI,KAAKb,YAAL;YACA;;UACJ;YACI,MAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;QAdR;MAgBH,CAlBD;MAoBA,KAAK5B,OAAL,CAAa8C,MAAb;IACH,CA1BD;EA2BH;;AAvGW;;AA0GhB,eAAepD,SAAf"},"metadata":{},"sourceType":"module"}