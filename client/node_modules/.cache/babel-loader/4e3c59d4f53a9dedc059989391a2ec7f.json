{"ast":null,"code":"import fetch from '../../lib/fetch';\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\n\nconst generateCallController = async data => {\n  let res = null;\n\n  try {\n    let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/careate-callController`, data);\n    res = resp.data;\n  } catch {}\n\n  return res;\n};\n\nconst startCallCannon = async (callController, gitPath) => {\n  let res = null;\n  let botsAmount = null;\n  console.log(callController);\n\n  if (callController.amount) {\n    try {\n      botsAmount = Math.ceil(callController.amount / 100);\n    } catch {}\n  } else if (callController.botsAmount) botsAmount = callController.botsAmount;\n\n  if (botsAmount) {\n    try {\n      let callControllerObj = await generateCallController(callController);\n      console.log(botsAmount, gitPath, callControllerObj[0]._id); // startCallCannon(botsAmount, gitPath, callControllerObj[0]._id)\n      // calculate num of agents and send it to server, server will create them. thats it!\n\n      let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/start-call-cannon`, {\n        botsAmount,\n        data: {\n          git: gitPath,\n          name: callController.name,\n          systemId: callController.systemId,\n          callControllerId: callControllerObj[0]._id,\n          sheets_is: callController.sheetsId,\n          systemName: callController.systemName\n        }\n      });\n      console.log(resp.data);\n    } catch {}\n  } else {\n    console.log('error : you ask for 0 bots');\n  }\n\n  return res;\n};\n\nconst funcs = {\n  startCallCannon\n};\nexport default funcs;","map":{"version":3,"names":["fetch","SERVER_URL","process","env","REACT_APP_SERVER_URL","generateCallController","data","res","resp","fetchPost","startCallCannon","callController","gitPath","botsAmount","console","log","amount","Math","ceil","callControllerObj","_id","git","name","systemId","callControllerId","sheets_is","sheetsId","systemName","funcs"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/utils/callCannon/callCannonUtils.js"],"sourcesContent":["import fetch from '../../lib/fetch';\n\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\n\nconst generateCallController = async (data) => {\n    let res = null;\n\n    try {\n        let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/careate-callController`, data);\n        res = resp.data;\n    } catch {}\n\n    return res;\n}\n\nconst startCallCannon = async (callController, gitPath) => {\n    let res = null;\n    let botsAmount = null;\nconsole.log(callController);\n    if( callController.amount ){\n        try {\n            botsAmount = Math.ceil( callController.amount / 100 );\n        } catch {}\n    } else if (callController.botsAmount) botsAmount = callController.botsAmount;\n\n    if (botsAmount) {\n        try {\n            let callControllerObj = await generateCallController(callController);\n            console.log(botsAmount, gitPath, callControllerObj[0]._id);\n            // startCallCannon(botsAmount, gitPath, callControllerObj[0]._id)\n            // calculate num of agents and send it to server, server will create them. thats it!\n            let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/start-call-cannon`, {\n                botsAmount,\n                data : { \n                    git : gitPath, \n                    name : callController.name,\n                    systemId : callController.systemId,\n                    callControllerId : callControllerObj[0]._id, \n                    sheets_is : callController.sheetsId,\n                    systemName : callController.systemName,\n                }\n            })\n            console.log(resp.data);\n        } catch {}\n    } else {\n        console.log('error : you ask for 0 bots');\n    }\n    return res\n}\n\n\n\nconst funcs = {\n    startCallCannon,\n}\n\nexport default funcs;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;;AAEA,MAAMC,sBAAsB,GAAG,MAAOC,IAAP,IAAgB;EAC3C,IAAIC,GAAG,GAAG,IAAV;;EAEA,IAAI;IACA,IAAIC,IAAI,GAAG,MAAMR,KAAK,CAACS,SAAN,CAAiB,GAAER,UAAW,yCAA9B,EAAwEK,IAAxE,CAAjB;IACAC,GAAG,GAAGC,IAAI,CAACF,IAAX;EACH,CAHD,CAGE,MAAM,CAAE;;EAEV,OAAOC,GAAP;AACH,CATD;;AAWA,MAAMG,eAAe,GAAG,OAAOC,cAAP,EAAuBC,OAAvB,KAAmC;EACvD,IAAIL,GAAG,GAAG,IAAV;EACA,IAAIM,UAAU,GAAG,IAAjB;EACJC,OAAO,CAACC,GAAR,CAAYJ,cAAZ;;EACI,IAAIA,cAAc,CAACK,MAAnB,EAA2B;IACvB,IAAI;MACAH,UAAU,GAAGI,IAAI,CAACC,IAAL,CAAWP,cAAc,CAACK,MAAf,GAAwB,GAAnC,CAAb;IACH,CAFD,CAEE,MAAM,CAAE;EACb,CAJD,MAIO,IAAIL,cAAc,CAACE,UAAnB,EAA+BA,UAAU,GAAGF,cAAc,CAACE,UAA5B;;EAEtC,IAAIA,UAAJ,EAAgB;IACZ,IAAI;MACA,IAAIM,iBAAiB,GAAG,MAAMd,sBAAsB,CAACM,cAAD,CAApD;MACAG,OAAO,CAACC,GAAR,CAAYF,UAAZ,EAAwBD,OAAxB,EAAiCO,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,GAAtD,EAFA,CAGA;MACA;;MACA,IAAIZ,IAAI,GAAG,MAAMR,KAAK,CAACS,SAAN,CAAiB,GAAER,UAAW,oCAA9B,EAAmE;QAChFY,UADgF;QAEhFP,IAAI,EAAG;UACHe,GAAG,EAAGT,OADH;UAEHU,IAAI,EAAGX,cAAc,CAACW,IAFnB;UAGHC,QAAQ,EAAGZ,cAAc,CAACY,QAHvB;UAIHC,gBAAgB,EAAGL,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,GAJrC;UAKHK,SAAS,EAAGd,cAAc,CAACe,QALxB;UAMHC,UAAU,EAAGhB,cAAc,CAACgB;QANzB;MAFyE,CAAnE,CAAjB;MAWAb,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACF,IAAjB;IACH,CAjBD,CAiBE,MAAM,CAAE;EACb,CAnBD,MAmBO;IACHQ,OAAO,CAACC,GAAR,CAAY,4BAAZ;EACH;;EACD,OAAOR,GAAP;AACH,CAjCD;;AAqCA,MAAMqB,KAAK,GAAG;EACVlB;AADU,CAAd;AAIA,eAAekB,KAAf"},"metadata":{},"sourceType":"module"}