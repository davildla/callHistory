{"ast":null,"code":"import fetch from '../../lib/fetch';\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\n\nconst generateCallController = async data => {\n  let res = null;\n\n  try {\n    let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/careate-callController`, data);\n    res = resp.data;\n  } catch {}\n\n  return res;\n};\n\nconst startCallCannon = async (callController, gitPath) => {\n  let res = null;\n  let botsAmount = null;\n\n  if (callController.amount) {\n    try {\n      botsAmount = Math.ceil(callController.amount / 100);\n    } catch {}\n  } else if (callController.botsAmount) botsAmount = callController.botsAmount;\n\n  if (botsAmount) {\n    try {\n      let callControllerObj = await generateCallController(callController); // startCallCannon(botsAmount, gitPath, callControllerObj[0]._id)\n      // calculate num of agents and send it to server, server will create them. thats it!\n\n      let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/start-call-cannon`, {\n        botsAmount,\n        data: {\n          // git : gitPath, \n          // systemId : callController.systemId,\n          // callControllerId : callControllerObj[0]._id, \n          sheets_is: callController.sheetsId,\n          systemName: callController.name\n        }\n      });\n      console.log(resp.data);\n    } catch {}\n  } else {\n    console.log('error : you ask for 0 bots');\n  }\n\n  return res;\n};\n\nconst funcs = {\n  startCallCannon\n};\nexport default funcs;","map":{"version":3,"names":["fetch","SERVER_URL","process","env","REACT_APP_SERVER_URL","generateCallController","data","res","resp","fetchPost","startCallCannon","callController","gitPath","botsAmount","amount","Math","ceil","callControllerObj","sheets_is","sheetsId","systemName","name","console","log","funcs"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/utils/callCannon/callCannonUtils.js"],"sourcesContent":["import fetch from '../../lib/fetch';\n\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\n\nconst generateCallController = async (data) => {\n    let res = null;\n\n    try {\n        let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/careate-callController`, data);\n        res = resp.data;\n    } catch {}\n\n    return res;\n}\n\nconst startCallCannon = async (callController, gitPath) => {\n    let res = null;\n    let botsAmount = null;\n\n    if( callController.amount ){\n        try {\n            botsAmount = Math.ceil( callController.amount / 100 );\n        } catch {}\n    } else if (callController.botsAmount) botsAmount = callController.botsAmount;\n\n    if (botsAmount) {\n        try {\n            let callControllerObj = await generateCallController(callController);\n            // startCallCannon(botsAmount, gitPath, callControllerObj[0]._id)\n            // calculate num of agents and send it to server, server will create them. thats it!\n            let resp = await fetch.fetchPost(`${SERVER_URL}/api/call-cannon/start-call-cannon`, {\n                botsAmount,\n                data : { \n                    // git : gitPath, \n                    // systemId : callController.systemId,\n                    // callControllerId : callControllerObj[0]._id, \n                    sheets_is : callController.sheetsId,\n                    systemName : callController.name,\n                }\n            })\n            console.log(resp.data);\n        } catch {}\n    } else {\n        console.log('error : you ask for 0 bots');\n    }\n    return res\n}\n\n\n\nconst funcs = {\n    startCallCannon,\n}\n\nexport default funcs;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;;AAEA,MAAMC,sBAAsB,GAAG,MAAOC,IAAP,IAAgB;EAC3C,IAAIC,GAAG,GAAG,IAAV;;EAEA,IAAI;IACA,IAAIC,IAAI,GAAG,MAAMR,KAAK,CAACS,SAAN,CAAiB,GAAER,UAAW,yCAA9B,EAAwEK,IAAxE,CAAjB;IACAC,GAAG,GAAGC,IAAI,CAACF,IAAX;EACH,CAHD,CAGE,MAAM,CAAE;;EAEV,OAAOC,GAAP;AACH,CATD;;AAWA,MAAMG,eAAe,GAAG,OAAOC,cAAP,EAAuBC,OAAvB,KAAmC;EACvD,IAAIL,GAAG,GAAG,IAAV;EACA,IAAIM,UAAU,GAAG,IAAjB;;EAEA,IAAIF,cAAc,CAACG,MAAnB,EAA2B;IACvB,IAAI;MACAD,UAAU,GAAGE,IAAI,CAACC,IAAL,CAAWL,cAAc,CAACG,MAAf,GAAwB,GAAnC,CAAb;IACH,CAFD,CAEE,MAAM,CAAE;EACb,CAJD,MAIO,IAAIH,cAAc,CAACE,UAAnB,EAA+BA,UAAU,GAAGF,cAAc,CAACE,UAA5B;;EAEtC,IAAIA,UAAJ,EAAgB;IACZ,IAAI;MACA,IAAII,iBAAiB,GAAG,MAAMZ,sBAAsB,CAACM,cAAD,CAApD,CADA,CAEA;MACA;;MACA,IAAIH,IAAI,GAAG,MAAMR,KAAK,CAACS,SAAN,CAAiB,GAAER,UAAW,oCAA9B,EAAmE;QAChFY,UADgF;QAEhFP,IAAI,EAAG;UACH;UACA;UACA;UACAY,SAAS,EAAGP,cAAc,CAACQ,QAJxB;UAKHC,UAAU,EAAGT,cAAc,CAACU;QALzB;MAFyE,CAAnE,CAAjB;MAUAC,OAAO,CAACC,GAAR,CAAYf,IAAI,CAACF,IAAjB;IACH,CAfD,CAeE,MAAM,CAAE;EACb,CAjBD,MAiBO;IACHgB,OAAO,CAACC,GAAR,CAAY,4BAAZ;EACH;;EACD,OAAOhB,GAAP;AACH,CA/BD;;AAmCA,MAAMiB,KAAK,GAAG;EACVd;AADU,CAAd;AAIA,eAAec,KAAf"},"metadata":{},"sourceType":"module"}