{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/workSpace/bots-dashboard/src/components/FormComp/CheckboxGroup.js\";\nimport React from 'react';\nimport { Field } from 'formik';\nimport { FormGroup, Checkbox, FormControlLabel, FormControl, FormLabel, FormHelperText } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CheckboxGroup(props) {\n  const {\n    label,\n    name,\n    options,\n    ...rest\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Field, {\n    name: name,\n    children: _ref => {\n      let {\n        field,\n        form\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(FormControl, {\n        error: form.errors[name] && form.touched[name] ? true : false,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          htmlFor: name,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, { ...field,\n          ...rest,\n          children: options.map((option, index) => {\n            return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              name: name,\n              id: option.value,\n              value: option.value,\n              control: /*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 50\n              }, this),\n              label: option.key,\n              checked: field.value.includes(option.value)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 44\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 25\n        }, this), form.errors[name] && form.touched[name] ? /*#__PURE__*/_jsxDEV(FormHelperText, {\n          error: true,\n          children: form.errors[name]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 33\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 28\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_c = CheckboxGroup;\nexport default CheckboxGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxGroup\");","map":{"version":3,"names":["React","Field","FormGroup","Checkbox","FormControlLabel","FormControl","FormLabel","FormHelperText","CheckboxGroup","props","label","name","options","rest","field","form","errors","touched","map","option","index","value","key","includes"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/components/FormComp/CheckboxGroup.js"],"sourcesContent":["import React from 'react';\nimport { Field } from 'formik';\nimport { FormGroup, Checkbox, FormControlLabel, FormControl, FormLabel, FormHelperText } from '@mui/material';\n\nfunction CheckboxGroup(props) {\n    const { label, name, options, ...rest } = props;\n\n    return (\n        <Field name={name}>\n            {\n                ({field, form}) => {\n                    return <FormControl error={(form.errors[name] && form.touched[name]) ? true : false}>\n                        <FormLabel htmlFor={name}>{label}</FormLabel>\n                        <FormGroup {...field} {...rest}>\n                            {\n                                options.map((option, index) => {\n\n                                    return <FormControlLabel \n                                        name={name}\n                                        key={index}\n                                        id={option.value}\n                                        value={option.value} \n                                        control={<Checkbox />} \n                                        label={option.key} \n                                        checked={ field.value.includes(option.value) }\n                                    />\n                                })\n                            }\n                        </FormGroup>\n                        {\n                            form.errors[name] && form.touched[name] ? (\n                                <FormHelperText error >{form.errors[name]}</FormHelperText>\n                            ) : null\n                        } \n                    </FormControl>\n                }\n            }\n        </Field>\n    );\n}\n\nexport default CheckboxGroup;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,gBAA9B,EAAgDC,WAAhD,EAA6DC,SAA7D,EAAwEC,cAAxE,QAA8F,eAA9F;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EAC1B,MAAM;IAAEC,KAAF;IAASC,IAAT;IAAeC,OAAf;IAAwB,GAAGC;EAA3B,IAAoCJ,KAA1C;EAEA,oBACI,QAAC,KAAD;IAAO,IAAI,EAAEE,IAAb;IAAA,UAEQ,QAAmB;MAAA,IAAlB;QAACG,KAAD;QAAQC;MAAR,CAAkB;MACf,oBAAO,QAAC,WAAD;QAAa,KAAK,EAAGA,IAAI,CAACC,MAAL,CAAYL,IAAZ,KAAqBI,IAAI,CAACE,OAAL,CAAaN,IAAb,CAAtB,GAA4C,IAA5C,GAAmD,KAAvE;QAAA,wBACH,QAAC,SAAD;UAAW,OAAO,EAAEA,IAApB;UAAA,UAA2BD;QAA3B;UAAA;UAAA;UAAA;QAAA,QADG,eAEH,QAAC,SAAD,OAAeI,KAAf;UAAA,GAA0BD,IAA1B;UAAA,UAEQD,OAAO,CAACM,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;YAE3B,oBAAO,QAAC,gBAAD;cACH,IAAI,EAAET,IADH;cAGH,EAAE,EAAEQ,MAAM,CAACE,KAHR;cAIH,KAAK,EAAEF,MAAM,CAACE,KAJX;cAKH,OAAO,eAAE,QAAC,QAAD;gBAAA;gBAAA;gBAAA;cAAA,QALN;cAMH,KAAK,EAAEF,MAAM,CAACG,GANX;cAOH,OAAO,EAAGR,KAAK,CAACO,KAAN,CAAYE,QAAZ,CAAqBJ,MAAM,CAACE,KAA5B;YAPP,GAEED,KAFF;cAAA;cAAA;cAAA;YAAA,QAAP;UASH,CAXD;QAFR;UAAA;UAAA;UAAA;QAAA,QAFG,EAmBCL,IAAI,CAACC,MAAL,CAAYL,IAAZ,KAAqBI,IAAI,CAACE,OAAL,CAAaN,IAAb,CAArB,gBACI,QAAC,cAAD;UAAgB,KAAK,MAArB;UAAA,UAAwBI,IAAI,CAACC,MAAL,CAAYL,IAAZ;QAAxB;UAAA;UAAA;UAAA;QAAA,QADJ,GAEI,IArBL;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IAwBH;EA3BT;IAAA;IAAA;IAAA;EAAA,QADJ;AAgCH;;KAnCQH,a;AAqCT,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}