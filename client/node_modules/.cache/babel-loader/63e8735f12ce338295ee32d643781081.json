{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/workSpace/bots-dashboard/src/pages/Phone.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Device } from '@twilio/voice-sdk';\nimport utils from '../utils/phoneUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Phone(props) {\n  _s();\n\n  const [token, setToken] = useState(null);\n  let device = null;\n  useEffect(() => {\n    let isMounted = true;\n\n    const getData = async () => {\n      return await utils.generateToken('test');\n    };\n\n    getData().then(resp => {\n      if (isMounted) {\n        setToken(resp.token);\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  if (token) {\n    device = new Device(token);\n    device.on(\"ready\", function (device) {\n      console.log(\"Twilio.Device Ready!\"); // updateCallStatus(\"Ready\");\n    });\n    device.on(\"error\", function (error) {\n      console.log(\"Twilio.Device Error: \" + error.message); // updateCallStatus(\"ERROR: \" + error.message);\n    });\n    device.on(\"connect\", function (conn) {\n      console.log(\"Successfully established call!\"); // hangUpButton.prop(\"disabled\", false);\n      // callCustomerButtons.prop(\"disabled\", true);\n      // callSupportButton.prop(\"disabled\", true);\n      // answerButton.prop(\"disabled\", true);\n      // If phoneNumber is part of the connection, this is a call from a\n      // support agent to a customer's phone\n\n      if (\"phoneNumber\" in conn.message) {\n        console.log(\"In call with \" + conn.message.phoneNumber);\n      } else {\n        // This is a call from a website user to a support agent\n        console.log(\"In call with support\");\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Phone\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Phone, \"SSLzquenZQzOMzU62DrezfOo2pU=\");\n\n_c = Phone;\nexport default Phone;\n\nvar _c;\n\n$RefreshReg$(_c, \"Phone\");","map":{"version":3,"names":["React","useState","useEffect","Device","utils","Phone","props","token","setToken","device","isMounted","getData","generateToken","then","resp","on","console","log","error","message","conn","phoneNumber"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/pages/Phone.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Device } from '@twilio/voice-sdk'\nimport utils from '../utils/phoneUtils';\n\nfunction Phone(props) {\n    const [token, setToken] = useState(null);\n    let device = null;\n\n    useEffect(()=>{\n        let isMounted = true;\n\n        const getData = async ()=>{\n            return await utils.generateToken('test');\n        };\n\n        getData().then(\n            resp =>{\n                if (isMounted) {\n                    setToken(resp.token)\n                }\n            }\n        );\n        return () => { isMounted = false };\n    },[]);\n    \n\n    if (token) {\n        device = new Device(token);\n\n        device.on(\"ready\", function(device) {\n            console.log(\"Twilio.Device Ready!\");\n            // updateCallStatus(\"Ready\");\n        });\n\n        device.on(\"error\", function(error) {\n        console.log(\"Twilio.Device Error: \" + error.message);\n        // updateCallStatus(\"ERROR: \" + error.message);\n        });\n\n        device.on(\"connect\", function(conn) {\n        console.log(\"Successfully established call!\");\n        // hangUpButton.prop(\"disabled\", false);\n        // callCustomerButtons.prop(\"disabled\", true);\n        // callSupportButton.prop(\"disabled\", true);\n        // answerButton.prop(\"disabled\", true);\n\n        // If phoneNumber is part of the connection, this is a call from a\n        // support agent to a customer's phone\n        if (\"phoneNumber\" in conn.message) {\n            console.log(\"In call with \" + conn.message.phoneNumber);\n        } else {\n            // This is a call from a website user to a support agent\n            console.log(\"In call with support\");\n        }\n        });\n    }\n\n    return (\n        <div>\n            Phone\n        </div>\n    );\n}\n\nexport default Phone;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;EAAA;;EAClB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;EACA,IAAIQ,MAAM,GAAG,IAAb;EAEAP,SAAS,CAAC,MAAI;IACV,IAAIQ,SAAS,GAAG,IAAhB;;IAEA,MAAMC,OAAO,GAAG,YAAU;MACtB,OAAO,MAAMP,KAAK,CAACQ,aAAN,CAAoB,MAApB,CAAb;IACH,CAFD;;IAIAD,OAAO,GAAGE,IAAV,CACIC,IAAI,IAAG;MACH,IAAIJ,SAAJ,EAAe;QACXF,QAAQ,CAACM,IAAI,CAACP,KAAN,CAAR;MACH;IACJ,CALL;IAOA,OAAO,MAAM;MAAEG,SAAS,GAAG,KAAZ;IAAmB,CAAlC;EACH,CAfQ,EAeP,EAfO,CAAT;;EAkBA,IAAIH,KAAJ,EAAW;IACPE,MAAM,GAAG,IAAIN,MAAJ,CAAWI,KAAX,CAAT;IAEAE,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,UAASN,MAAT,EAAiB;MAChCO,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADgC,CAEhC;IACH,CAHD;IAKAR,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,UAASG,KAAT,EAAgB;MACnCF,OAAO,CAACC,GAAR,CAAY,0BAA0BC,KAAK,CAACC,OAA5C,EADmC,CAEnC;IACC,CAHD;IAKAV,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,UAASK,IAAT,EAAe;MACpCJ,OAAO,CAACC,GAAR,CAAY,gCAAZ,EADoC,CAEpC;MACA;MACA;MACA;MAEA;MACA;;MACA,IAAI,iBAAiBG,IAAI,CAACD,OAA1B,EAAmC;QAC/BH,OAAO,CAACC,GAAR,CAAY,kBAAkBG,IAAI,CAACD,OAAL,CAAaE,WAA3C;MACH,CAFD,MAEO;QACH;QACAL,OAAO,CAACC,GAAR,CAAY,sBAAZ;MACH;IACA,CAfD;EAgBH;;EAED,oBACI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;;GA1DQZ,K;;KAAAA,K;AA4DT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}