{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* global webkitRTCPeerConnection, mozRTCPeerConnection, mozRTCSessionDescription, mozRTCIceCandidate */\n\n\nvar RTCPeerConnectionShim = require('rtcpeerconnection-shim');\n\nvar Log = require('../log').default;\n\nvar _require = require('./sdp'),\n    setCodecPreferences = _require.setCodecPreferences,\n    setMaxAverageBitrate = _require.setMaxAverageBitrate;\n\nvar util = require('../util');\n\nfunction RTCPC() {\n  if (typeof window === 'undefined') {\n    this.log.info('No RTCPeerConnection implementation available. The window object was not found.');\n    return;\n  }\n\n  if (util.isLegacyEdge()) {\n    this.RTCPeerConnection = new RTCPeerConnectionShim(typeof window !== 'undefined' ? window : global);\n  } else if (typeof window.RTCPeerConnection === 'function') {\n    this.RTCPeerConnection = window.RTCPeerConnection;\n  } else if (typeof window.webkitRTCPeerConnection === 'function') {\n    this.RTCPeerConnection = webkitRTCPeerConnection;\n  } else if (typeof window.mozRTCPeerConnection === 'function') {\n    this.RTCPeerConnection = mozRTCPeerConnection;\n    window.RTCSessionDescription = mozRTCSessionDescription;\n    window.RTCIceCandidate = mozRTCIceCandidate;\n  } else {\n    this.log.info('No RTCPeerConnection implementation available');\n  }\n}\n\nRTCPC.prototype.create = function (rtcConstraints, rtcConfiguration) {\n  this.log = Log.getInstance();\n  this.pc = new this.RTCPeerConnection(rtcConfiguration, rtcConstraints);\n};\n\nRTCPC.prototype.createModernConstraints = function (c) {\n  // createOffer differs between Chrome 23 and Chrome 24+.\n  // See https://groups.google.com/forum/?fromgroups=#!topic/discuss-webrtc/JBDZtrMumyU\n  // Unfortunately I haven't figured out a way to detect which format\n  // is required ahead of time, so we'll first try the old way, and\n  // if we get an exception, then we'll try the new way.\n  if (typeof c === 'undefined') {\n    return null;\n  } // NOTE(mroberts): As of Chrome 38, Chrome still appears to expect\n  // constraints under the 'mandatory' key, and with the first letter of each\n  // constraint capitalized. Firefox, on the other hand, has deprecated the\n  // 'mandatory' key and does not expect the first letter of each constraint\n  // capitalized.\n\n\n  var nc = Object.assign({}, c);\n\n  if (typeof webkitRTCPeerConnection !== 'undefined' && !util.isLegacyEdge()) {\n    nc.mandatory = {};\n\n    if (typeof c.audio !== 'undefined') {\n      nc.mandatory.OfferToReceiveAudio = c.audio;\n    }\n\n    if (typeof c.video !== 'undefined') {\n      nc.mandatory.OfferToReceiveVideo = c.video;\n    }\n  } else {\n    if (typeof c.audio !== 'undefined') {\n      nc.offerToReceiveAudio = c.audio;\n    }\n\n    if (typeof c.video !== 'undefined') {\n      nc.offerToReceiveVideo = c.video;\n    }\n  }\n\n  delete nc.audio;\n  delete nc.video;\n  return nc;\n};\n\nRTCPC.prototype.createOffer = function (maxAverageBitrate, codecPreferences, constraints, onSuccess, onError) {\n  var _this = this;\n\n  constraints = this.createModernConstraints(constraints);\n  return promisifyCreate(this.pc.createOffer, this.pc)(constraints).then(function (offer) {\n    if (!_this.pc) {\n      return Promise.resolve();\n    }\n\n    var sdp = setMaxAverageBitrate(offer.sdp, maxAverageBitrate);\n    return promisifySet(_this.pc.setLocalDescription, _this.pc)(new RTCSessionDescription({\n      type: 'offer',\n      sdp: setCodecPreferences(sdp, codecPreferences)\n    }));\n  }).then(onSuccess, onError);\n};\n\nRTCPC.prototype.createAnswer = function (maxAverageBitrate, codecPreferences, constraints, onSuccess, onError) {\n  var _this2 = this;\n\n  constraints = this.createModernConstraints(constraints);\n  return promisifyCreate(this.pc.createAnswer, this.pc)(constraints).then(function (answer) {\n    if (!_this2.pc) {\n      return Promise.resolve();\n    }\n\n    var sdp = setMaxAverageBitrate(answer.sdp, maxAverageBitrate);\n    return promisifySet(_this2.pc.setLocalDescription, _this2.pc)(new RTCSessionDescription({\n      type: 'answer',\n      sdp: setCodecPreferences(sdp, codecPreferences)\n    }));\n  }).then(onSuccess, onError);\n};\n\nRTCPC.prototype.processSDP = function (maxAverageBitrate, codecPreferences, sdp, constraints, onSuccess, onError) {\n  var _this3 = this;\n\n  sdp = setCodecPreferences(sdp, codecPreferences);\n  var desc = new RTCSessionDescription({\n    sdp: sdp,\n    type: 'offer'\n  });\n  return promisifySet(this.pc.setRemoteDescription, this.pc)(desc).then(function () {\n    _this3.createAnswer(maxAverageBitrate, codecPreferences, constraints, onSuccess, onError);\n  });\n};\n\nRTCPC.prototype.getSDP = function () {\n  return this.pc.localDescription.sdp;\n};\n\nRTCPC.prototype.processAnswer = function (codecPreferences, sdp, onSuccess, onError) {\n  if (!this.pc) {\n    return Promise.resolve();\n  }\n\n  sdp = setCodecPreferences(sdp, codecPreferences);\n  return promisifySet(this.pc.setRemoteDescription, this.pc)(new RTCSessionDescription({\n    sdp: sdp,\n    type: 'answer'\n  })).then(onSuccess, onError);\n};\n/* NOTE(mroberts): Firefox 18 through 21 include a `mozRTCPeerConnection`\n   object, but attempting to instantiate it will throw the error\n\n       Error: PeerConnection not enabled (did you set the pref?)\n\n   unless the `media.peerconnection.enabled` pref is enabled. So we need to test\n   if we can actually instantiate `mozRTCPeerConnection`; however, if the user\n   *has* enabled `media.peerconnection.enabled`, we need to perform the same\n   test that we use to detect Firefox 24 and above, namely:\n\n       typeof (new mozRTCPeerConnection()).getLocalStreams === 'function'\n\n\n    NOTE(rrowland): We no longer support Legacy Edge as of Sep 1, 2020.\n*/\n\n\nRTCPC.test = function () {\n  if ((typeof navigator === 'undefined' ? 'undefined' : _typeof(navigator)) === 'object') {\n    var getUserMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.getUserMedia;\n\n    if (util.isLegacyEdge(navigator)) {\n      return false;\n    }\n\n    if (getUserMedia && typeof window.RTCPeerConnection === 'function') {\n      return true;\n    } else if (getUserMedia && typeof window.webkitRTCPeerConnection === 'function') {\n      return true;\n    } else if (getUserMedia && typeof window.mozRTCPeerConnection === 'function') {\n      try {\n        // eslint-disable-next-line babel/new-cap\n        var test = new window.mozRTCPeerConnection();\n        if (typeof test.getLocalStreams !== 'function') return false;\n      } catch (e) {\n        return false;\n      }\n\n      return true;\n    } else if (typeof RTCIceGatherer !== 'undefined') {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction promisify(fn, ctx, areCallbacksFirst) {\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n    return new Promise(function (resolve) {\n      resolve(fn.apply(ctx, args));\n    }).catch(function () {\n      return new Promise(function (resolve, reject) {\n        fn.apply(ctx, areCallbacksFirst ? [resolve, reject].concat(args) : args.concat([resolve, reject]));\n      });\n    });\n  };\n}\n\nfunction promisifyCreate(fn, ctx) {\n  return promisify(fn, ctx, true);\n}\n\nfunction promisifySet(fn, ctx) {\n  return promisify(fn, ctx, false);\n}\n\nmodule.exports = RTCPC;","map":null,"metadata":{},"sourceType":"script"}