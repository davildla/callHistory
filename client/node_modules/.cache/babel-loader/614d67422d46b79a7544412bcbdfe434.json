{"ast":null,"code":"var EventTarget = require('./eventtarget');\n\nvar inherits = require('util').inherits;\n\nvar POLL_INTERVAL_MS = 500;\nvar nativeMediaDevices = typeof navigator !== 'undefined' && navigator.mediaDevices;\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\n\nfunction MediaDevicesShim() {\n  EventTarget.call(this);\n\n  this._defineEventHandler('devicechange');\n\n  this._defineEventHandler('deviceinfochange');\n\n  var knownDevices = [];\n  Object.defineProperties(this, {\n    _deviceChangeIsNative: {\n      value: reemitNativeEvent(this, 'devicechange')\n    },\n    _deviceInfoChangeIsNative: {\n      value: reemitNativeEvent(this, 'deviceinfochange')\n    },\n    _knownDevices: {\n      value: knownDevices\n    },\n    _pollInterval: {\n      value: null,\n      writable: true\n    }\n  });\n\n  if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n    nativeMediaDevices.enumerateDevices().then(function (devices) {\n      devices.sort(sortDevicesById).forEach([].push, knownDevices);\n    });\n  }\n\n  this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n    if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n      return;\n    }\n\n    this._pollInterval = this._pollInterval || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n  }.bind(this));\n\n  this._eventEmitter.on('removeListener', function maybeStopPolling() {\n    if (this._pollInterval && !hasChangeListeners(this)) {\n      clearInterval(this._pollInterval);\n      this._pollInterval = null;\n    }\n  }.bind(this));\n}\n\ninherits(MediaDevicesShim, EventTarget);\n\nif (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n  MediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n    return nativeMediaDevices.enumerateDevices.apply(nativeMediaDevices, arguments);\n  };\n}\n\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n  return nativeMediaDevices.getUserMedia.apply(nativeMediaDevices, arguments);\n};\n\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n  var oldLabels = oldDevices.reduce(function (map, device) {\n    return map.set(device.deviceId, device.label || null);\n  }, new Map());\n  return newDevices.some(function (newDevice) {\n    var oldLabel = oldLabels.get(newDevice.deviceId);\n    return typeof oldLabel !== 'undefined' && oldLabel !== newDevice.label;\n  });\n}\n\nfunction devicesHaveChanged(newDevices, oldDevices) {\n  return newDevices.length !== oldDevices.length || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\n\nfunction hasChangeListeners(mediaDevices) {\n  return ['devicechange', 'deviceinfochange'].reduce(function (count, event) {\n    return count + mediaDevices._eventEmitter.listenerCount(event);\n  }, 0) > 0;\n}\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\n\n\nfunction sampleDevices(mediaDevices) {\n  nativeMediaDevices.enumerateDevices().then(function (newDevices) {\n    var knownDevices = mediaDevices._knownDevices;\n    var oldDevices = knownDevices.slice(); // Replace known devices in-place\n\n    [].splice.apply(knownDevices, [0, knownDevices.length].concat(newDevices.sort(sortDevicesById)));\n\n    if (!mediaDevices._deviceChangeIsNative && devicesHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n\n    if (!mediaDevices._deviceInfoChangeIsNative && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n    }\n  });\n}\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\n\n\nfunction propertyHasChanged(propertyName, as, bs) {\n  return as.some(function (a, i) {\n    return a[propertyName] !== bs[i][propertyName];\n  });\n}\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\n\n\nfunction reemitNativeEvent(mediaDevices, eventName) {\n  var methodName = \"on\" + eventName;\n\n  function dispatchEvent(event) {\n    mediaDevices.dispatchEvent(event);\n  }\n\n  if (methodName in nativeMediaDevices) {\n    // Use addEventListener if it's available so we don't stomp on any other listeners\n    // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n    if ('addEventListener' in nativeMediaDevices) {\n      nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n    } else {\n      nativeMediaDevices[methodName] = dispatchEvent;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction sortDevicesById(a, b) {\n  return a.deviceId < b.deviceId;\n}\n\nmodule.exports = function shimMediaDevices() {\n  return nativeMediaDevices ? new MediaDevicesShim() : null;\n}();","map":{"version":3,"mappings":"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","names":["EventTarget","require","inherits","POLL_INTERVAL_MS","nativeMediaDevices","navigator","mediaDevices","MediaDevicesShim","call","_defineEventHandler","knownDevices","Object","defineProperties","_deviceChangeIsNative","value","reemitNativeEvent","_deviceInfoChangeIsNative","_knownDevices","_pollInterval","writable","enumerateDevices","then","devices","sort","sortDevicesById","forEach","push","_eventEmitter","on","maybeStartPolling","eventName","setInterval","sampleDevices","bind","maybeStopPolling","hasChangeListeners","clearInterval","prototype","apply","arguments","getUserMedia","deviceInfosHaveChanged","newDevices","oldDevices","oldLabels","reduce","map","device","set","deviceId","label","Map","some","oldLabel","get","newDevice","devicesHaveChanged","length","propertyHasChanged","count","event","listenerCount","slice","splice","concat","dispatchEvent","Event","propertyName","as","bs","a","i","methodName","addEventListener","b","module","exports","shimMediaDevices"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio-client/lib/twilio/shims/mediadevices.js"],"sourcesContent":["const EventTarget = require('./eventtarget');\nconst inherits = require('util').inherits;\n\nconst POLL_INTERVAL_MS = 500;\n\nconst nativeMediaDevices = typeof navigator !== 'undefined' && navigator.mediaDevices;\n\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\nfunction MediaDevicesShim() {\n  EventTarget.call(this);\n\n  this._defineEventHandler('devicechange');\n  this._defineEventHandler('deviceinfochange');\n\n  const knownDevices = [];\n  Object.defineProperties(this, {\n    _deviceChangeIsNative: {\n      value: reemitNativeEvent(this, 'devicechange')\n    },\n    _deviceInfoChangeIsNative: {\n      value: reemitNativeEvent(this, 'deviceinfochange')\n    },\n    _knownDevices: {\n      value: knownDevices\n    },\n    _pollInterval: {\n      value: null,\n      writable: true\n    }\n  });\n\n  if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n    nativeMediaDevices.enumerateDevices().then(devices => {\n      devices.sort(sortDevicesById).forEach([].push, knownDevices);\n    });\n  }\n\n  this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n    if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n      return;\n    }\n\n    this._pollInterval = this._pollInterval\n      || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n  }.bind(this));\n\n  this._eventEmitter.on('removeListener', function maybeStopPolling() {\n    if (this._pollInterval && !hasChangeListeners(this)) {\n      clearInterval(this._pollInterval);\n      this._pollInterval = null;\n    }\n  }.bind(this));\n}\n\ninherits(MediaDevicesShim, EventTarget);\n\nif (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n  MediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n    return nativeMediaDevices.enumerateDevices(...arguments);\n  };\n}\n\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n  return nativeMediaDevices.getUserMedia(...arguments);\n};\n\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n  const oldLabels = oldDevices.reduce((map, device) => map.set(device.deviceId, device.label || null), new Map());\n\n  return newDevices.some(newDevice => {\n    const oldLabel = oldLabels.get(newDevice.deviceId);\n    return typeof oldLabel !== 'undefined' && oldLabel !== newDevice.label;\n  });\n}\n\nfunction devicesHaveChanged(newDevices, oldDevices) {\n  return newDevices.length !== oldDevices.length\n    || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\n\nfunction hasChangeListeners(mediaDevices) {\n  return ['devicechange', 'deviceinfochange'].reduce((count, event) => count + mediaDevices._eventEmitter.listenerCount(event), 0) > 0;\n}\n\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\nfunction sampleDevices(mediaDevices) {\n  nativeMediaDevices.enumerateDevices().then(newDevices => {\n    const knownDevices = mediaDevices._knownDevices;\n    const oldDevices = knownDevices.slice();\n\n    // Replace known devices in-place\n    [].splice.apply(knownDevices, [0, knownDevices.length]\n      .concat(newDevices.sort(sortDevicesById)));\n\n    if (!mediaDevices._deviceChangeIsNative\n      && devicesHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n\n    if (!mediaDevices._deviceInfoChangeIsNative\n      && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n    }\n  });\n}\n\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\nfunction propertyHasChanged(propertyName, as, bs) {\n  return as.some((a, i) => a[propertyName] !== bs[i][propertyName]);\n}\n\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\nfunction reemitNativeEvent(mediaDevices, eventName) {\n  const methodName = `on${eventName}`;\n\n  function dispatchEvent(event) {\n    mediaDevices.dispatchEvent(event);\n  }\n\n  if (methodName in nativeMediaDevices) {\n    // Use addEventListener if it's available so we don't stomp on any other listeners\n    // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n    if ('addEventListener' in nativeMediaDevices) {\n      nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n    } else {\n      nativeMediaDevices[methodName] = dispatchEvent;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction sortDevicesById(a, b) {\n  return a.deviceId < b.deviceId;\n}\n\nmodule.exports = (function shimMediaDevices() {\n  return nativeMediaDevices ? new MediaDevicesShim() : null;\n})();\n"]},"metadata":{},"sourceType":"script"}