{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar request = require('./request');\n\nvar util = require('util');\n/**\n * Builds Endpoint Analytics (EA) event payloads and sends them to\n *   the EA server.\n * @constructor\n * @param {String} productName - Name of the product publishing events.\n * @param {String} token - The JWT token to use to authenticate with\n *   the EA server.\n * @param {EventPublisher.Options} options\n * @property {Boolean} isEnabled - Whether or not this publisher is publishing\n *   to the server. Currently ignores the request altogether, in the future this\n *   may store them in case publishing is re-enabled later. Defaults to true.\n */\n\n/**\n* @typedef {Object} EventPublisher.Options\n* @property {Object} [metadata=undefined] - A publisher_metadata object to send\n*   with each payload.\n* @property {String} [host='eventgw.twilio.com'] - The host address of the EA\n*   server to publish to.\n* @property {Object|Function} [defaultPayload] - A default payload to extend\n*   when creating and sending event payloads. Also takes a function that\n*   should return an object representing the default payload. This is\n*   useful for fields that should always be present when they are\n*   available, but are not always available.\n*/\n\n\nfunction EventPublisher(productName, token, options) {\n  if (!(this instanceof EventPublisher)) {\n    return new EventPublisher(productName, token, options);\n  } // Apply default options\n\n\n  options = Object.assign({\n    defaultPayload: function defaultPayload() {\n      return {};\n    },\n    host: 'eventgw.twilio.com'\n  }, options);\n  var defaultPayload = options.defaultPayload;\n\n  if (typeof defaultPayload !== 'function') {\n    defaultPayload = function defaultPayload() {\n      return Object.assign({}, options.defaultPayload);\n    };\n  }\n\n  var isEnabled = true; // eslint-disable-next-line camelcase,no-undefined\n\n  var metadata = Object.assign({\n    app_name: undefined,\n    app_version: undefined\n  }, options.metadata);\n  Object.defineProperties(this, {\n    _defaultPayload: {\n      value: defaultPayload\n    },\n    _isEnabled: {\n      get: function get() {\n        return isEnabled;\n      },\n      set: function set(_isEnabled) {\n        isEnabled = _isEnabled;\n      }\n    },\n    _host: {\n      value: options.host\n    },\n    _request: {\n      value: options.request || request,\n      writable: true\n    },\n    _token: {\n      value: token,\n      writable: true\n    },\n    isEnabled: {\n      enumerable: true,\n      get: function get() {\n        return isEnabled;\n      }\n    },\n    metadata: {\n      enumerable: true,\n      get: function get() {\n        return metadata;\n      }\n    },\n    productName: {\n      enumerable: true,\n      value: productName\n    },\n    token: {\n      enumerable: true,\n      get: function get() {\n        return this._token;\n      }\n    }\n  });\n}\n\nutil.inherits(EventPublisher, EventEmitter);\n/**\n * Post to an EA server.\n * @private\n * @param {String} endpointName - Endpoint to post the event to\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @param {?Boolean} [force=false] - Whether or not to send this even if\n *    publishing is disabled.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\n\nEventPublisher.prototype._post = function _post(endpointName, level, group, name, payload, connection, force) {\n  var _this = this;\n\n  if (!this.isEnabled && !force) {\n    return Promise.resolve();\n  }\n\n  if (!connection || (!connection.parameters || !connection.parameters.CallSid) && !connection.outboundConnectionId) {\n    return Promise.resolve();\n  }\n\n  var event = {\n    /* eslint-disable camelcase */\n    publisher: this.productName,\n    group: group,\n    name: name,\n    timestamp: new Date().toISOString(),\n    level: level.toUpperCase(),\n    payload_type: 'application/json',\n    private: false,\n    payload: payload && payload.forEach ? payload.slice(0) : Object.assign(this._defaultPayload(connection), payload)\n    /* eslint-enable camelcase */\n\n  };\n\n  if (this.metadata) {\n    // eslint-disable-next-line camelcase\n    event.publisher_metadata = this.metadata;\n  }\n\n  var requestParams = {\n    url: 'https://' + this._host + '/v4/' + endpointName,\n    body: event,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.token\n    }\n  };\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._request.post(requestParams, function (err) {\n      if (err) {\n        _this.emit('error', err);\n\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n/**\n * Post an event to the EA server. Use this method when the level\n *  is dynamic. Otherwise, it's better practice to use the sugar\n *  methods named for the specific level.\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\n\n\nEventPublisher.prototype.post = function post(level, group, name, payload, connection, force) {\n  return this._post('EndpointEvents', level, group, name, payload, connection, force);\n};\n/**\n * Post a debug-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\n\n\nEventPublisher.prototype.debug = function debug(group, name, payload, connection) {\n  return this.post('debug', group, name, payload, connection);\n};\n/**\n * Post an info-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\n\n\nEventPublisher.prototype.info = function info(group, name, payload, connection) {\n  return this.post('info', group, name, payload, connection);\n};\n/**\n * Post a warning-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\n\n\nEventPublisher.prototype.warn = function warn(group, name, payload, connection) {\n  return this.post('warning', group, name, payload, connection);\n};\n/**\n * Post an error-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\n\n\nEventPublisher.prototype.error = function error(group, name, payload, connection) {\n  return this.post('error', group, name, payload, connection);\n};\n/**\n * Post a metrics event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {Array<Object>} metrics - The metrics to post.\n * @param {?Object} [customFields] - Custom fields to append to each payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\n\n\nEventPublisher.prototype.postMetrics = function postMetrics(group, name, metrics, customFields, connection) {\n  var _this2 = this;\n\n  return new Promise(function (resolve) {\n    var samples = metrics.map(formatMetric).map(function (sample) {\n      return Object.assign(sample, customFields);\n    });\n    resolve(_this2._post('EndpointMetrics', 'info', group, name, samples, connection));\n  });\n};\n/**\n * Update the token to use to authenticate requests.\n * @param {string} token\n * @returns {void}\n */\n\n\nEventPublisher.prototype.setToken = function setToken(token) {\n  this._token = token;\n};\n/**\n * Enable the publishing of events.\n */\n\n\nEventPublisher.prototype.enable = function enable() {\n  this._isEnabled = true;\n};\n/**\n * Disable the publishing of events.\n */\n\n\nEventPublisher.prototype.disable = function disable() {\n  this._isEnabled = false;\n};\n\nfunction formatMetric(sample) {\n  return {\n    /* eslint-disable camelcase */\n    timestamp: new Date(sample.timestamp).toISOString(),\n    total_packets_received: sample.totals.packetsReceived,\n    total_packets_lost: sample.totals.packetsLost,\n    total_packets_sent: sample.totals.packetsSent,\n    total_bytes_received: sample.totals.bytesReceived,\n    total_bytes_sent: sample.totals.bytesSent,\n    packets_received: sample.packetsReceived,\n    packets_lost: sample.packetsLost,\n    packets_lost_fraction: sample.packetsLostFraction && Math.round(sample.packetsLostFraction * 100) / 100,\n    bytes_received: sample.bytesReceived,\n    bytes_sent: sample.bytesSent,\n    audio_codec: sample.codecName,\n    audio_level_in: sample.audioInputLevel,\n    audio_level_out: sample.audioOutputLevel,\n    call_volume_input: sample.inputVolume,\n    call_volume_output: sample.outputVolume,\n    jitter: sample.jitter,\n    rtt: sample.rtt,\n    mos: sample.mos && Math.round(sample.mos * 100) / 100\n    /* eslint-enable camelcase */\n\n  };\n}\n\nmodule.exports = EventPublisher;","map":{"version":3,"names":["EventEmitter","require","request","util","EventPublisher","productName","token","options","Object","assign","defaultPayload","host","isEnabled","metadata","app_name","undefined","app_version","defineProperties","_defaultPayload","value","_isEnabled","get","set","_host","_request","writable","_token","enumerable","inherits","prototype","_post","endpointName","level","group","name","payload","connection","force","_this","Promise","resolve","parameters","CallSid","outboundConnectionId","event","publisher","timestamp","Date","toISOString","toUpperCase","payload_type","private","forEach","slice","publisher_metadata","requestParams","url","body","headers","self","reject","post","err","emit","debug","info","warn","error","postMetrics","metrics","customFields","_this2","samples","map","formatMetric","sample","setToken","enable","disable","total_packets_received","totals","packetsReceived","total_packets_lost","packetsLost","total_packets_sent","packetsSent","total_bytes_received","bytesReceived","total_bytes_sent","bytesSent","packets_received","packets_lost","packets_lost_fraction","packetsLostFraction","Math","round","bytes_received","bytes_sent","audio_codec","codecName","audio_level_in","audioInputLevel","audio_level_out","audioOutputLevel","call_volume_input","inputVolume","call_volume_output","outputVolume","jitter","rtt","mos","module","exports"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio-client/es5/twilio/eventpublisher.js"],"sourcesContent":["'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar request = require('./request');\nvar util = require('util');\n\n/**\n * Builds Endpoint Analytics (EA) event payloads and sends them to\n *   the EA server.\n * @constructor\n * @param {String} productName - Name of the product publishing events.\n * @param {String} token - The JWT token to use to authenticate with\n *   the EA server.\n * @param {EventPublisher.Options} options\n * @property {Boolean} isEnabled - Whether or not this publisher is publishing\n *   to the server. Currently ignores the request altogether, in the future this\n *   may store them in case publishing is re-enabled later. Defaults to true.\n */ /**\n    * @typedef {Object} EventPublisher.Options\n    * @property {Object} [metadata=undefined] - A publisher_metadata object to send\n    *   with each payload.\n    * @property {String} [host='eventgw.twilio.com'] - The host address of the EA\n    *   server to publish to.\n    * @property {Object|Function} [defaultPayload] - A default payload to extend\n    *   when creating and sending event payloads. Also takes a function that\n    *   should return an object representing the default payload. This is\n    *   useful for fields that should always be present when they are\n    *   available, but are not always available.\n    */\nfunction EventPublisher(productName, token, options) {\n  if (!(this instanceof EventPublisher)) {\n    return new EventPublisher(productName, token, options);\n  }\n\n  // Apply default options\n  options = Object.assign({\n    defaultPayload: function defaultPayload() {\n      return {};\n    },\n\n    host: 'eventgw.twilio.com'\n  }, options);\n\n  var defaultPayload = options.defaultPayload;\n\n  if (typeof defaultPayload !== 'function') {\n    defaultPayload = function defaultPayload() {\n      return Object.assign({}, options.defaultPayload);\n    };\n  }\n\n  var isEnabled = true;\n  // eslint-disable-next-line camelcase,no-undefined\n  var metadata = Object.assign({ app_name: undefined, app_version: undefined }, options.metadata);\n\n  Object.defineProperties(this, {\n    _defaultPayload: { value: defaultPayload },\n    _isEnabled: {\n      get: function get() {\n        return isEnabled;\n      },\n      set: function set(_isEnabled) {\n        isEnabled = _isEnabled;\n      }\n    },\n    _host: { value: options.host },\n    _request: { value: options.request || request, writable: true },\n    _token: { value: token, writable: true },\n    isEnabled: {\n      enumerable: true,\n      get: function get() {\n        return isEnabled;\n      }\n    },\n    metadata: {\n      enumerable: true,\n      get: function get() {\n        return metadata;\n      }\n    },\n    productName: { enumerable: true, value: productName },\n    token: {\n      enumerable: true,\n      get: function get() {\n        return this._token;\n      }\n    }\n  });\n}\n\nutil.inherits(EventPublisher, EventEmitter);\n\n/**\n * Post to an EA server.\n * @private\n * @param {String} endpointName - Endpoint to post the event to\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @param {?Boolean} [force=false] - Whether or not to send this even if\n *    publishing is disabled.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype._post = function _post(endpointName, level, group, name, payload, connection, force) {\n  var _this = this;\n\n  if (!this.isEnabled && !force) {\n    return Promise.resolve();\n  }\n\n  if (!connection || (!connection.parameters || !connection.parameters.CallSid) && !connection.outboundConnectionId) {\n    return Promise.resolve();\n  }\n\n  var event = {\n    /* eslint-disable camelcase */\n    publisher: this.productName,\n    group: group,\n    name: name,\n    timestamp: new Date().toISOString(),\n    level: level.toUpperCase(),\n    payload_type: 'application/json',\n    private: false,\n    payload: payload && payload.forEach ? payload.slice(0) : Object.assign(this._defaultPayload(connection), payload)\n    /* eslint-enable camelcase */\n  };\n\n  if (this.metadata) {\n    // eslint-disable-next-line camelcase\n    event.publisher_metadata = this.metadata;\n  }\n\n  var requestParams = {\n    url: 'https://' + this._host + '/v4/' + endpointName,\n    body: event,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.token\n    }\n  };\n\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._request.post(requestParams, function (err) {\n      if (err) {\n        _this.emit('error', err);\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n * Post an event to the EA server. Use this method when the level\n *  is dynamic. Otherwise, it's better practice to use the sugar\n *  methods named for the specific level.\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.post = function post(level, group, name, payload, connection, force) {\n  return this._post('EndpointEvents', level, group, name, payload, connection, force);\n};\n\n/**\n * Post a debug-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.debug = function debug(group, name, payload, connection) {\n  return this.post('debug', group, name, payload, connection);\n};\n\n/**\n * Post an info-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.info = function info(group, name, payload, connection) {\n  return this.post('info', group, name, payload, connection);\n};\n\n/**\n * Post a warning-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.warn = function warn(group, name, payload, connection) {\n  return this.post('warning', group, name, payload, connection);\n};\n\n/**\n * Post an error-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.error = function error(group, name, payload, connection) {\n  return this.post('error', group, name, payload, connection);\n};\n\n/**\n * Post a metrics event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {Array<Object>} metrics - The metrics to post.\n * @param {?Object} [customFields] - Custom fields to append to each payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.postMetrics = function postMetrics(group, name, metrics, customFields, connection) {\n  var _this2 = this;\n\n  return new Promise(function (resolve) {\n    var samples = metrics.map(formatMetric).map(function (sample) {\n      return Object.assign(sample, customFields);\n    });\n\n    resolve(_this2._post('EndpointMetrics', 'info', group, name, samples, connection));\n  });\n};\n\n/**\n * Update the token to use to authenticate requests.\n * @param {string} token\n * @returns {void}\n */\nEventPublisher.prototype.setToken = function setToken(token) {\n  this._token = token;\n};\n\n/**\n * Enable the publishing of events.\n */\nEventPublisher.prototype.enable = function enable() {\n  this._isEnabled = true;\n};\n\n/**\n * Disable the publishing of events.\n */\nEventPublisher.prototype.disable = function disable() {\n  this._isEnabled = false;\n};\n\nfunction formatMetric(sample) {\n  return {\n    /* eslint-disable camelcase */\n    timestamp: new Date(sample.timestamp).toISOString(),\n    total_packets_received: sample.totals.packetsReceived,\n    total_packets_lost: sample.totals.packetsLost,\n    total_packets_sent: sample.totals.packetsSent,\n    total_bytes_received: sample.totals.bytesReceived,\n    total_bytes_sent: sample.totals.bytesSent,\n    packets_received: sample.packetsReceived,\n    packets_lost: sample.packetsLost,\n    packets_lost_fraction: sample.packetsLostFraction && Math.round(sample.packetsLostFraction * 100) / 100,\n    bytes_received: sample.bytesReceived,\n    bytes_sent: sample.bytesSent,\n    audio_codec: sample.codecName,\n    audio_level_in: sample.audioInputLevel,\n    audio_level_out: sample.audioOutputLevel,\n    call_volume_input: sample.inputVolume,\n    call_volume_output: sample.outputVolume,\n    jitter: sample.jitter,\n    rtt: sample.rtt,\n    mos: sample.mos && Math.round(sample.mos * 100) / 100\n    /* eslint-enable camelcase */\n  };\n}\n\nmodule.exports = EventPublisher;"],"mappings":"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"},"metadata":{},"sourceType":"script"}