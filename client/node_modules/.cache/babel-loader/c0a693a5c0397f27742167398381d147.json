{"ast":null,"code":"'use strict';\n\nvar rfactorConstants = {\n  r0: 94.768,\n  is: 1.42611\n};\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost\n     Calculated by packetsLost / totalPackets\n * @return {number} mos - Calculated MOS, 1.0 through roughly 4.5\n */\n\nfunction calcMos(rtt, jitter, fractionLost) {\n  if (!isPositiveNumber(rtt) || !isPositiveNumber(jitter) || !isPositiveNumber(fractionLost)) {\n    return null;\n  }\n\n  var rFactor = calculateRFactor(rtt, jitter, fractionLost);\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor); // Make sure MOS is in range\n\n  var isValid = mos >= 1.0 && mos < 4.6;\n  return isValid ? mos : null;\n}\n\nfunction calculateRFactor(rtt, jitter, fractionLost) {\n  var effectiveLatency = rtt + jitter * 2 + 10;\n  var rFactor = 0;\n\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 40;\n      break;\n\n    case effectiveLatency < 1000:\n      rFactor = rfactorConstants.r0 - (effectiveLatency - 120) / 10;\n      break;\n\n    case effectiveLatency >= 1000:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 100;\n      break;\n  }\n\n  var multiplier = .01;\n\n  switch (true) {\n    case fractionLost === -1:\n      multiplier = 0;\n      rFactor = 0;\n      break;\n\n    case fractionLost <= rFactor / 2.5:\n      multiplier = 2.5;\n      break;\n\n    case fractionLost > rFactor / 2.5 && fractionLost < 100:\n      multiplier = .25;\n      break;\n  }\n\n  rFactor -= fractionLost * multiplier;\n  return rFactor;\n}\n\nfunction isPositiveNumber(n) {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\n\nmodule.exports = {\n  calculate: calcMos\n};","map":null,"metadata":{},"sourceType":"script"}