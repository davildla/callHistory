{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nfunction EventTarget() {\n  Object.defineProperties(this, {\n    _eventEmitter: {\n      value: new EventEmitter()\n    },\n    _handlers: {\n      value: {}\n    }\n  });\n}\n\nEventTarget.prototype.dispatchEvent = function dispatchEvent(event) {\n  return this._eventEmitter.emit(event.type, event);\n};\n\nEventTarget.prototype.addEventListener = function addEventListener() {\n  var _a;\n\n  return (_a = this._eventEmitter).addListener.apply(_a, arguments);\n};\n\nEventTarget.prototype.removeEventListener = function removeEventListener() {\n  var _a;\n\n  return (_a = this._eventEmitter).removeListener.apply(_a, arguments);\n};\n\nEventTarget.prototype._defineEventHandler = function _defineEventHandler(eventName) {\n  var self = this;\n  Object.defineProperty(this, \"on\" + eventName, {\n    get: function () {\n      return self._handlers[eventName];\n    },\n    set: function (newHandler) {\n      var oldHandler = self._handlers[eventName];\n\n      if (oldHandler && (typeof newHandler === 'function' || typeof newHandler === 'undefined' || newHandler === null)) {\n        self._handlers[eventName] = null;\n        self.removeEventListener(eventName, oldHandler);\n      }\n\n      if (typeof newHandler === 'function') {\n        self._handlers[eventName] = newHandler;\n        self.addEventListener(eventName, newHandler);\n      }\n    }\n  });\n};\n\nmodule.exports = EventTarget; //# sourceMappingURL=eventtarget.js.map","map":null,"metadata":{},"sourceType":"script"}