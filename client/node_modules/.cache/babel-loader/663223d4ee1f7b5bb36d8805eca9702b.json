{"ast":null,"code":"import SimplePeer from 'simple-peer';\nimport SIP from 'sip.js';\nconst ua = new SIP.UA({\n  uri: 'sip:your_username@your_domain.com',\n  password: 'your_password',\n  wsServers: ['wss://your_domain.com:7443'],\n  stunServers: ['stun:stun.l.google.com:19302']\n});\nua.start();\n\nfunction makeCall(remoteId) {\n  const session = ua.invite(`sip:${remoteId}@your_domain.com`, {\n    sessionDescriptionHandlerOptions: {\n      constraints: {\n        audio: true,\n        video: false\n      }\n    }\n  }); // create a new SimplePeer instance for the call\n\n  const newPeer = new SimplePeer({\n    initiator: true,\n    trickle: false\n  }); // set up event handlers for the SimplePeer and SIP.Session instances\n\n  session.on('trackAdded', () => {\n    // add the remote audio stream to the page\n    session.getRemoteStreams().forEach(stream => {\n      const audioElement = document.createElement('audio');\n      audioElement.srcObject = stream;\n      audioElement.play();\n    });\n  });\n  newPeer.on('signal', signal => {\n    // send the signal to the remote peer using your signaling server or service\n    sendSignal(remoteId, signal);\n  });\n  newPeer.on('connect', () => {\n    console.log('call connected');\n  });\n  newPeer.on('close', () => {\n    console.log('call disconnected');\n  });\n  newPeer.on('error', err => {\n    console.log(`error: ${err}`);\n  }); // pass the generated SDP offer to the SimplePeer instance\n\n  newPeer.signal(session.request.sdp);\n  setPeer(newPeer);\n}\n\nfunction answerCall(signal, incomingInvite) {\n  // create a new SimplePeer instance for the call\n  const newPeer = new SimplePeer({\n    initiator: false,\n    trickle: false\n  }); // set up event handlers for the SimplePeer and SIP.Session instances\n\n  incomingInvite.on('trackAdded', () => {\n    // add the remote audio stream to the page\n    incomingInvite.getRemoteStreams().forEach(stream => {\n      const audioElement = document.createElement('audio');\n      audioElement.srcObject = stream;\n      audioElement.play();\n    });\n  });\n  newPeer.on('signal', signal => {\n    // send the signal to the remote peer using your signaling server or service\n    sendSignal(remoteId, signal);\n  });\n  newPeer.on('connect', () => {\n    console.log('call connected');\n  });\n  newPeer.on('close', () => {\n    console.log('call disconnected');\n  });\n  newPeer.on('error', err => {\n    console.log(`error: ${err}`);\n  }); // pass the received SDP offer to the SimplePeer instance\n\n  newPeer.signal(signal); // answer the incoming call using the SIP library\n\n  incomingInvite.accept({\n    sessionDescriptionHandlerOptions: {\n      constraints: {\n        audio: true,\n        video: false\n      }\n    }\n  });\n  setPeer(newPeer);\n}","map":{"version":3,"names":["SimplePeer","SIP","ua","UA","uri","password","wsServers","stunServers","start","makeCall","remoteId","session","invite","sessionDescriptionHandlerOptions","constraints","audio","video","newPeer","initiator","trickle","on","getRemoteStreams","forEach","stream","audioElement","document","createElement","srcObject","play","signal","sendSignal","console","log","err","request","sdp","setPeer","answerCall","incomingInvite","accept"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/pages/Phone/Softphone.js"],"sourcesContent":["import SimplePeer from 'simple-peer';\nimport SIP from 'sip.js';\n\nconst ua = new SIP.UA({\n    uri: 'sip:your_username@your_domain.com',\n    password: 'your_password',\n    wsServers: ['wss://your_domain.com:7443'],\n    stunServers: ['stun:stun.l.google.com:19302']\n});\n\nua.start();\n\nfunction makeCall(remoteId) {\n    const session = ua.invite(`sip:${remoteId}@your_domain.com`, {\n        sessionDescriptionHandlerOptions: {\n            constraints: {\n                audio: true,\n                video: false\n            }\n        }\n    });\n\n    // create a new SimplePeer instance for the call\n    const newPeer = new SimplePeer({\n        initiator: true,\n        trickle: false\n    });\n\n    // set up event handlers for the SimplePeer and SIP.Session instances\n    session.on('trackAdded', () => {\n        // add the remote audio stream to the page\n        session.getRemoteStreams().forEach(stream => {\n            const audioElement = document.createElement('audio');\n            audioElement.srcObject = stream;\n            audioElement.play();\n        });\n    });\n    newPeer.on('signal', signal => {\n        // send the signal to the remote peer using your signaling server or service\n        sendSignal(remoteId, signal);\n    });\n    newPeer.on('connect', () => {\n        console.log('call connected');\n    });\n    newPeer.on('close', () => {\n        console.log('call disconnected');\n    });\n    newPeer.on('error', err => {\n        console.log(`error: ${err}`);\n    });\n\n    // pass the generated SDP offer to the SimplePeer instance\n    newPeer.signal(session.request.sdp);\n\n    setPeer(newPeer);\n}\n\n\nfunction answerCall(signal, incomingInvite) {\n    // create a new SimplePeer instance for the call\n    const newPeer = new SimplePeer({\n        initiator: false,\n        trickle: false\n    });\n\n    // set up event handlers for the SimplePeer and SIP.Session instances\n    incomingInvite.on('trackAdded', () => {\n        // add the remote audio stream to the page\n        incomingInvite.getRemoteStreams().forEach(stream => {\n            const audioElement = document.createElement('audio');\n            audioElement.srcObject = stream;\n            audioElement.play();\n        });\n    });\n    newPeer.on('signal', signal => {\n        // send the signal to the remote peer using your signaling server or service\n        sendSignal(remoteId, signal);\n    });\n    newPeer.on('connect', () => {\n        console.log('call connected');\n    });\n    newPeer.on('close', () => {\n        console.log('call disconnected');\n    });\n    newPeer.on('error', err => {\n        console.log(`error: ${err}`);\n    });\n\n    // pass the received SDP offer to the SimplePeer instance\n    newPeer.signal(signal);\n\n    // answer the incoming call using the SIP library\n    incomingInvite.accept({\n        sessionDescriptionHandlerOptions: {\n            constraints: {\n                audio: true,\n                video: false\n            }\n        }\n    });\n\n    setPeer(newPeer);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}