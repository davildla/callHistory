{"ast":null,"code":"var EventTarget = require('./eventtarget');\n\nvar inherits = require('util').inherits;\n\nvar POLL_INTERVAL_MS = 500;\nvar nativeMediaDevices = typeof navigator !== 'undefined' && navigator.mediaDevices;\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\n\nfunction MediaDevicesShim() {\n  EventTarget.call(this);\n\n  this._defineEventHandler('devicechange');\n\n  this._defineEventHandler('deviceinfochange');\n\n  var knownDevices = [];\n  Object.defineProperties(this, {\n    _deviceChangeIsNative: {\n      value: reemitNativeEvent(this, 'devicechange')\n    },\n    _deviceInfoChangeIsNative: {\n      value: reemitNativeEvent(this, 'deviceinfochange')\n    },\n    _knownDevices: {\n      value: knownDevices\n    },\n    _pollInterval: {\n      value: null,\n      writable: true\n    }\n  });\n\n  if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n    nativeMediaDevices.enumerateDevices().then(function (devices) {\n      devices.sort(sortDevicesById).forEach([].push, knownDevices);\n    });\n  }\n\n  this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n    if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n      return;\n    }\n\n    this._pollInterval = this._pollInterval || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n  }.bind(this));\n\n  this._eventEmitter.on('removeListener', function maybeStopPolling() {\n    if (this._pollInterval && !hasChangeListeners(this)) {\n      clearInterval(this._pollInterval);\n      this._pollInterval = null;\n    }\n  }.bind(this));\n}\n\ninherits(MediaDevicesShim, EventTarget);\n\nif (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n  MediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n    return nativeMediaDevices.enumerateDevices.apply(nativeMediaDevices, arguments);\n  };\n}\n\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n  return nativeMediaDevices.getUserMedia.apply(nativeMediaDevices, arguments);\n};\n\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n  var oldLabels = oldDevices.reduce(function (map, device) {\n    return map.set(device.deviceId, device.label || null);\n  }, new Map());\n  return newDevices.some(function (newDevice) {\n    var oldLabel = oldLabels.get(newDevice.deviceId);\n    return typeof oldLabel !== 'undefined' && oldLabel !== newDevice.label;\n  });\n}\n\nfunction devicesHaveChanged(newDevices, oldDevices) {\n  return newDevices.length !== oldDevices.length || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\n\nfunction hasChangeListeners(mediaDevices) {\n  return ['devicechange', 'deviceinfochange'].reduce(function (count, event) {\n    return count + mediaDevices._eventEmitter.listenerCount(event);\n  }, 0) > 0;\n}\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\n\n\nfunction sampleDevices(mediaDevices) {\n  nativeMediaDevices.enumerateDevices().then(function (newDevices) {\n    var knownDevices = mediaDevices._knownDevices;\n    var oldDevices = knownDevices.slice(); // Replace known devices in-place\n\n    [].splice.apply(knownDevices, [0, knownDevices.length].concat(newDevices.sort(sortDevicesById)));\n\n    if (!mediaDevices._deviceChangeIsNative && devicesHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n\n    if (!mediaDevices._deviceInfoChangeIsNative && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n      mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n    }\n  });\n}\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\n\n\nfunction propertyHasChanged(propertyName, as, bs) {\n  return as.some(function (a, i) {\n    return a[propertyName] !== bs[i][propertyName];\n  });\n}\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\n\n\nfunction reemitNativeEvent(mediaDevices, eventName) {\n  var methodName = \"on\" + eventName;\n\n  function dispatchEvent(event) {\n    mediaDevices.dispatchEvent(event);\n  }\n\n  if (methodName in nativeMediaDevices) {\n    // Use addEventListener if it's available so we don't stomp on any other listeners\n    // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n    if ('addEventListener' in nativeMediaDevices) {\n      nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n    } else {\n      nativeMediaDevices[methodName] = dispatchEvent;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction sortDevicesById(a, b) {\n  return a.deviceId < b.deviceId;\n}\n\nmodule.exports = function shimMediaDevices() {\n  return nativeMediaDevices ? new MediaDevicesShim() : null;\n}(); //# sourceMappingURL=mediadevices.js.map","map":null,"metadata":{},"sourceType":"script"}