{"ast":null,"code":"import { createElement, Fragment, Component } from 'react';\nimport { connect, Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { SessionState, UserAgent, Inviter, Registerer, RegistererState } from 'sip.js';\nimport Select from 'react-select';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar styles = {\n  \"container\": \"_1H7C6\"\n};\nvar AUDIO_INPUT_DEVICES_DETECTED = 'AUDIO_INPUT_DEVICES_DETECTED';\nvar AUDIO_OUTPUT_DEVICES_DETECTED = 'AUDIO_OUTPUT_DEVICES_DETECTED';\nvar REMOTE_AUDIO_CONNECTED = 'REMOTE_AUDIO_CONNECTED';\nvar REMOTE_AUDIO_FAIL = 'REMOTE_AUDIO_FAIL';\nvar LOCAL_AUDIO_CONNECTED = 'LOCAL_AUDIO_CONNECTED';\nvar SET_PRIMARY_OUTPUT = 'SET_PRIMARY_OUTPUT';\nvar SET_PRIMARY_INPUT = 'SET_PRIMARY_INPUT';\nvar SET_LOCAL_AUDIO_SESSIONS_PENDING = 'SET_LOCAL_AUDIO_SESSIONS_PENDING';\nvar SET_LOCAL_AUDIO_SESSION_SUCCESS = 'SET_LOCAL_AUDIO_SESSION_SUCCESS';\nvar SET_LOCAL_AUDIO_SESSION_FAIL = 'SET_LOCAL_AUDIO_SESSION_FAIL';\nvar SET_REMOTE_AUDIO_SESSIONS_PENDING = 'SET_REMOTE_AUDIO_SESSIONS_PENDING';\nvar SET_REMOTE_AUDIO_SESSION_SUCCESS = 'SET_REMOTE_AUDIO_SESSION_SUCCESS';\nvar SET_REMOTE_AUDIO_SESSION_FAIL = 'SET_REMOTE_AUDIO_SESSION_FAIL';\nvar AUDIO_SINKID_NOT_ALLOWED = 'AUDIO_SINKID_NOT_ALLOWED';\n\nvar getInputAudioDevices = function getInputAudioDevices() {\n  var inputArray = [];\n  navigator.mediaDevices.enumerateDevices().then(function (devices) {\n    devices.forEach(function (device) {\n      if (device.kind === 'audioinput') {\n        inputArray.push(device);\n      }\n    });\n  });\n  return {\n    type: AUDIO_INPUT_DEVICES_DETECTED,\n    payload: inputArray\n  };\n};\n\nvar getOutputAudioDevices = function getOutputAudioDevices() {\n  var outputArray = [];\n  navigator.mediaDevices.enumerateDevices().then(function (devices) {\n    devices.forEach(function (device) {\n      if (device.kind === 'audiooutput') {\n        outputArray.push(device);\n      }\n    });\n  });\n  return {\n    type: AUDIO_OUTPUT_DEVICES_DETECTED,\n    payload: outputArray\n  };\n};\n\nvar setPrimaryOutput = function setPrimaryOutput(deviceId, sessions) {\n  return function (dispatch) {\n    if (sessions) {\n      if (Object.keys(sessions).length > 0) {\n        dispatch({\n          type: SET_REMOTE_AUDIO_SESSIONS_PENDING\n        });\n\n        for (var _i = 0, _Object$entries = Object.entries(sessions); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _Object$entries[_i],\n              sessionId = _Object$entries$_i[0],\n              _session = _Object$entries$_i[1];\n\n          if (_session.state === 'Established') {\n            try {\n              (function () {\n                var mediaElement = document.getElementById(sessionId);\n                var remoteStream = new MediaStream();\n\n                _session.sessionDescriptionHandler.peerConnection.getReceivers().forEach(function (receiver) {\n                  if (receiver.track) {\n                    remoteStream.addTrack(receiver.track);\n                  }\n                });\n\n                if (mediaElement) {\n                  mediaElement.setSinkId(deviceId).then(function () {\n                    mediaElement.srcObject = remoteStream;\n                    mediaElement.play();\n                  });\n                } else {\n                  console.log('no media Element');\n                }\n              })();\n            } catch (err) {\n              console.log(err);\n              dispatch({\n                type: SET_REMOTE_AUDIO_SESSION_FAIL\n              });\n              return;\n            }\n          }\n\n          dispatch({\n            type: SET_REMOTE_AUDIO_SESSION_SUCCESS\n          });\n        }\n      }\n    }\n\n    dispatch({\n      type: SET_PRIMARY_OUTPUT,\n      payload: deviceId\n    });\n  };\n};\n\nvar setPrimaryInput = function setPrimaryInput(deviceId, sessions, sinkIdAllowed) {\n  return function (dispatch) {\n    if (sessions) {\n      if (Object.keys(sessions).length > 0) {\n        dispatch({\n          type: SET_LOCAL_AUDIO_SESSIONS_PENDING\n        });\n\n        var _loop = function _loop() {\n          var _Object$entries2$_i = _Object$entries2[_i2],\n              sessionId = _Object$entries2$_i[0],\n              _session = _Object$entries2$_i[1];\n\n          if (_session.state === 'Established') {\n            try {\n              _session.sessionDescriptionHandler.peerConnection.getSenders().forEach(function (sender) {\n                console.log(sessionId);\n\n                if (sender.track && sender.track.kind === 'audio') {\n                  var audioDeviceId = deviceId;\n                  navigator.mediaDevices.getUserMedia({\n                    audio: {\n                      deviceId: audioDeviceId\n                    }\n                  }).then(function (stream) {\n                    var audioTrack = stream.getAudioTracks();\n                    sender.replaceTrack(audioTrack[0]);\n                  });\n                }\n              });\n            } catch (err) {\n              console.log(err);\n              dispatch({\n                type: SET_LOCAL_AUDIO_SESSION_FAIL\n              });\n              return {\n                v: void 0\n              };\n            }\n          }\n\n          dispatch({\n            type: SET_LOCAL_AUDIO_SESSION_SUCCESS\n          });\n        };\n\n        for (var _i2 = 0, _Object$entries2 = Object.entries(sessions); _i2 < _Object$entries2.length; _i2++) {\n          var _ret = _loop();\n\n          if (typeof _ret === \"object\") return _ret.v;\n        }\n      }\n    }\n\n    dispatch({\n      type: SET_PRIMARY_INPUT,\n      payload: deviceId\n    });\n\n    if (sinkIdAllowed === false) {\n      if (sessions) {\n        if (Object.keys(sessions).length > 0) {\n          for (var _i3 = 0, _Object$entries3 = Object.entries(sessions); _i3 < _Object$entries3.length; _i3++) {\n            var _Object$entries3$_i = _Object$entries3[_i3],\n                sessionId = _Object$entries3$_i[0],\n                _session = _Object$entries3$_i[1];\n\n            if (_session.state === 'Established') {\n              try {\n                (function () {\n                  var mediaElement = document.getElementById(sessionId);\n                  var remoteStream = new MediaStream();\n\n                  _session.sessionDescriptionHandler.peerConnection.getReceivers().forEach(function (receiver) {\n                    if (receiver.track) {\n                      remoteStream.addTrack(receiver.track);\n                    }\n                  });\n\n                  if (mediaElement) {\n                    mediaElement.srcObject = remoteStream;\n                    mediaElement.play();\n                  } else {\n                    console.log('no media Element');\n                  }\n                })();\n              } catch (err) {\n                console.log(err);\n                dispatch({\n                  type: SET_REMOTE_AUDIO_SESSION_FAIL\n                });\n                return;\n              }\n            }\n\n            dispatch({\n              type: SET_REMOTE_AUDIO_SESSION_SUCCESS\n            });\n          }\n        }\n      }\n    }\n  };\n};\n\nvar styles$1 = {\n  \"container\": \"_Adysl\",\n  \"incoming\": \"_14y58\",\n  \"dialpad\": \"_24i7u\",\n  \"closed\": \"_3nIZK\",\n  \"statusLarge\": \"_3G14Z\",\n  \"dialpadButton\": \"_38DZj\",\n  \"dialpadButtonLetters\": \"_N-jqm\",\n  \"dialpadRow\": \"_19SxG\",\n  \"actionButton\": \"_1hhhF\",\n  \"on\": \"_3ZwLv\",\n  \"endCallButton\": \"_3z8u3\",\n  \"startCallButton\": \"_3UW76\",\n  \"actionsContainer\": \"_2kDeL\",\n  \"transferMenu\": \"_1yjIy\",\n  \"transferInput\": \"_2tho8\",\n  \"transferButtons\": \"_Rc_m0\",\n  \"userString\": \"_gelBY\",\n  \"userStringLarge\": \"_rgh4W\",\n  \"settingsButton\": \"_3TfJl\",\n  \"settingsMenu\": \"_6JtnT\",\n  \"dropdowns\": \"_2FMhO\",\n  \"dropdownRow\": \"_2NuIJ\",\n  \"dropdownIcon\": \"_1K5Gw\"\n};\n\nvar settingsIcon = require('./assets/settings-24px.svg');\n\nvar micIcon = require('./assets/mic-24px.svg');\n\nvar soundIcon = require('./assets/volume_up-24px.svg');\n\nvar Status = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Status, _React$Component);\n\n  function Status() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      settingsMenu: false\n    };\n    return _this;\n  }\n\n  var _proto = Status.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props.getInputAudioDevices();\n    this.props.getOutputAudioDevices();\n  };\n\n  _proto.mapOptions = function mapOptions(options) {\n    var list = [];\n    options.map(function (option) {\n      list.push({\n        value: option.deviceId,\n        label: option.label\n      });\n    });\n    return list;\n  };\n\n  _proto.handleChangeDevice = function handleChangeDevice(type, id) {\n    if (type === 'out') {\n      this.props.setPrimaryOutput(id, this.props.sessions);\n    } else {\n      this.props.setPrimaryInput(id, this.props.sessions, this.props.sinkIdAllowed);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var props = this.props,\n        state = this.state;\n    var inputs = this.mapOptions(props.inputs);\n    var outputs = this.mapOptions(props.outputs);\n    return createElement(Fragment, null, createElement(\"div\", {\n      className: styles$1.container\n    }, props.appConfig.appSize === 'large' ? createElement(\"div\", {\n      className: styles$1.userStringLarge\n    }, props.name) : createElement(\"div\", {\n      className: styles$1.userString\n    }, props.name), props.phoneConfig.disabledFeatures.includes('settings') ? null : createElement(\"div\", {\n      id: styles$1.settingsButton,\n      className: state.settingsMenu ? styles$1.on : '',\n      onClick: function onClick() {\n        return _this2.setState({\n          settingsMenu: !state.settingsMenu\n        });\n      }\n    }, createElement(\"img\", {\n      src: settingsIcon\n    }))), props.phoneConfig.disabledFeatures.includes('settings') ? null : createElement(\"div\", {\n      id: styles$1.settingsMenu,\n      className: state.settingsMenu ? '' : styles$1.closed\n    }, createElement(\"hr\", {\n      style: {\n        width: '100%'\n      }\n    }), createElement(\"div\", {\n      className: styles$1.dropdownRow\n    }, createElement(\"img\", {\n      className: styles$1.dropdownIcon,\n      src: soundIcon\n    }), createElement(Select, {\n      placeholder: 'Select Output...',\n      value: outputs.find(function (output) {\n        return output.value === props.primaryOutput;\n      }) || null,\n      onChange: function onChange(option) {\n        return _this2.handleChangeDevice('out', option.value);\n      },\n      options: outputs,\n      id: styles$1.dropdowns\n    })), createElement(\"div\", {\n      className: styles$1.dropdownRow\n    }, createElement(\"img\", {\n      className: styles$1.dropdownIcon,\n      src: micIcon\n    }), createElement(Select, {\n      placeholder: 'Select Input...',\n      value: inputs.find(function (input) {\n        return input.value === props.primaryInput;\n      }),\n      onChange: function onChange(option) {\n        return _this2.handleChangeDevice('in', option.value);\n      },\n      options: inputs,\n      id: styles$1.dropdowns\n    })), createElement(\"hr\", {\n      style: {\n        width: '100%'\n      }\n    })));\n  };\n\n  return Status;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    inputs: state.device.audioInput,\n    outputs: state.device.audioOutput,\n    primaryInput: state.device.primaryAudioInput,\n    primaryOutput: state.device.primaryAudioOutput,\n    sessions: state.sipSessions.sessions,\n    sinkIdAllowed: state.device.sinkId\n  };\n};\n\nvar actions = {\n  setPrimaryInput: setPrimaryInput,\n  setPrimaryOutput: setPrimaryOutput,\n  getInputAudioDevices: getInputAudioDevices,\n  getOutputAudioDevices: getOutputAudioDevices\n};\nvar Status$1 = connect(mapStateToProps, actions)(Status);\nvar styles$2 = {\n  \"container\": \"_33s4p\",\n  \"incoming\": \"_3dASG\",\n  \"dialpad\": \"_-iUpI\",\n  \"closed\": \"_1Yn0M\",\n  \"statusLarge\": \"_3n9O3\",\n  \"dialpadButton\": \"_2Mev0\",\n  \"dialpadButtonLetters\": \"_30C7x\",\n  \"dialpadRow\": \"_ftZ8R\",\n  \"actionButton\": \"_1gnBl\",\n  \"on\": \"_11LDZ\",\n  \"endCallButton\": \"_EoCL2\",\n  \"startCallButton\": \"_PaJuy\",\n  \"actionsContainer\": \"_25gV2\",\n  \"transferMenu\": \"_1yYD-\",\n  \"transferInput\": \"_ovMXl\",\n  \"transferButtons\": \"_1-bn8\"\n};\n\nvar DialButton = function DialButton(_ref) {\n  var text = _ref.text,\n      click = _ref.click,\n      letters = _ref.letters;\n  return createElement(\"div\", {\n    id: 'sip-dial-button',\n    className: styles$2.dialpadButton,\n    onClick: function onClick() {\n      return click();\n    }\n  }, text, createElement(\"div\", {\n    style: {\n      opacity: letters === '1' ? 0 : 1\n    },\n    className: styles$2.dialpadButtonLetters\n  }, letters));\n};\n\nvar getButtonLetters = function getButtonLetters(value) {\n  switch (value) {\n    case '1':\n      return '1';\n\n    case '2':\n      return 'ABC';\n\n    case '3':\n      return 'DEF';\n\n    case '4':\n      return 'GHI';\n\n    case '5':\n      return 'JKL';\n\n    case '6':\n      return 'MNO';\n\n    case '7':\n      return 'PQRS';\n\n    case '8':\n      return 'TUV';\n\n    case '9':\n      return 'WXYZ';\n\n    case '0':\n      return '+';\n\n    default:\n      return '';\n  }\n};\n\nvar Tone = require('tone');\n\nvar DTMF_MATRIX = {\n  1: [697, 1209],\n  2: [697, 1336],\n  3: [697, 1477],\n  A: [697, 1633],\n  4: [770, 1209],\n  5: [770, 1336],\n  6: [770, 1477],\n  B: [770, 1633],\n  7: [852, 1209],\n  8: [852, 1336],\n  9: [852, 1477],\n  C: [852, 1633],\n  0: [941, 1209],\n  '*': [941, 1336],\n  '#': [941, 1477],\n  D: [941, 1633]\n};\nvar Synth = Tone.PolySynth && new Tone.PolySynth(2, Tone.Synth);\nvar FMSynth = Tone.PolySynth && new Tone.PolySynth(2, Tone.FMSynth);\n\nvar playDTMF = function playDTMF(key, deviceId) {\n  var obj = DTMF_MATRIX[key];\n\n  if (!obj) {\n    console.log('invalid DTMF tone input');\n  }\n\n  Synth.volume.value = -10;\n  Synth.set({\n    oscillator: {\n      type: 'sine'\n    },\n    envelope: {\n      attack: 0.02,\n      decay: 0.1,\n      sustain: 0.2,\n      release: 0.02\n    }\n  });\n\n  if (deviceId !== 'default') {\n    var mediaElement = document.getElementById('tone');\n\n    if (mediaElement) {\n      var dest = Tone.context.createMediaStreamDestination();\n      Synth.connect(dest);\n      mediaElement.setSinkId(deviceId).then(function () {\n        mediaElement.srcObject = dest.stream;\n        mediaElement.play();\n      });\n    }\n  } else {\n    Synth.toMaster();\n  }\n\n  Synth.triggerAttackRelease(obj, 0.3);\n};\n\nvar callDisconnect = function callDisconnect(deviceId) {\n  FMSynth.triggerAttack(['C4', 'E4'], '+0.1');\n  FMSynth.triggerRelease(['C4', 'E4'], '+0.14');\n  FMSynth.triggerAttack(['D4', 'G4'], '+0.14');\n  FMSynth.triggerRelease(['D4', 'G4'], '+0.18');\n\n  if (deviceId !== 'default') {\n    var mediaElement = document.getElementById('tone');\n\n    if (mediaElement) {\n      var dest = Tone.context.createMediaStreamDestination();\n      Synth.connect(dest);\n      mediaElement.setSinkId(deviceId).then(function () {\n        mediaElement.srcObject = dest.stream;\n        mediaElement.play();\n      });\n    }\n  } else {\n    FMSynth.toMaster();\n  }\n};\n\nvar TonePlayer = /*#__PURE__*/function () {\n  function TonePlayer() {\n    var _this = this;\n\n    this.ringtone = function (deviceId) {\n      var mediaElement = document.getElementById('ringtone');\n\n      if (deviceId !== 'default') {\n        if (mediaElement) {\n          mediaElement.setSinkId(deviceId).then(function () {\n            mediaElement.play();\n          });\n        } else {\n          console.log('no media Element');\n        }\n      } else {\n        mediaElement.play();\n      }\n    };\n\n    this.ringback = function (deviceId) {\n      var dest = Tone.context.createMediaStreamDestination();\n      console.log(dest);\n      Synth.set({\n        oscillator: {\n          type: 'sine'\n        },\n        envelope: {\n          attack: 0.02,\n          decay: 0.1,\n          sustain: 0.2,\n          release: 0.02\n        }\n      }).connect(dest);\n\n      if (deviceId !== 'default') {\n        var mediaElement = document.getElementById('tone');\n\n        if (mediaElement) {\n          var _dest = Tone.context.createMediaStreamDestination();\n\n          Synth.connect(_dest);\n          mediaElement.setSinkId(deviceId).then(function () {\n            mediaElement.srcObject = _dest.stream;\n            mediaElement.play();\n          });\n        }\n      } else {\n        Synth.toMaster();\n      }\n\n      _this.loop = new Tone.Loop(function (time) {\n        Synth.triggerAttack([440, 480]);\n        Synth.triggerRelease([440, 480], time + 2);\n      }, 6);\n\n      _this.loop.start(0);\n\n      Tone.Transport.start();\n    };\n  }\n\n  var _proto = TonePlayer.prototype;\n\n  _proto.stop = function stop() {\n    if (this.loop) {\n      try {\n        this.loop.stop(0);\n      } catch (_unused) {\n        console.log('no loop to stop');\n      }\n    }\n\n    if (Tone.Transport) {\n      try {\n        Tone.Transport.stop();\n        Synth.triggerRelease([440, 480]);\n      } catch (_unused2) {\n        console.log('no tone to stop');\n      }\n    }\n\n    var mediaElement = document.getElementById('ringtone');\n\n    if (mediaElement) {\n      var promise = mediaElement.pause();\n\n      if (promise !== undefined) {\n        promise[\"catch\"](function (error) {\n          console.log(error);\n        }).then(function () {\n          console.log('ringtone stopped');\n        });\n      }\n    }\n  };\n\n  return TonePlayer;\n}();\n\nvar Dialpad = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Dialpad, _React$Component);\n\n  function Dialpad(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.topRow = [];\n    _this.middleRow = [];\n    _this.bottomRow = [];\n\n    for (var x = 1; x < 4; x++) {\n      _this.topRow.push(_this.getButton(x.toString()));\n    }\n\n    for (var _x = 4; _x < 7; _x++) {\n      _this.middleRow.push(_this.getButton(_x.toString()));\n    }\n\n    for (var _x2 = 7; _x2 < 10; _x2++) {\n      _this.bottomRow.push(_this.getButton(_x2.toString()));\n    }\n\n    return _this;\n  }\n\n  var _proto = Dialpad.prototype;\n\n  _proto.getButton = function getButton(value) {\n    var _this2 = this;\n\n    return createElement(DialButton, {\n      key: value,\n      text: value,\n      letters: getButtonLetters(value),\n      click: function click() {\n        return _this2.handleClick(value);\n      }\n    });\n  };\n\n  _proto.handleClick = function handleClick(value) {\n    if (this.props.session.state === SessionState.Established) {\n      this.sendDTMF(value);\n      playDTMF(value, this.props.deviceId);\n    }\n  };\n\n  _proto.sendDTMF = function sendDTMF(value) {\n    var options = {\n      requestOptions: {\n        body: {\n          contentDisposition: 'render',\n          contentType: 'application/dtmf-relay',\n          content: \"Signal=\" + value + \"\\r\\nDuration=1000\"\n        }\n      }\n    };\n    this.props.session.info(options);\n  };\n\n  _proto.render = function render() {\n    return createElement(\"div\", {\n      className: this.props.open ? '' : styles$2.closed,\n      id: styles$2.dialpad\n    }, createElement(\"div\", {\n      className: styles$2.dialpadRow\n    }, this.topRow), createElement(\"div\", {\n      className: styles$2.dialpadRow\n    }, this.middleRow), createElement(\"div\", {\n      className: styles$2.dialpadRow\n    }, this.bottomRow), createElement(\"div\", {\n      className: styles$2.dialpadRow\n    }, this.getButton('*'), this.getButton('0'), this.getButton('#')));\n  };\n\n  return Dialpad;\n}(Component);\n\nvar mapStateToProps$1 = function mapStateToProps(state) {\n  return {\n    deviceId: state.device.primaryAudioOutput\n  };\n};\n\nvar actions$1 = {};\nvar Dialpad$1 = connect(mapStateToProps$1, actions$1)(Dialpad);\nvar NEW_SESSION = 'NEW_SESSION';\nvar NEW_ATTENDED_TRANSFER = 'NEW_ATTENDED_TRANSFER';\nvar INCOMING_CALL = 'INCOMING_CALL';\nvar ACCEPT_CALL = 'ACCEPT_CALL';\nvar DECLINE_CALL = 'DECLINE_CALL';\nvar SIPSESSION_STATECHANGE = 'SIPSESSION_STATECHANGE';\nvar CLOSE_SESSION = 'CLOSE_SESSION';\nvar SIPSESSION_HOLD_REQUEST = 'SIPSESSION_HOLD_REQUEST';\nvar SIPSESSION_HOLD_FAIL = 'SIPSESSION_HOLD_FAIL';\nvar SIPSESSION_UNHOLD_REQUEST = 'SIPSESSION_UNHOLD_REQUEST';\nvar SIPSESSION_UNHOLD_FAIL = 'SIPSESSION_UNHOLD_FAIL';\nvar SIPSESSION_MUTE_REQUEST = 'SIPSESSION_MUTE_REQUEST';\nvar SIPSESSION_MUTE_SUCCESS = 'SIPSESSION_MUTE_SUCCESS';\nvar SIPSESSION_MUTE_FAIL = 'SIPSESSION_MUTE_FAIL';\nvar SIPSESSION_UNMUTE_REQUEST = 'SIPSESSION_UNMUTE_REQUEST';\nvar SIPSESSION_UNMUTE_SUCCESS = 'SIPSESSION_UNMUTE_SUCCESS';\nvar SIPSESSION_UNMUTE_FAIL = 'SIPSESSION_UNMUTE_FAIL';\nvar SIPSESSION_BLIND_TRANSFER_REQUEST = 'SIPSESSION_BLIND_TRANSFER_REQUEST';\nvar SIPSESSION_BLIND_TRANSFER_SUCCESS = 'SIPSESSION_BLIND_TRANSFER_SUCCESS';\nvar SIPSESSION_BLIND_TRANSFER_FAIL = 'SIPSESSION_BLIND_TRANSFER_FAIL';\nvar SIPSESSION_ATTENDED_TRANSFER_REQUEST = 'SIPSESSION_ATTENDED_TRANSFER_REQUEST';\nvar SIPSESSION_ATTENDED_TRANSFER_PENDING = 'SIPSESSION_ATTENDED_TRANSFER_PENDING';\nvar SIPSESSION_ATTENDED_TRANSFER_READY = 'SIPSESSION_ATTENDED_TRANSFER_READY';\nvar SIPSESSION_ATTENDED_TRANSFER_CANCEL = 'SIPSESSION_ATTENDED_TRANSFER_CANCEL';\nvar SIPSESSION_ATTENDED_TRANSFER_FAIL = 'SIPSESSION_ATTENDED_TRANSFER_FAIL';\nvar SIPSESSION_ATTENDED_TRANSFER_SUCCESS = 'SIPSESSION_ATTENDED_TRANSFER_SUCCESS';\n\nvar stateChange = function stateChange(newState, id) {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_STATECHANGE,\n      payload: {\n        state: newState,\n        id: id\n      }\n    });\n  };\n};\n\nvar closeSession = function closeSession(id) {\n  return function (dispatch) {\n    dispatch({\n      type: CLOSE_SESSION,\n      payload: id\n    });\n  };\n};\n\nvar acceptCall = function acceptCall(session) {\n  return {\n    type: ACCEPT_CALL,\n    payload: session\n  };\n};\n\nvar declineCall = function declineCall(session) {\n  return {\n    type: DECLINE_CALL,\n    payload: session\n  };\n};\n\nvar endCall = function endCall(sessionId) {\n  return {\n    type: CLOSE_SESSION,\n    payload: sessionId\n  };\n};\n\nvar holdCallRequest = function holdCallRequest(session) {\n  return function (dispatch) {\n    if (!session.sessionDescriptionHandler || session.state !== SessionState.Established) {\n      return {\n        type: SIPSESSION_HOLD_FAIL\n      };\n    }\n\n    try {\n      session.invite({\n        sessionDescriptionHandlerModifiers: [session.sessionDescriptionHandler.holdModifier]\n      });\n      dispatch({\n        type: SIPSESSION_HOLD_REQUEST,\n        payload: session.id\n      });\n    } catch (err) {\n      dispatch({\n        type: SIPSESSION_HOLD_FAIL\n      });\n    }\n\n    return;\n  };\n};\n\nvar unHoldCallRequest = function unHoldCallRequest(session, onHolds, sessions) {\n  return function (dispatch) {\n    for (var _i = 0, _Object$entries = Object.entries(sessions); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _Object$entries[_i],\n          sessionId = _Object$entries$_i[0],\n          _session = _Object$entries$_i[1];\n\n      if (onHolds.indexOf(sessionId) < 0 && sessionId !== session.id && _session.state === 'Established') {\n        try {\n          _session.invite({\n            sessionDescriptionHandlerModifiers: [_session.sessionDescriptionHandler.holdModifier]\n          });\n\n          dispatch({\n            type: SIPSESSION_HOLD_REQUEST,\n            payload: _session.id\n          });\n        } catch (err) {\n          dispatch({\n            type: SIPSESSION_HOLD_FAIL\n          });\n        }\n      }\n    }\n\n    try {\n      session.invite();\n      dispatch({\n        type: SIPSESSION_UNHOLD_REQUEST,\n        payload: session.id\n      });\n    } catch (err) {\n      dispatch({\n        type: SIPSESSION_UNHOLD_FAIL\n      });\n    }\n  };\n};\n\nvar blindTransferRequest = function blindTransferRequest() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_BLIND_TRANSFER_REQUEST\n    });\n  };\n};\n\nvar blindTransferSuccess = function blindTransferSuccess() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_BLIND_TRANSFER_SUCCESS\n    });\n  };\n};\n\nvar blindTransferFail = function blindTransferFail() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_BLIND_TRANSFER_FAIL\n    });\n  };\n};\n\nvar attendedTransferRequest = function attendedTransferRequest() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_ATTENDED_TRANSFER_REQUEST\n    });\n  };\n};\n\nvar attendedTransferCancel = function attendedTransferCancel(session) {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_ATTENDED_TRANSFER_CANCEL,\n      payload: session\n    });\n  };\n};\n\nvar attendedTransferReady = function attendedTransferReady() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_ATTENDED_TRANSFER_READY\n    });\n  };\n};\n\nvar attendedTransferPending = function attendedTransferPending(session) {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_ATTENDED_TRANSFER_PENDING,\n      payload: session\n    });\n  };\n};\n\nvar attendedTransferSuccess = function attendedTransferSuccess() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_ATTENDED_TRANSFER_SUCCESS\n    });\n  };\n};\n\nvar attendedTransferFail = function attendedTransferFail() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_ATTENDED_TRANSFER_FAIL\n    });\n  };\n};\n\nvar muteRequest = function muteRequest() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_MUTE_REQUEST\n    });\n  };\n};\n\nvar muteSuccess = function muteSuccess() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_MUTE_SUCCESS\n    });\n  };\n};\n\nvar muteFail = function muteFail() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_MUTE_FAIL\n    });\n  };\n};\n\nvar unMuteRequest = function unMuteRequest() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_UNMUTE_REQUEST\n    });\n  };\n};\n\nvar unMuteSuccess = function unMuteSuccess() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_UNMUTE_SUCCESS\n    });\n  };\n};\n\nvar unMuteFail = function unMuteFail() {\n  return function (dispatch) {\n    dispatch({\n      type: SIPSESSION_UNMUTE_FAIL\n    });\n  };\n};\n\nvar SET_CREDENTIALS = 'SET_CREDENTIALS';\nvar SET_PHONE_CONFIG = 'SET_PHONE_CONFIG';\nvar SET_APP_CONFIG = 'SET_APP_CONFIG';\nvar STRICT_MODE_SHOW_CALL_BUTTON = 'STRICT_MODE_SHOW_CALL_BUTTON';\nvar STRICT_MODE_HIDE_CALL_BUTTON = 'STRICT_MODE_HIDE_CALL_BUTTON';\nvar ATTENDED_TRANSFER_LIMIT_REACHED = 'ATTENDED_TRANSFER_LIMIT_REACHED';\nvar SESSIONS_LIMIT_REACHED = 'SESSIONS_LIMIT_REACHED';\n\nvar setCredentials = function setCredentials(uri, password) {\n  if (uri === void 0) {\n    uri = '';\n  }\n\n  if (password === void 0) {\n    password = '';\n  }\n\n  return {\n    type: SET_CREDENTIALS,\n    payload: {\n      uri: uri,\n      password: password\n    }\n  };\n};\n\nvar setPhoneConfig = function setPhoneConfig(config) {\n  return {\n    type: SET_PHONE_CONFIG,\n    payload: config\n  };\n};\n\nvar setAppConfig = function setAppConfig(config) {\n  return {\n    type: SET_APP_CONFIG,\n    payload: config\n  };\n};\n\nvar setAppConfigStarted = function setAppConfigStarted() {\n  return {\n    type: STRICT_MODE_SHOW_CALL_BUTTON\n  };\n};\n\nvar attendedTransferLimitReached = function attendedTransferLimitReached() {\n  return {\n    type: ATTENDED_TRANSFER_LIMIT_REACHED\n  };\n};\n\nvar sessionsLimitReached = function sessionsLimitReached() {\n  return {\n    type: SESSIONS_LIMIT_REACHED\n  };\n};\n\nvar holdIcon = require('./assets/phone_paused-24px.svg');\n\nvar Hold = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Hold, _React$Component);\n\n  function Hold() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Hold.prototype;\n\n  _proto.hold = function hold() {\n    if (this.checkHoldState()) {\n      this.props.unHoldCallRequest(this.props.session, this.props.onHold, this.props.sessions);\n    } else {\n      this.props.holdCallRequest(this.props.session);\n    }\n  };\n\n  _proto.checkHoldState = function checkHoldState() {\n    return this.props.onHold.includes(this.props.session.id);\n  };\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return createElement(\"button\", {\n      className: this.checkHoldState() ? styles$2.on : '',\n      id: styles$2.actionButton,\n      onClick: function onClick() {\n        return _this.hold();\n      }\n    }, createElement(\"img\", {\n      src: holdIcon\n    }));\n  };\n\n  return Hold;\n}(Component);\n\nvar mapStateToProps$2 = function mapStateToProps(state) {\n  return {\n    stateChanged: state.sipSessions.stateChanged,\n    sessions: state.sipSessions.sessions,\n    userAgent: state.sipAccounts.userAgent,\n    onHold: state.sipSessions.onHold\n  };\n};\n\nvar actions$2 = {\n  holdCallRequest: holdCallRequest,\n  unHoldCallRequest: unHoldCallRequest\n};\nvar Hold$1 = connect(mapStateToProps$2, actions$2)(Hold);\n\nvar micOffIcon = require('./assets/mic_off-24px.svg');\n\nvar Mute = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Mute, _React$Component);\n\n  function Mute() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      onMute: false\n    };\n    return _this;\n  }\n\n  var _proto = Mute.prototype;\n\n  _proto.mute = function mute() {\n    var _this2 = this;\n\n    if (this.state.onMute) {\n      this.props.unMuteRequest();\n      return new Promise(function (resolve, reject) {\n        if (!_this2.props.session.sessionDescriptionHandler || _this2.props.session.state !== SessionState.Established) {\n          _this2.props.unMuteFail();\n\n          reject('No session to mute');\n          return;\n        }\n\n        try {\n          var pc = _this2.props.session.sessionDescriptionHandler.peerConnection;\n          pc.getSenders().forEach(function (stream) {\n            if (stream.track && stream.track.kind === 'audio') {\n              stream.track.enabled = true;\n            }\n          });\n\n          _this2.props.unMuteSuccess();\n\n          _this2.setState({\n            onMute: false\n          });\n\n          resolve();\n          return;\n        } catch (err) {\n          _this2.props.unMuteFail();\n\n          reject(err);\n        }\n      });\n    }\n\n    if (!this.state.onMute) {\n      return new Promise(function (resolve, reject) {\n        if (!_this2.props.session.sessionDescriptionHandler || _this2.props.session.state !== SessionState.Established) {\n          _this2.props.muteFail();\n\n          reject('No session to mute');\n          return;\n        }\n\n        try {\n          _this2.props.muteRequest();\n\n          var pc = _this2.props.session.sessionDescriptionHandler.peerConnection;\n          console.log(pc.getSenders());\n          pc.getSenders().forEach(function (stream) {\n            if (stream.track && stream.track.kind === 'audio') {\n              stream.track.enabled = false;\n            }\n          });\n\n          _this2.props.muteSuccess();\n\n          _this2.setState({\n            onMute: true\n          });\n\n          resolve();\n          return;\n        } catch (err) {\n          _this2.props.muteFail();\n\n          reject(err);\n          return;\n        }\n      });\n    }\n\n    this.props.muteFail();\n    return;\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    return createElement(\"div\", {\n      className: this.state.onMute ? styles$2.on : '',\n      id: styles$2.actionButton,\n      onClick: function onClick() {\n        return _this3.mute();\n      }\n    }, createElement(\"img\", {\n      src: micOffIcon\n    }));\n  };\n\n  return Mute;\n}(Component);\n\nvar mapStateToProps$3 = function mapStateToProps(state) {\n  return {\n    stateChanged: state.sipSessions.stateChanged,\n    sessions: state.sipSessions.sessions,\n    userAgent: state.sipAccounts.userAgent\n  };\n};\n\nvar actions$3 = {\n  muteRequest: muteRequest,\n  muteSuccess: muteSuccess,\n  muteFail: muteFail,\n  unMuteRequest: unMuteRequest,\n  unMuteSuccess: unMuteSuccess,\n  unMuteFail: unMuteFail\n};\nvar Mute$1 = connect(mapStateToProps$3, actions$3)(Mute);\n\nvar holdAll = function holdAll(id) {\n  var state = phoneStore.getState();\n  var onHolds = state.sipSessions.onHold;\n  var sessions = state.sipSessions.sessions;\n\n  for (var _i = 0, _Object$entries = Object.entries(sessions); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _Object$entries[_i],\n        sessionId = _Object$entries$_i[0],\n        session = _Object$entries$_i[1];\n\n    if (onHolds.indexOf(sessionId) < 0 && sessionId !== id) {\n      try {\n        holdCallRequest(session);\n        phoneStore.dispatch({\n          type: SIPSESSION_HOLD_REQUEST,\n          payload: session.id\n        });\n        return;\n      } catch (err) {\n        return;\n      }\n    }\n  }\n};\n\nvar setRemoteAudio = function setRemoteAudio(session) {\n  console.log('setRemoteAudio');\n  var state = phoneStore.getState();\n  var deviceId = state.device.primaryAudioOutput;\n  var mediaElement = document.getElementById(session.id);\n  var remoteStream = new MediaStream();\n  session.sessionDescriptionHandler.peerConnection.getReceivers().forEach(function (receiver) {\n    if (receiver.track.kind === 'audio') {\n      remoteStream.addTrack(receiver.track);\n    }\n  });\n\n  if (mediaElement && typeof mediaElement.sinkId === 'undefined') {\n    console.log('safari');\n    phoneStore.dispatch({\n      type: AUDIO_SINKID_NOT_ALLOWED\n    });\n    mediaElement.srcObject = remoteStream;\n    mediaElement.play();\n  } else if (mediaElement && typeof mediaElement.sinkId !== 'undefined') {\n    mediaElement.setSinkId(deviceId).then(function () {\n      mediaElement.srcObject = remoteStream;\n      mediaElement.play();\n    });\n  } else {\n    phoneStore.dispatch({\n      type: REMOTE_AUDIO_FAIL\n    });\n  }\n\n  phoneStore.dispatch({\n    type: REMOTE_AUDIO_CONNECTED\n  });\n};\n\nvar setLocalAudio = function setLocalAudio(session) {\n  var state = phoneStore.getState();\n  var deviceId = state.device.primaryAudioInput;\n  session.sessionDescriptionHandler.peerConnection.getSenders().forEach(function (sender) {\n    if (sender.track && sender.track.kind === 'audio') {\n      var audioDeviceId = deviceId;\n      navigator.mediaDevices.getUserMedia({\n        audio: {\n          deviceId: audioDeviceId\n        }\n      }).then(function (stream) {\n        var audioTrack = stream.getAudioTracks();\n\n        if (audioTrack) {\n          sender.replaceTrack(audioTrack[0]);\n        }\n      });\n    }\n  });\n  phoneStore.dispatch({\n    type: LOCAL_AUDIO_CONNECTED\n  });\n};\n\nvar cleanupMedia = function cleanupMedia(sessionId) {\n  var mediaElement = document.getElementById(sessionId);\n\n  if (mediaElement) {\n    mediaElement.srcObject = null;\n    mediaElement.pause();\n  }\n};\n\nvar ToneManager = /*#__PURE__*/function () {\n  function ToneManager() {}\n\n  var _proto = ToneManager.prototype;\n\n  _proto.playRing = function playRing(type) {\n    var state = phoneStore.getState();\n    var deviceId = state.device.primaryAudioOutput;\n\n    if (this.currentTone) {\n      this.currentTone.stop();\n      this.currentTone = undefined;\n    }\n\n    if (type === 'ringback') {\n      this.currentTone = new TonePlayer();\n      this.currentTone.ringback(deviceId);\n    } else if (type == 'ringtone') {\n      this.currentTone = new TonePlayer();\n      this.currentTone.ringtone(deviceId);\n    }\n  };\n\n  _proto.stopAll = function stopAll() {\n    if (this.currentTone) {\n      this.currentTone.stop();\n      this.currentTone = undefined;\n    }\n  };\n\n  return ToneManager;\n}();\n\nvar toneManager = new ToneManager();\n\nvar SessionStateHandler = function SessionStateHandler(session, ua) {\n  var _this = this;\n\n  this.stateChange = function (newState) {\n    switch (newState) {\n      case SessionState.Establishing:\n        holdAll(_this.session.id);\n        toneManager.playRing('ringback');\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        var myTransport = _this.ua.transport;\n        myTransport.on('message', function (message) {\n          if (message.includes('BYE ') && message.indexOf('BYE ') === 0) {\n            if (_this.session.state === 'Establishing') {\n              console.log(message + \" session has recieved a BYE message when the session state is establishing\");\n\n              _this.session.cancel();\n\n              _this.session.dispose();\n\n              setTimeout(function () {\n                phoneStore.dispatch({\n                  type: CLOSE_SESSION,\n                  payload: _this.session.id\n                });\n                toneManager.stopAll();\n                phoneStore.dispatch({\n                  type: STRICT_MODE_SHOW_CALL_BUTTON\n                });\n              }, 5000);\n              return;\n            } else {\n              return;\n            }\n          }\n        });\n        break;\n\n      case SessionState.Established:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        toneManager.stopAll();\n        setLocalAudio(_this.session);\n        setRemoteAudio(_this.session);\n        break;\n\n      case SessionState.Terminating:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        toneManager.stopAll();\n        cleanupMedia(_this.session.id);\n        break;\n\n      case SessionState.Terminated:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        setTimeout(function () {\n          phoneStore.dispatch({\n            type: CLOSE_SESSION,\n            payload: _this.session.id\n          });\n          toneManager.stopAll();\n          phoneStore.dispatch({\n            type: STRICT_MODE_SHOW_CALL_BUTTON\n          });\n        }, 5000);\n        break;\n\n      default:\n        console.log(\"Unknown session state change: \" + newState);\n        break;\n    }\n  };\n\n  this.session = session;\n  this.ua = ua;\n};\n\nvar getFullNumber = function getFullNumber(number) {\n  if (number.length < 10) {\n    return number;\n  }\n\n  var fullNumber = \"+\" + phoneStore.getState().sipAccounts.sipAccount._config.defaultCountryCode + number;\n\n  if (number.includes('+') && number.length === 10) {\n    fullNumber = \"\" + number;\n  }\n\n  console.log(fullNumber);\n  return fullNumber;\n};\n\nvar statusMask = function statusMask(status) {\n  switch (status) {\n    case 'Established':\n      return 'Connected';\n\n    case 'Establishing':\n      return 'Calling...';\n\n    case 'Initial':\n      return 'Initial';\n\n    case 'Terminating':\n    case 'Terminated':\n      return 'Ended';\n\n    default:\n      return 'Unknown Status';\n  }\n};\n\nvar getDurationDisplay = function getDurationDisplay(duration) {\n  var minutes = Math.floor(duration / 60);\n  var hours = Math.floor(minutes / 60);\n  minutes = minutes % 60;\n  var seconds = duration % 60;\n  var dh, dm, ds;\n\n  if (hours && hours < 10) {\n    dh = \"0\" + hours + \":\";\n  } else if (hours) {\n    dh = hours + \":\";\n  } else {\n    dh = '00:';\n  }\n\n  if (minutes && minutes < 10) {\n    dm = \"0\" + minutes + \":\";\n  } else if (minutes) {\n    dm = minutes + \":\";\n  } else {\n    dm = '00:';\n  }\n\n  if (seconds && seconds < 10) {\n    ds = \"0\" + seconds;\n  } else if (seconds) {\n    ds = \"\" + seconds;\n  } else {\n    ds = '00';\n  }\n\n  return \"\" + (hours ? dh : '') + dm + ds;\n};\n\nvar blindIcon = require('./assets/arrow_forward-24px.svg');\n\nvar BlindTransfer = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(BlindTransfer, _React$Component);\n\n  function BlindTransfer() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = BlindTransfer.prototype;\n\n  _proto.blindTransferCall = function blindTransferCall() {\n    this.props.blindTransferRequest();\n    var target = UserAgent.makeURI(\"sip:\" + getFullNumber(this.props.destination) + \"@\" + this.props.sipAccount._credentials.sipuri.split('@')[1] + \";user=phone\");\n\n    if (target) {\n      try {\n        this.props.session.refer(target);\n        this.props.blindTransferSuccess();\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      this.props.blindTransferFail();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return createElement(Fragment, null, createElement(\"button\", {\n      className: styles$2.transferButtons,\n      onClick: function onClick() {\n        return _this.blindTransferCall();\n      }\n    }, createElement(\"img\", {\n      src: blindIcon\n    })));\n  };\n\n  return BlindTransfer;\n}(Component);\n\nvar mapStateToProps$4 = function mapStateToProps(state) {\n  return {\n    sipAccount: state.sipAccounts.sipAccount,\n    stateChanged: state.sipSessions.stateChanged,\n    sessions: state.sipSessions.sessions,\n    userAgent: state.sipAccounts.userAgent\n  };\n};\n\nvar actions$4 = {\n  blindTransferRequest: blindTransferRequest,\n  blindTransferSuccess: blindTransferSuccess,\n  blindTransferFail: blindTransferFail\n};\nvar BlindTranfer = connect(mapStateToProps$4, actions$4)(BlindTransfer);\n\nvar attendedIcon = require('./assets/phone_in_talk-24px.svg');\n\nvar cancelIcon = require('./assets/call_end-24px.svg');\n\nvar connectIcon = require('./assets/arrow_forward-24px.svg');\n\nvar AttendedTransfer = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(AttendedTransfer, _React$Component);\n\n  function AttendedTransfer() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      attendedTransferSessionPending: null,\n      attendedTransferSessionReady: null\n    };\n    return _this;\n  }\n\n  var _proto = AttendedTransfer.prototype;\n\n  _proto.attendedTransferCall = function attendedTransferCall() {\n    var _this2 = this;\n\n    if (this.props.attendedTransfersList.length >= this.props.phoneConfig.attendedTransferLimit) {\n      this.props.attendedTransferLimitReached();\n    } else {\n      this.holdAll();\n      this.props.attendedTransferRequest();\n      var target = UserAgent.makeURI(\"sip:\" + getFullNumber(this.props.destination) + \"@\" + this.props.sipAccount._credentials.sipuri.split('@')[1] + \";user=phone\");\n\n      if (target) {\n        var inviter = new Inviter(this.props.userAgent, target);\n        var outgoingSession = inviter;\n        phoneStore.dispatch({\n          type: NEW_ATTENDED_TRANSFER,\n          payload: outgoingSession\n        });\n        this.setState({\n          attendedTransferSessionPending: outgoingSession\n        });\n        outgoingSession.stateChange.addListener(function (newState) {\n          switch (newState) {\n            case SessionState.Initial:\n            case SessionState.Establishing:\n              _this2.props.stateChange(newState, outgoingSession.id);\n\n              _this2.props.attendedTransferPending();\n\n              break;\n\n            case SessionState.Established:\n              _this2.setState({\n                attendedTransferSessionReady: outgoingSession\n              });\n\n              _this2.props.attendedTransferReady();\n\n              _this2.setState({\n                attendedTransferSessionPending: false\n              });\n\n              _this2.props.stateChange(newState, outgoingSession.id);\n\n              setLocalAudio(outgoingSession);\n              setRemoteAudio(outgoingSession);\n              break;\n\n            case SessionState.Terminating:\n              _this2.props.stateChange(newState, outgoingSession.id);\n\n              cleanupMedia(outgoingSession.id);\n              break;\n\n            case SessionState.Terminated:\n              _this2.props.stateChange(newState, outgoingSession.id);\n\n              _this2.attendedTransferClear();\n\n              _this2.props.attendedTransferCancel(outgoingSession);\n\n              setTimeout(function () {\n                _this2.props.closeSession(outgoingSession.id);\n              }, 5000);\n              break;\n\n            default:\n              console.log(\"Unknown session state change: \" + newState);\n              break;\n          }\n        });\n        outgoingSession.invite()[\"catch\"](function (error) {\n          _this2.props.attendedTransferFail(outgoingSession);\n\n          console.log(error);\n        });\n      } else {\n        console.log('Failed to makeURI');\n      }\n    }\n  };\n\n  _proto.attendedTransferClear = function attendedTransferClear() {\n    this.setState({\n      attendedTransferSessionPending: null\n    });\n    this.setState({\n      attendedTransferSessionReady: null\n    });\n    this.props.started(false);\n  };\n\n  _proto.connectAttendedTransfer = function connectAttendedTransfer(attendedTransferSession) {\n    try {\n      this.props.session.refer(attendedTransferSession);\n      this.props.attendedTransferSuccess();\n      this.setState({\n        attendedTransferSessionReady: null\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  _proto.cancelAttendedTransfer = function cancelAttendedTransfer(attendedTransferSession) {\n    attendedTransferSession.cancel();\n    this.props.attendedTransferCancel(attendedTransferSession);\n    this.setState({\n      attendedTransferSessionPending: null\n    });\n    this.setState({\n      attendedTransferSession: null\n    });\n  };\n\n  _proto.holdAll = function holdAll() {\n    var state = phoneStore.getState();\n    var onHolds = state.sipSessions.onHold;\n\n    if (this.props.session.id in onHolds === false) {\n      try {\n        this.props.holdCallRequest(this.props.session);\n      } catch (err) {\n        console.log(err);\n      }\n\n      return;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    if (this.state.attendedTransferSessionReady) {\n      var phoneConfigAttended = {\n        disabledButtons: ['numpad', 'transfer'],\n        disabledFeatures: [''],\n        defaultDial: '',\n        sessionsLimit: 0,\n        attendedTransferLimit: 0,\n        autoAnswer: false\n      };\n      return createElement(Fragment, null, createElement(Phone$1, {\n        session: this.state.attendedTransferSessionReady,\n        phoneConfig: phoneConfigAttended\n      }), createElement(\"button\", {\n        className: styles$2.transferButtons,\n        onClick: function onClick() {\n          _this3.props.started(false);\n\n          _this3.connectAttendedTransfer(_this3.state.attendedTransferSessionReady);\n        }\n      }, createElement(\"img\", {\n        src: connectIcon\n      })));\n    } else if (this.state.attendedTransferSessionPending) {\n      return createElement(\"button\", {\n        className: styles$2.endCallButton,\n        onClick: function onClick() {\n          _this3.props.started(false);\n\n          _this3.cancelAttendedTransfer(_this3.state.attendedTransferSessionPending);\n        }\n      }, createElement(\"img\", {\n        src: cancelIcon\n      }));\n    } else {\n      return createElement(\"button\", {\n        className: styles$2.transferButtons,\n        onClick: function onClick() {\n          _this3.props.started(true);\n\n          _this3.attendedTransferCall();\n        }\n      }, createElement(\"img\", {\n        src: attendedIcon\n      }));\n    }\n  };\n\n  return AttendedTransfer;\n}(Component);\n\nvar mapStateToProps$5 = function mapStateToProps(state) {\n  return {\n    sipAccount: state.sipAccounts.sipAccount,\n    stateChanged: state.sipSessions.stateChanged,\n    sessions: state.sipSessions.sessions,\n    userAgent: state.sipAccounts.userAgent,\n    attendedTransfersList: state.sipSessions.attendedTransfers,\n    phoneConfig: state.config.phoneConfig\n  };\n};\n\nvar actions$5 = {\n  holdCallRequest: holdCallRequest,\n  attendedTransferRequest: attendedTransferRequest,\n  attendedTransferCancel: attendedTransferCancel,\n  attendedTransferReady: attendedTransferReady,\n  attendedTransferPending: attendedTransferPending,\n  attendedTransferSuccess: attendedTransferSuccess,\n  attendedTransferFail: attendedTransferFail,\n  attendedTransferLimitReached: attendedTransferLimitReached,\n  stateChange: stateChange,\n  closeSession: closeSession\n};\nvar AttendedTransfer$1 = connect(mapStateToProps$5, actions$5)(AttendedTransfer);\n\nvar endCallIcon = require('./assets/call_end-24px.svg');\n\nvar dialpadIcon = require('./assets/dialpad-24px.svg');\n\nvar transferIcon = require('./assets/arrow_forward-24px.svg');\n\nvar Phone = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Phone, _React$Component);\n\n  function Phone(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      dialpadOpen: false,\n      transferMenu: false,\n      ended: false,\n      transferDialString: '',\n      attendedTransferStarted: false,\n      duration: 0,\n      counterStarted: false\n    };\n    _this.attendedProcess = _this.attendedProcess.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Phone.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.phoneConfig.disabledButtons.includes('dialpadopen')) {\n      this.setState({\n        dialpadOpen: true\n      });\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(newProps) {\n    if (newProps.session.state === SessionState.Established && !this.state.counterStarted) {\n      this.handleCounter();\n    }\n\n    if (newProps.session.state === SessionState.Terminated && this.state.ended === false) {\n      this.setState({\n        ended: true\n      });\n    }\n  };\n\n  _proto.endCall = function endCall() {\n    var _this2 = this;\n\n    if (this.props.session.state === SessionState.Established) {\n      this.props.session.bye();\n    } else if (this.props.session.state === SessionState.Initial || this.props.session.state === SessionState.Establishing) {\n      toneManager.stopAll();\n      callDisconnect(this.props.deviceId);\n      this.props.session.cancel();\n    }\n\n    this.setState({\n      ended: true\n    });\n    setTimeout(function () {\n      _this2.props.session.dispose();\n\n      _this2.props.endCall(_this2.props.session.id);\n\n      if (_this2.props.strictMode === 'strict') {\n        _this2.props.setAppConfigStarted();\n      }\n    }, 5000);\n  };\n\n  _proto.attendedProcess = function attendedProcess(bool) {\n    this.setState({\n      attendedTransferStarted: bool\n    });\n  };\n\n  _proto.handleCounter = function handleCounter() {\n    var _this3 = this;\n\n    if (this.props.session && this.props.session.state !== SessionState.Terminated) {\n      if (this.state.counterStarted === false) {\n        this.setState({\n          counterStarted: true\n        });\n      }\n\n      setTimeout(function () {\n        _this3.setState({\n          duration: _this3.state.duration + 1\n        });\n\n        _this3.handleCounter();\n      }, 1000);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this4 = this;\n\n    var state = this.state,\n        props = this.props;\n    var durationDisplay;\n\n    if (props.appSize === 'large') {\n      if (this.props.session.state === SessionState.Initial || this.props.session.state === SessionState.Establishing) {\n        durationDisplay = null;\n      } else {\n        durationDisplay = createElement(\"div\", {\n          className: styles$2.statusLarge\n        }, getDurationDisplay(this.state.duration));\n      }\n    } else {\n      if (this.props.session.state === SessionState.Initial || this.props.session.state === SessionState.Establishing) {\n        durationDisplay = null;\n      } else {\n        durationDisplay = createElement(\"div\", null, getDurationDisplay(this.state.duration));\n      }\n    }\n\n    return createElement(Fragment, null, createElement(\"hr\", {\n      style: {\n        width: '100%'\n      }\n    }), props.phoneConfig.disabledFeatures.includes('remoteid') ? null : createElement(\"div\", null, props.session.remoteIdentity.uri.normal.user + \" - \" + props.session.remoteIdentity._displayName, createElement(\"br\", null)), props.appSize === 'large' ? createElement(\"div\", {\n      className: styles$2.statusLarge\n    }, statusMask(props.session.state)) : createElement(\"div\", null, statusMask(props.session.state)), createElement(\"br\", null), durationDisplay, state.ended ? null : createElement(Fragment, null, createElement(Dialpad$1, {\n      open: state.dialpadOpen,\n      session: props.session\n    }), createElement(\"div\", {\n      className: styles$2.actionsContainer\n    }, props.phoneConfig.disabledButtons.includes('mute') ? null : createElement(Mute$1, {\n      session: props.session\n    }), createElement(\"button\", {\n      className: styles$2.endCallButton,\n      disabled: state.ended,\n      onClick: function onClick() {\n        return _this4.endCall();\n      }\n    }, createElement(\"img\", {\n      src: endCallIcon\n    })), props.phoneConfig.disabledButtons.includes('hold') ? null : createElement(Hold$1, {\n      session: props.session\n    }), props.phoneConfig.disabledButtons.includes('numpad') ? null : createElement(\"div\", {\n      id: styles$2.actionButton,\n      className: state.dialpadOpen ? styles$2.on : '',\n      onClick: function onClick() {\n        return _this4.setState({\n          dialpadOpen: !state.dialpadOpen\n        });\n      }\n    }, createElement(\"img\", {\n      src: dialpadIcon\n    })), props.phoneConfig.disabledButtons.includes('transfer') ? null : createElement(\"div\", {\n      id: styles$2.actionButton,\n      className: state.transferMenu ? styles$2.on : '',\n      onClick: function onClick() {\n        return _this4.setState({\n          transferMenu: !state.transferMenu\n        });\n      }\n    }, createElement(\"img\", {\n      src: transferIcon\n    })), createElement(\"div\", {\n      id: styles$2.transferMenu,\n      className: state.transferMenu ? '' : styles$2.closed\n    }, createElement(\"input\", {\n      id: styles$2.transferInput,\n      onChange: function onChange(e) {\n        return _this4.setState({\n          transferDialString: e.target.value\n        });\n      },\n      placeholder: 'Enter the transfer destination...'\n    }), this.state.attendedTransferStarted ? null : createElement(BlindTranfer, {\n      destination: state.transferDialString,\n      session: props.session\n    }), createElement(AttendedTransfer$1, {\n      started: this.attendedProcess,\n      destination: state.transferDialString,\n      session: props.session\n    }))), createElement(\"audio\", {\n      id: this.props.session.id,\n      autoPlay: true\n    })));\n  };\n\n  return Phone;\n}(Component);\n\nvar mapStateToProps$6 = function mapStateToProps(state) {\n  return {\n    stateChanged: state.sipSessions.stateChanged,\n    sessions: state.sipSessions.sessions,\n    userAgent: state.sipAccounts.userAgent,\n    deviceId: state.device.primaryAudioOutput,\n    strictMode: state.config.appConfig.mode,\n    appSize: state.config.appConfig.appSize\n  };\n};\n\nvar actions$6 = {\n  endCall: endCall,\n  setAppConfigStarted: setAppConfigStarted\n};\nvar Phone$1 = connect(mapStateToProps$6, actions$6)(Phone);\n\nvar acceptIcon = require('./assets/call-24px.svg');\n\nvar declineIcon = require('./assets/call_end-24px.svg');\n\nvar ring = require('./assets/ring.mp3');\n\nvar Incoming = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Incoming, _React$Component);\n\n  function Incoming() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Incoming.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this = this;\n\n    toneManager.stopAll();\n    toneManager.playRing('ringtone');\n    console.log(\"auto-answer is: \" + this.props.autoanswer);\n\n    if (this.props.autoanswer) {\n      this.timer = setInterval(function () {\n        _this.handleAutoAnswer();\n      }, 1000);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearInterval(this.timer);\n  };\n\n  _proto.handleAccept = function handleAccept() {\n    toneManager.stopAll();\n\n    if (this.props.session.state === SessionState.Initial) {\n      this.props.session.accept({\n        sessionDescriptionHandlerOptions: {\n          constraints: {\n            audio: true,\n            video: false\n          }\n        }\n      });\n    }\n\n    this.props.acceptCall(this.props.session);\n  };\n\n  _proto.handleAutoAnswer = function handleAutoAnswer() {\n    console.log('\\n\\n\\n ************ handleAutoAnswer ********** \\n\\n\\n');\n\n    if (this.props.session.state === SessionState.Initial) {\n      this.handleAccept();\n    }\n\n    clearInterval(this.timer);\n  };\n\n  _proto.handleDecline = function handleDecline() {\n    toneManager.stopAll();\n\n    if (this.props.session.state !== SessionState.Terminated && this.props.session.state !== SessionState.Terminating) {\n      this.props.session.reject();\n    }\n\n    this.props.declineCall(this.props.session);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var props = this.props;\n    return createElement(\"div\", {\n      id: styles$2.incoming\n    }, \"Incoming: \" + props.session.remoteIdentity.uri.normal.user + \" - \" + props.session.remoteIdentity._displayName, createElement(\"div\", {\n      className: styles$2.endCallButton,\n      onClick: function onClick() {\n        return _this2.handleDecline();\n      }\n    }, createElement(\"img\", {\n      src: declineIcon\n    })), createElement(\"div\", {\n      className: styles$2.startCallButton,\n      onClick: function onClick() {\n        return _this2.handleAccept();\n      }\n    }, createElement(\"img\", {\n      src: acceptIcon\n    })), createElement(\"audio\", {\n      id: 'ringtone',\n      loop: true\n    }, createElement(\"source\", {\n      src: ring,\n      type: 'audio/mpeg'\n    })), createElement(\"audio\", {\n      id: this.props.session.id\n    }));\n  };\n\n  return Incoming;\n}(Component);\n\nvar mapStateToProps$7 = function mapStateToProps(state) {\n  return {\n    stateChanged: state.sipSessions.stateChanged\n  };\n};\n\nvar actions$7 = {\n  acceptCall: acceptCall,\n  declineCall: declineCall\n};\nvar Incoming$1 = connect(mapStateToProps$7, actions$7)(Incoming);\n\nvar getSessions = function getSessions(sessions, phoneConfig, attendedTransfers, incomingCalls) {\n  var elements = [];\n\n  for (var session in sessions) {\n    if (attendedTransfers.includes(session)) continue;\n\n    if (incomingCalls.includes(session)) {\n      if (Object.keys(sessions).length >= phoneConfig.sessionsLimit + incomingCalls.length) {\n        console.log('Unable to create more sessions...');\n        console.log('Check your phoneConfig.sessionsLimit option!');\n      } else {\n        elements.push(createElement(Incoming$1, {\n          session: sessions[session],\n          key: session,\n          autoanswer: phoneConfig.autoAnswer\n        }));\n      }\n    } else {\n      elements.push(createElement(Phone$1, {\n        session: sessions[session],\n        key: session,\n        phoneConfig: phoneConfig\n      }));\n    }\n  }\n\n  return elements;\n};\n\nvar PhoneSessions = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(PhoneSessions, _React$Component);\n\n  function PhoneSessions() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = PhoneSessions.prototype;\n\n  _proto.render = function render() {\n    return createElement(Fragment, null, getSessions(this.props.sessions, this.props.phoneConfig, this.props.attendedTransfers, this.props.incomingCalls));\n  };\n\n  return PhoneSessions;\n}(Component);\n\nvar mapStateToProps$8 = function mapStateToProps(state) {\n  return {\n    sessions: state.sipSessions.sessions,\n    incomingCalls: state.sipSessions.incomingCalls,\n    attendedTransfers: state.sipSessions.attendedTransfers\n  };\n};\n\nvar PS = connect(mapStateToProps$8)(PhoneSessions);\nvar styles$3 = {\n  \"container\": \"_2iAE_\",\n  \"dialButton\": \"_3GsXr\",\n  \"dialButtonStrict\": \"_tfL15\",\n  \"dialInput\": \"_32AFz\",\n  \"dialstringContainerStrict\": \"_2qSFk\",\n  \"dialstringContainer\": \"_2sye_\"\n};\n\nvar callIcon = require('./assets/call-24px.svg');\n\nvar callIconLarge = require('./assets/call-large-40px.svg');\n\nvar Dialstring = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Dialstring, _React$Component);\n\n  function Dialstring() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      currentDialString: ''\n    };\n    return _this;\n  }\n\n  var _proto = Dialstring.prototype;\n\n  _proto.handleDial = function handleDial() {\n    var sessionsActive = Object.keys(this.props.sessions).length;\n    var attendedTransferActive = this.props.attendedTransfersList.length;\n    var sessionDiff = sessionsActive - attendedTransferActive;\n\n    if (sessionDiff >= this.props.phoneConfig.sessionsLimit) {\n      this.props.sessionsLimitReached();\n    } else {\n      if (this.props.appConfig.mode === 'strict') {\n        this.props.sipAccount.makeCall(this.props.phoneConfig.defaultDial);\n      }\n\n      if (!this.checkDialstring()) {\n        this.props.sipAccount.makeCall(\"\" + this.state.currentDialString);\n      }\n    }\n  };\n\n  _proto.checkDialstring = function checkDialstring() {\n    return this.state.currentDialString.length === 0;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var props = this.props;\n\n    if (props.appConfig.mode.includes('strict') && props.started === true) {\n      return createElement(\"div\", {\n        className: styles$3.dialstringContainerStrict\n      }, createElement(\"button\", {\n        className: styles$3.dialButtonStrict,\n        onClick: function onClick() {\n          return _this2.handleDial();\n        }\n      }, createElement(\"img\", {\n        src: callIconLarge\n      })));\n    } else if (props.appConfig.mode.includes('strict')) {\n      return null;\n    } else {\n      return createElement(\"div\", {\n        className: styles$3.dialstringContainer\n      }, createElement(\"input\", {\n        className: styles$3.dialInput,\n        onKeyPress: function onKeyPress(e) {\n          if (e.key === 'Enter') {\n            _this2.handleDial();\n\n            e.preventDefault();\n          }\n        },\n        placeholder: 'Enter the number to dial...',\n        onChange: function onChange(e) {\n          return _this2.setState({\n            currentDialString: e.target.value\n          });\n        }\n      }), createElement(\"button\", {\n        className: styles$3.dialButton,\n        disabled: this.checkDialstring(),\n        onClick: function onClick() {\n          return _this2.handleDial();\n        }\n      }, createElement(\"img\", {\n        src: callIcon\n      })));\n    }\n  };\n\n  return Dialstring;\n}(Component);\n\nvar mapStateToProps$9 = function mapStateToProps(state) {\n  return {\n    sipAccount: state.sipAccounts.sipAccount,\n    sessions: state.sipSessions.sessions,\n    started: state.config.appConfig.started,\n    attendedTransfersList: state.sipSessions.attendedTransfers\n  };\n};\n\nvar actions$8 = {\n  sessionsLimitReached: sessionsLimitReached\n};\nvar D = connect(mapStateToProps$9, actions$8)(Dialstring);\n\nvar sipSessions = function sipSessions(state, action) {\n  var _extends2, _extends3, _extends4;\n\n  if (state === void 0) {\n    state = {\n      sessions: {},\n      incomingCalls: [],\n      stateChanged: 0,\n      onHold: [],\n      attendedTransfers: []\n    };\n  }\n\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case INCOMING_CALL:\n      console.log('Incoming call');\n      return _extends(_extends({}, state), {}, {\n        sessions: _extends(_extends({}, state.sessions), {}, (_extends2 = {}, _extends2[payload.id] = payload, _extends2)),\n        incomingCalls: [].concat(state.incomingCalls, [payload.id])\n      });\n\n    case NEW_SESSION:\n      console.log('New session added');\n      return _extends(_extends({}, state), {}, {\n        sessions: _extends(_extends({}, state.sessions), {}, (_extends3 = {}, _extends3[payload.id] = payload, _extends3))\n      });\n\n    case NEW_ATTENDED_TRANSFER:\n      return _extends(_extends({}, state), {}, {\n        sessions: _extends(_extends({}, state.sessions), {}, (_extends4 = {}, _extends4[payload.id] = payload, _extends4)),\n        attendedTransfers: [].concat(state.attendedTransfers, [payload.id])\n      });\n\n    case SIPSESSION_ATTENDED_TRANSFER_CANCEL:\n    case SIPSESSION_ATTENDED_TRANSFER_FAIL:\n      {\n        var newAttendedTransfers = [].concat(state.attendedTransfers).filter(function (id) {\n          return id !== payload.id;\n        });\n        return _extends(_extends({}, state), {}, {\n          attendedTransfers: newAttendedTransfers\n        });\n      }\n\n    case ACCEPT_CALL:\n      {\n        var acceptedIncoming = [].concat(state.incomingCalls).filter(function (id) {\n          return id !== payload.id;\n        });\n        return _extends(_extends({}, state), {}, {\n          incomingCalls: acceptedIncoming\n        });\n      }\n\n    case DECLINE_CALL:\n      {\n        var declinedIncoming = [].concat(state.incomingCalls).filter(function (id) {\n          return id !== payload.id;\n        });\n\n        var declinedSessions = _extends({}, state.sessions);\n\n        delete declinedSessions[payload.id];\n        return _extends(_extends({}, state), {}, {\n          incomingCalls: declinedIncoming,\n          sessions: declinedSessions\n        });\n      }\n\n    case SIPSESSION_STATECHANGE:\n      {\n        return _extends(_extends({}, state), {}, {\n          stateChanged: state.stateChanged + 1\n        });\n      }\n\n    case CLOSE_SESSION:\n      {\n        var closedIncoming = [].concat(state.incomingCalls).filter(function (id) {\n          return id !== payload;\n        });\n\n        var newSessions = _extends({}, state.sessions);\n\n        delete newSessions[payload];\n        var endHold = [].concat(state.onHold).filter(function (id) {\n          return id !== payload;\n        });\n        return _extends(_extends({}, state), {}, {\n          sessions: newSessions,\n          incomingCalls: closedIncoming,\n          onHold: endHold\n        });\n      }\n\n    case SIPSESSION_HOLD_REQUEST:\n      {\n        return _extends(_extends({}, state), {}, {\n          onHold: [].concat(state.onHold, [payload])\n        });\n      }\n\n    case SIPSESSION_UNHOLD_REQUEST:\n      {\n        var newHold = [].concat(state.onHold).filter(function (id) {\n          return id !== payload;\n        });\n        return _extends(_extends({}, state), {}, {\n          onHold: newHold\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar NEW_USERAGENT = 'NEW_USERAGENT';\nvar NEW_ACCOUNT = 'NEW_ACCOUNT';\n\nvar setNewAccount = function setNewAccount(account) {\n  return {\n    type: NEW_ACCOUNT,\n    payload: account\n  };\n};\n\nvar sipAccounts = function sipAccounts(state, action) {\n  if (state === void 0) {\n    state = {\n      sipAccount: null,\n      userAgent: null,\n      status: ''\n    };\n  }\n\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case NEW_ACCOUNT:\n      return _extends(_extends({}, state), {}, {\n        sipAccount: action.payload\n      });\n\n    case NEW_USERAGENT:\n      return _extends(_extends({}, state), {}, {\n        userAgent: payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar device = function device(state, action) {\n  if (state === void 0) {\n    state = {\n      audioInput: [],\n      audioOutput: [],\n      primaryAudioOutput: 'default',\n      primaryAudioInput: 'default',\n      sinkId: true\n    };\n  }\n\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case AUDIO_INPUT_DEVICES_DETECTED:\n      return _extends(_extends({}, state), {}, {\n        audioInput: payload\n      });\n\n    case AUDIO_OUTPUT_DEVICES_DETECTED:\n      return _extends(_extends({}, state), {}, {\n        audioOutput: payload\n      });\n\n    case SET_PRIMARY_OUTPUT:\n      return _extends(_extends({}, state), {}, {\n        primaryAudioOutput: payload\n      });\n\n    case SET_PRIMARY_INPUT:\n      return _extends(_extends({}, state), {}, {\n        primaryAudioInput: payload\n      });\n\n    case AUDIO_SINKID_NOT_ALLOWED:\n      return _extends(_extends({}, state), {}, {\n        sinkId: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar config = function config(state, action) {\n  if (state === void 0) {\n    state = {\n      uri: '',\n      password: '',\n      phoneConfig: {},\n      appConfig: {\n        mode: '',\n        started: false,\n        appSize: ''\n      }\n    };\n  }\n\n  switch (action.type) {\n    case SET_PHONE_CONFIG:\n      return _extends(_extends({}, state), {}, {\n        phoneConfig: action.payload\n      });\n\n    case SET_CREDENTIALS:\n      return _extends(_extends({}, state), {}, {\n        uri: action.payload.uri,\n        password: action.payload.password\n      });\n\n    case SET_APP_CONFIG:\n      return _extends(_extends({}, state), {}, {\n        appConfig: action.payload\n      });\n\n    case STRICT_MODE_SHOW_CALL_BUTTON:\n      if (state.appConfig.mode === 'strict') {\n        return _extends(_extends({}, state), {}, {\n          appConfig: _extends(_extends({}, state.appConfig), {}, {\n            mode: 'strict',\n            started: true\n          })\n        });\n      }\n\n      return state;\n\n    case STRICT_MODE_HIDE_CALL_BUTTON:\n      if (state.appConfig.mode === 'strict') {\n        return _extends(_extends({}, state), {}, {\n          appConfig: _extends(_extends({}, state.appConfig), {}, {\n            mode: 'strict',\n            started: false\n          })\n        });\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nvar reducers = combineReducers({\n  sipAccounts: sipAccounts,\n  sipSessions: sipSessions,\n  device: device,\n  config: config\n});\nvar middleware = [thunk];\nvar persistConfig = {\n  key: 'root',\n  storage: storage,\n  whitelist: ['device']\n};\nvar persistedReducer = persistReducer(persistConfig, reducers);\nvar defaultStore = createStore(persistedReducer, composeWithDevTools(applyMiddleware.apply(void 0, middleware)));\nvar persistor = persistStore(defaultStore);\nvar phoneStore = defaultStore;\n\nvar IncomingSessionStateHandler = function IncomingSessionStateHandler(incomingSession) {\n  var _this = this;\n\n  this.stateChange = function (newState) {\n    switch (newState) {\n      case SessionState.Establishing:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        break;\n\n      case SessionState.Established:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        holdAll(_this.incomingSession.id);\n        setLocalAudio(_this.incomingSession);\n        setRemoteAudio(_this.incomingSession);\n        break;\n\n      case SessionState.Terminating:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        cleanupMedia(_this.incomingSession.id);\n        break;\n\n      case SessionState.Terminated:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        });\n        setTimeout(function () {\n          phoneStore.dispatch({\n            type: CLOSE_SESSION,\n            payload: _this.incomingSession.id\n          });\n        }, 5000);\n        break;\n\n      default:\n        console.log(\"Unknown session state change: \" + newState);\n        break;\n    }\n  };\n\n  this.incomingSession = incomingSession;\n};\n\nvar SIPAccount = /*#__PURE__*/function () {\n  function SIPAccount(sipConfig, sipCredentials) {\n    var _this = this;\n\n    this._config = sipConfig;\n    this._credentials = sipCredentials;\n    var uri = UserAgent.makeURI('sip:' + sipCredentials.sipuri);\n\n    if (!uri) {\n      throw new Error('Failed to create URI');\n    }\n\n    var transportOptions = {\n      server: sipConfig.websocket\n    };\n    var userAgentOptions = {\n      autoStart: false,\n      autoStop: true,\n      noAnswerTimeout: sipConfig.noAnswerTimeout || 30,\n      logBuiltinEnabled: process.env.NODE_ENV !== 'production',\n      logConfiguration: process.env.NODE_ENV !== 'production',\n      logLevel: process.env.NODE_ENV !== 'production' ? 'debug' : 'error',\n      authorizationPassword: sipCredentials.password,\n      userAgentString: 'OTF-react-sip-phone',\n      hackWssInTransport: true,\n      transportOptions: transportOptions,\n      uri: uri,\n      sessionDescriptionHandlerFactoryOptions: {\n        constraints: {\n          audio: {\n            deviceId: 'default'\n          },\n          video: false\n        },\n        alwaysAcquireMediaFirst: true,\n        iceCheckingTimeout: 500\n      }\n    };\n    var registererOptions = {\n      expires: 300,\n      logConfiguration: process.env.NODE_ENV !== 'production'\n    };\n    this._userAgent = new UserAgent(userAgentOptions);\n    this._registerer = new Registerer(this._userAgent, registererOptions);\n    this.setupDelegate();\n\n    this._userAgent.start().then(function () {\n      _this._registerer.register();\n\n      _this.setupRegistererListener();\n\n      phoneStore.dispatch({\n        type: NEW_USERAGENT,\n        payload: _this._userAgent\n      });\n    });\n  }\n\n  var _proto = SIPAccount.prototype;\n\n  _proto.setupDelegate = function setupDelegate() {\n    this._userAgent.delegate = {\n      onInvite: function onInvite(invitation) {\n        var incomingSession = invitation;\n        incomingSession.delegate = {\n          onRefer: function onRefer(referral) {\n            console.log(referral);\n          }\n        };\n        phoneStore.dispatch({\n          type: INCOMING_CALL,\n          payload: incomingSession\n        });\n        var stateHandler = new IncomingSessionStateHandler(incomingSession);\n        incomingSession.stateChange.addListener(stateHandler.stateChange);\n      }\n    };\n  };\n\n  _proto.setupRegistererListener = function setupRegistererListener() {\n    this._registerer.stateChange.addListener(function (newState) {\n      switch (newState) {\n        case RegistererState.Initial:\n          console.log('The user registration has initialized  ');\n          break;\n\n        case RegistererState.Registered:\n          console.log('The user is registered ');\n          break;\n\n        case RegistererState.Unregistered:\n          console.log('The user is unregistered ');\n          break;\n\n        case RegistererState.Terminated:\n          console.log('The user is terminated ');\n          break;\n      }\n    });\n  };\n\n  _proto.makeCall = function makeCall(number) {\n    var state = phoneStore.getState();\n    var sessionsLimit = state.config.phoneConfig.sessionsLimit;\n    var sessionsActiveObject = state.sipSessions.sessions;\n    var strictMode = state.config.appConfig.mode;\n    var attendedTransfersActive = state.sipSessions.attendedTransfers.length;\n    var sessionsActive = Object.keys(sessionsActiveObject).length;\n    var sessionDiff = sessionsActive - attendedTransfersActive;\n\n    if (sessionDiff >= sessionsLimit) {\n      phoneStore.dispatch({\n        type: SESSIONS_LIMIT_REACHED\n      });\n    } else {\n      var target = UserAgent.makeURI(\"sip:\" + getFullNumber(number) + \"@\" + this._credentials.sipuri.split('@')[1] + \";user=phone\");\n\n      if (strictMode === 'strict') {\n        phoneStore.dispatch({\n          type: STRICT_MODE_HIDE_CALL_BUTTON\n        });\n      }\n\n      if (target) {\n        console.log(\"Calling \" + number);\n        var inviter = new Inviter(this._userAgent, target);\n        var outgoingSession = inviter;\n        outgoingSession.delegate = {\n          onRefer: function onRefer(referral) {\n            console.log('Referred: ' + referral);\n          }\n        };\n        phoneStore.dispatch({\n          type: NEW_SESSION,\n          payload: outgoingSession\n        });\n        var stateHandler = new SessionStateHandler(outgoingSession, this._userAgent);\n        outgoingSession.stateChange.addListener(stateHandler.stateChange);\n        outgoingSession.invite().then(function () {\n          console.log('Invite sent!');\n        })[\"catch\"](function (error) {\n          console.log(error);\n        });\n      } else {\n        console.log(\"Failed to establish outgoing call session to \" + number);\n      }\n    }\n  };\n\n  _proto.listener = function listener() {};\n\n  return SIPAccount;\n}();\n\nvar SipWrapper = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(SipWrapper, _React$Component);\n\n  function SipWrapper() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = SipWrapper.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    console.log('mounted');\n\n    if (this.props.sipCredentials.password) {\n      this.initializeSip();\n    }\n  };\n\n  _proto.initializeSip = function initializeSip() {\n    var account = new SIPAccount(this.props.sipConfig, this.props.sipCredentials);\n    this.props.setNewAccount(account);\n    this.props.setPhoneConfig(this.props.phoneConfig);\n    this.props.setAppConfig(this.props.appConfig);\n  };\n\n  _proto.render = function render() {\n    return createElement(Fragment, null, this.props.children);\n  };\n\n  return SipWrapper;\n}(Component);\n\nvar mapStateToProps$a = function mapStateToProps() {\n  return {};\n};\n\nvar actions$9 = {\n  setNewAccount: setNewAccount,\n  setPhoneConfig: setPhoneConfig,\n  setCredentials: setCredentials,\n  setAppConfig: setAppConfig\n};\nvar SipWrapper$1 = connect(mapStateToProps$a, actions$9)(SipWrapper);\nvar phoneStore$1 = defaultStore;\n\nvar ReactSipPhone = function ReactSipPhone(_ref) {\n  var name = _ref.name,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 300 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 600 : _ref$height,\n      phoneConfig = _ref.phoneConfig,\n      sipConfig = _ref.sipConfig,\n      appConfig = _ref.appConfig,\n      sipCredentials = _ref.sipCredentials,\n      _ref$containerStyle = _ref.containerStyle,\n      containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle;\n  return createElement(Provider, {\n    store: phoneStore$1\n  }, createElement(PersistGate, {\n    loading: null,\n    persistor: persistor\n  }, createElement(SipWrapper$1, {\n    sipConfig: sipConfig,\n    sipCredentials: sipCredentials,\n    phoneConfig: phoneConfig,\n    appConfig: appConfig\n  }, createElement(\"div\", {\n    className: styles.container,\n    style: _extends(_extends({}, containerStyle), {}, {\n      width: (width < 300 ? 300 : width) + \"px\",\n      height: (height < 600 ? 600 : height) + \"px\"\n    })\n  }, createElement(Status$1, {\n    phoneConfig: phoneConfig,\n    appConfig: appConfig,\n    name: name\n  }), phoneConfig.disabledFeatures.includes('dialstring') ? null : createElement(D, {\n    sipConfig: sipConfig,\n    phoneConfig: phoneConfig,\n    appConfig: appConfig\n  }), createElement(PS, {\n    phoneConfig: phoneConfig\n  }), createElement(\"audio\", {\n    id: 'tone',\n    autoPlay: true\n  })))));\n};\n\nexport { ReactSipPhone, phoneStore$1 as phoneStore }; //# sourceMappingURL=index.modern.js.map","map":null,"metadata":{},"sourceType":"module"}