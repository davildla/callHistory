{"ast":null,"code":"/**\n * An {@link Emitter} implementation.\n * @internal\n */\nexport class EmitterImpl {\n  constructor() {\n    this.listeners = new Array();\n  }\n  /**\n   * Sets up a function that will be called whenever the target changes.\n   * @param listener - Callback function.\n   * @param options - An options object that specifies characteristics about the listener.\n   *                  If once true, indicates that the listener should be invoked at most once after being added.\n   *                  If once true, the listener would be automatically removed when invoked.\n   */\n\n\n  addListener(listener, options) {\n    const onceWrapper = data => {\n      this.removeListener(onceWrapper);\n      listener(data);\n    };\n\n    (options === null || options === void 0 ? void 0 : options.once) === true ? this.listeners.push(onceWrapper) : this.listeners.push(listener);\n  }\n  /**\n   * Emit change.\n   * @param data - Data to emit.\n   */\n\n\n  emit(data) {\n    this.listeners.slice().forEach(listener => listener(data));\n  }\n  /**\n   * Removes all listeners previously registered with addListener.\n   */\n\n\n  removeAllListeners() {\n    this.listeners = [];\n  }\n  /**\n   * Removes a listener previously registered with addListener.\n   * @param listener - Callback function.\n   */\n\n\n  removeListener(listener) {\n    this.listeners = this.listeners.filter(l => l !== listener);\n  }\n  /**\n   * Registers a listener.\n   * @param listener - Callback function.\n   * @deprecated Use addListener.\n   */\n\n\n  on(listener) {\n    return this.addListener(listener);\n  }\n  /**\n   * Unregisters a listener.\n   * @param listener - Callback function.\n   * @deprecated Use removeListener.\n   */\n\n\n  off(listener) {\n    return this.removeListener(listener);\n  }\n  /**\n   * Registers a listener then unregisters the listener after one event emission.\n   * @param listener - Callback function.\n   * @deprecated Use addListener.\n   */\n\n\n  once(listener) {\n    return this.addListener(listener, {\n      once: true\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}