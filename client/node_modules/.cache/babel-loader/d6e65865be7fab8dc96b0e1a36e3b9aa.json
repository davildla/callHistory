{"ast":null,"code":"import { C } from \"../messages/methods/constants.js\";\nimport { InviteClientTransaction } from \"../transactions/invite-client-transaction.js\";\nimport { UserAgentClient } from \"./user-agent-client.js\";\n/**\n * Re-INVITE UAC.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.1 UAC Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.1\n * @public\n */\n\nexport class ReInviteUserAgentClient extends UserAgentClient {\n  constructor(dialog, delegate, options) {\n    const message = dialog.createOutgoingRequestMessage(C.INVITE, options);\n    super(InviteClientTransaction, dialog.userAgentCore, message, delegate);\n    this.delegate = delegate;\n    dialog.signalingStateTransition(message); // FIXME: TODO: next line obviously needs to be improved...\n\n    dialog.reinviteUserAgentClient = this; // let the dialog know re-invite request sent\n\n    this.dialog = dialog;\n  }\n\n  receiveResponse(message) {\n    if (!this.authenticationGuard(message, this.dialog)) {\n      return;\n    }\n\n    const statusCode = message.statusCode ? message.statusCode.toString() : \"\";\n\n    if (!statusCode) {\n      throw new Error(\"Response status code undefined.\");\n    }\n\n    switch (true) {\n      case /^100$/.test(statusCode):\n        if (this.delegate && this.delegate.onTrying) {\n          this.delegate.onTrying({\n            message\n          });\n        }\n\n        break;\n\n      case /^1[0-9]{2}$/.test(statusCode):\n        if (this.delegate && this.delegate.onProgress) {\n          this.delegate.onProgress({\n            message,\n            session: this.dialog,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            prack: options => {\n              throw new Error(\"Unimplemented.\");\n            }\n          });\n        }\n\n        break;\n\n      case /^2[0-9]{2}$/.test(statusCode):\n        // Update dialog signaling state with offer/answer in body\n        this.dialog.signalingStateTransition(message);\n\n        if (this.delegate && this.delegate.onAccept) {\n          this.delegate.onAccept({\n            message,\n            session: this.dialog,\n            ack: options => {\n              const outgoingAckRequest = this.dialog.ack(options);\n              return outgoingAckRequest;\n            }\n          });\n        }\n\n        break;\n\n      case /^3[0-9]{2}$/.test(statusCode):\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n\n        if (this.delegate && this.delegate.onRedirect) {\n          this.delegate.onRedirect({\n            message\n          });\n        }\n\n        break;\n\n      case /^[4-6][0-9]{2}$/.test(statusCode):\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n\n        if (this.delegate && this.delegate.onReject) {\n          this.delegate.onReject({\n            message\n          });\n        } else {// If a UA receives a non-2xx final response to a re-INVITE, the session\n          // parameters MUST remain unchanged, as if no re-INVITE had been issued.\n          // Note that, as stated in Section 12.2.1.2, if the non-2xx final\n          // response is a 481 (Call/Transaction Does Not Exist), or a 408\n          // (Request Timeout), or no response at all is received for the re-\n          // INVITE (that is, a timeout is returned by the INVITE client\n          // transaction), the UAC will terminate the dialog.\n          //\n          // If a UAC receives a 491 response to a re-INVITE, it SHOULD start a\n          // timer with a value T chosen as follows:\n          //\n          //    1. If the UAC is the owner of the Call-ID of the dialog ID\n          //       (meaning it generated the value), T has a randomly chosen value\n          //       between 2.1 and 4 seconds in units of 10 ms.\n          //\n          //    2. If the UAC is not the owner of the Call-ID of the dialog ID, T\n          //       has a randomly chosen value of between 0 and 2 seconds in units\n          //       of 10 ms.\n          //\n          // When the timer fires, the UAC SHOULD attempt the re-INVITE once more,\n          // if it still desires for that session modification to take place.  For\n          // example, if the call was already hung up with a BYE, the re-INVITE\n          // would not take place.\n          // https://tools.ietf.org/html/rfc3261#section-14.1\n          // FIXME: TODO: The above.\n        }\n\n        break;\n\n      default:\n        throw new Error(`Invalid status code ${statusCode}`);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}