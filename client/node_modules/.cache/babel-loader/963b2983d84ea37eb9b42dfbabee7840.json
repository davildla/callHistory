{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\n\nvar events_1 = require(\"events\");\n\nvar connection_1 = require(\"../connection\");\n\nvar device_1 = require(\"../device\");\n\nvar errors_1 = require(\"../errors\");\n\nvar stats_1 = require(\"../rtc/stats\");\n\nvar _a = require('../constants'),\n    COWBELL_AUDIO_URL = _a.COWBELL_AUDIO_URL,\n    ECHO_TEST_DURATION = _a.ECHO_TEST_DURATION;\n/**\n * Runs some tests to identify issues, if any, prohibiting successful calling.\n */\n\n\nvar PreflightTest =\n/** @class */\nfunction (_super) {\n  __extends(PreflightTest, _super);\n  /**\n   * Construct a {@link PreflightTest} instance.\n   * @constructor\n   * @param token - A Twilio JWT token string.\n   * @param options\n   */\n\n\n  function PreflightTest(token, options) {\n    var _this = _super.call(this) || this;\n    /**\n     * Whether this test has already logged an insights-connection-warning.\n     */\n\n\n    _this._hasInsightsErrored = false;\n    /**\n     * Network related timing measurements for this test\n     */\n\n    _this._networkTiming = {};\n    /**\n     * The options passed to {@link PreflightTest} constructor\n     */\n\n    _this._options = {\n      codecPreferences: [connection_1.default.Codec.PCMU, connection_1.default.Codec.Opus],\n      debug: false,\n      edge: 'roaming',\n      fakeMicInput: false,\n      signalingTimeoutMs: 10000\n    };\n    /**\n     * Current status of this test\n     */\n\n    _this._status = PreflightTest.Status.Connecting;\n    Object.assign(_this._options, options);\n    _this._samples = [];\n    _this._warnings = [];\n    _this._startTime = Date.now();\n\n    _this._initDevice(token, __assign(__assign({}, _this._options), {\n      fileInputStream: _this._options.fakeMicInput ? _this._getStreamFromFile() : undefined\n    }));\n\n    return _this;\n  }\n  /**\n   * Stops the current test and raises a failed event.\n   */\n\n\n  PreflightTest.prototype.stop = function () {\n    var _this = this;\n\n    var error = {\n      code: 31008,\n      message: 'Call cancelled'\n    };\n\n    if (this._device) {\n      this._device.once('offline', function () {\n        return _this._onFailed(error);\n      });\n\n      this._device.destroy();\n    } else {\n      this._onFailed(error);\n    }\n  };\n  /**\n   * Emit a {PreflightTest.Warning}\n   */\n\n\n  PreflightTest.prototype._emitWarning = function (name, description, rtcWarning) {\n    var warning = {\n      name: name,\n      description: description\n    };\n\n    if (rtcWarning) {\n      warning.rtcWarning = rtcWarning;\n    }\n\n    this._warnings.push(warning);\n\n    this.emit(PreflightTest.Events.Warning, warning);\n  };\n  /**\n   * Returns call quality base on the RTC Stats\n   */\n\n\n  PreflightTest.prototype._getCallQuality = function (mos) {\n    if (mos > 4.2) {\n      return PreflightTest.CallQuality.Excellent;\n    } else if (mos >= 4.1 && mos <= 4.2) {\n      return PreflightTest.CallQuality.Great;\n    } else if (mos >= 3.7 && mos <= 4) {\n      return PreflightTest.CallQuality.Good;\n    } else if (mos >= 3.1 && mos <= 3.6) {\n      return PreflightTest.CallQuality.Fair;\n    } else {\n      return PreflightTest.CallQuality.Degraded;\n    }\n  };\n  /**\n   * Returns the report for this test.\n   */\n\n\n  PreflightTest.prototype._getReport = function () {\n    var stats = this._getRTCStats();\n\n    var testTiming = {\n      start: this._startTime\n    };\n\n    if (this._endTime) {\n      testTiming.end = this._endTime;\n      testTiming.duration = this._endTime - this._startTime;\n    }\n\n    var report = {\n      callSid: this._callSid,\n      edge: this._edge,\n      iceCandidateStats: this._rtcIceCandidateStatsReport.iceCandidateStats,\n      networkTiming: this._networkTiming,\n      samples: this._samples,\n      selectedEdge: this._options.edge,\n      stats: stats,\n      testTiming: testTiming,\n      totals: this._getRTCSampleTotals(),\n      warnings: this._warnings\n    };\n    var selectedIceCandidatePairStats = this._rtcIceCandidateStatsReport.selectedIceCandidatePairStats;\n\n    if (selectedIceCandidatePairStats) {\n      report.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n      report.isTurnRequired = selectedIceCandidatePairStats.localCandidate.candidateType === 'relay' || selectedIceCandidatePairStats.remoteCandidate.candidateType === 'relay';\n    }\n\n    if (stats) {\n      report.callQuality = this._getCallQuality(stats.mos.average);\n    }\n\n    return report;\n  };\n  /**\n   * Returns RTC stats totals for this test\n   */\n\n\n  PreflightTest.prototype._getRTCSampleTotals = function () {\n    if (!this._latestSample) {\n      return;\n    }\n\n    return __assign({}, this._latestSample.totals);\n  };\n  /**\n   * Returns RTC related stats captured during the test call\n   */\n\n\n  PreflightTest.prototype._getRTCStats = function () {\n    var firstMosSampleIdx = this._samples.findIndex(function (sample) {\n      return typeof sample.mos === 'number' && sample.mos > 0;\n    });\n\n    var samples = firstMosSampleIdx >= 0 ? this._samples.slice(firstMosSampleIdx) : [];\n\n    if (!samples || !samples.length) {\n      return;\n    }\n\n    return ['jitter', 'mos', 'rtt'].reduce(function (statObj, stat) {\n      var _a;\n\n      var values = samples.map(function (s) {\n        return s[stat];\n      });\n      return __assign(__assign({}, statObj), (_a = {}, _a[stat] = {\n        average: Number((values.reduce(function (total, value) {\n          return total + value;\n        }) / values.length).toPrecision(5)),\n        max: Math.max.apply(Math, values),\n        min: Math.min.apply(Math, values)\n      }, _a));\n    }, {});\n  };\n  /**\n   * Returns a MediaStream from a media file\n   */\n\n\n  PreflightTest.prototype._getStreamFromFile = function () {\n    var audioContext = this._options.audioContext;\n\n    if (!audioContext) {\n      throw new errors_1.NotSupportedError('Cannot fake input audio stream: AudioContext is not supported by this browser.');\n    }\n\n    var audioEl = new Audio(COWBELL_AUDIO_URL);\n    audioEl.addEventListener('canplaythrough', function () {\n      return audioEl.play();\n    });\n\n    if (typeof audioEl.setAttribute === 'function') {\n      audioEl.setAttribute('crossorigin', 'anonymous');\n    }\n\n    var src = audioContext.createMediaElementSource(audioEl);\n    var dest = audioContext.createMediaStreamDestination();\n    src.connect(dest);\n    return dest.stream;\n  };\n  /**\n   * Initialize the device\n   */\n\n\n  PreflightTest.prototype._initDevice = function (token, options) {\n    var _this = this;\n\n    try {\n      this._device = new (options.deviceFactory || device_1.default)(token, {\n        codecPreferences: options.codecPreferences,\n        debug: options.debug,\n        edge: options.edge,\n        fileInputStream: options.fileInputStream,\n        iceServers: options.iceServers,\n        preflight: true,\n        rtcConfiguration: options.rtcConfiguration\n      });\n    } catch (error) {\n      // We want to return before failing so the consumer can capture the event\n      setTimeout(function () {\n        _this._onFailed(error);\n      });\n      return;\n    }\n\n    this._device.once('ready', function () {\n      _this._onDeviceReady();\n    });\n\n    this._device.once('error', function (error) {\n      _this._onDeviceError(error);\n    });\n\n    this._signalingTimeoutTimer = setTimeout(function () {\n      _this._onDeviceError({\n        code: 31901,\n        message: 'WebSocket - Connection Timeout'\n      });\n    }, options.signalingTimeoutMs);\n  };\n  /**\n   * Called on {@link Device} error event\n   * @param error\n   */\n\n\n  PreflightTest.prototype._onDeviceError = function (error) {\n    this._device.destroy();\n\n    this._onFailed(error);\n  };\n  /**\n   * Called on {@link Device} ready event\n   */\n\n\n  PreflightTest.prototype._onDeviceReady = function () {\n    var _this = this;\n\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n    this._connection = this._device.connect();\n    this._networkTiming.signaling = {\n      start: Date.now()\n    };\n\n    this._setupConnectionHandlers(this._connection);\n\n    this._edge = this._device.edge || undefined;\n\n    if (this._options.fakeMicInput) {\n      this._echoTimer = setTimeout(function () {\n        return _this._device.disconnectAll();\n      }, ECHO_TEST_DURATION);\n      var audio = this._device.audio;\n\n      if (audio) {\n        audio.disconnect(false);\n        audio.outgoing(false);\n      }\n    }\n\n    this._device.once('disconnect', function () {\n      _this._device.once('offline', function () {\n        return _this._onOffline();\n      });\n\n      _this._device.destroy();\n    });\n\n    var publisher = this._connection['_publisher'];\n    publisher.on('error', function () {\n      if (!_this._hasInsightsErrored) {\n        _this._emitWarning('insights-connection-error', 'Received an error when attempting to connect to Insights gateway');\n      }\n\n      _this._hasInsightsErrored = true;\n    });\n  };\n  /**\n   * Called when there is a fatal error\n   * @param error\n   */\n\n\n  PreflightTest.prototype._onFailed = function (error) {\n    clearTimeout(this._echoTimer);\n    clearTimeout(this._signalingTimeoutTimer);\n\n    this._releaseHandlers();\n\n    this._endTime = Date.now();\n    this._status = PreflightTest.Status.Failed;\n    this.emit(PreflightTest.Events.Failed, error);\n  };\n  /**\n   * Called when the device goes offline.\n   * This indicates that the test has been completed, but we won't know if it failed or not.\n   * The onError event will be the indicator whether the test failed.\n   */\n\n\n  PreflightTest.prototype._onOffline = function () {\n    var _this = this; // We need to make sure we always execute preflight.on('completed') last\n    // as client SDK sometimes emits 'offline' event before emitting fatal errors.\n\n\n    setTimeout(function () {\n      if (_this._status === PreflightTest.Status.Failed) {\n        return;\n      }\n\n      clearTimeout(_this._echoTimer);\n      clearTimeout(_this._signalingTimeoutTimer);\n\n      _this._releaseHandlers();\n\n      _this._endTime = Date.now();\n      _this._status = PreflightTest.Status.Completed;\n      _this._report = _this._getReport();\n\n      _this.emit(PreflightTest.Events.Completed, _this._report);\n    }, 10);\n  };\n  /**\n   * Clean up all handlers for device and connection\n   */\n\n\n  PreflightTest.prototype._releaseHandlers = function () {\n    [this._device, this._connection].forEach(function (emitter) {\n      if (emitter) {\n        emitter.eventNames().forEach(function (name) {\n          return emitter.removeAllListeners(name);\n        });\n      }\n    });\n  };\n  /**\n   * Setup the event handlers for the {@link Connection} of the test call\n   * @param connection\n   */\n\n\n  PreflightTest.prototype._setupConnectionHandlers = function (connection) {\n    var _this = this;\n\n    if (this._options.fakeMicInput) {\n      // When volume events start emitting, it means all audio outputs have been created.\n      // Let's mute them if we're using fake mic input.\n      connection.once('volume', function () {\n        connection.mediaStream.outputs.forEach(function (output) {\n          return output.audio.muted = true;\n        });\n      });\n    }\n\n    connection.on('warning', function (name, data) {\n      _this._emitWarning(name, 'Received an RTCWarning. See .rtcWarning for the RTCWarning', data);\n    });\n    connection.once('accept', function () {\n      _this._callSid = connection.mediaStream.callSid;\n      _this._status = PreflightTest.Status.Connected;\n\n      _this.emit(PreflightTest.Events.Connected);\n    });\n    connection.on('sample', function (sample) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!!this._latestSample) return [3\n              /*break*/\n              , 2];\n              _a = this;\n              return [4\n              /*yield*/\n              , (this._options.getRTCIceCandidateStatsReport || stats_1.getRTCIceCandidateStatsReport)(connection.mediaStream.version.pc)];\n\n            case 1:\n              _a._rtcIceCandidateStatsReport = _b.sent();\n              _b.label = 2;\n\n            case 2:\n              this._latestSample = sample;\n\n              this._samples.push(sample);\n\n              this.emit(PreflightTest.Events.Sample, sample);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }); // TODO: Update the following once the SDK supports emitting these events\n    // Let's shim for now\n\n    [{\n      reportLabel: 'peerConnection',\n      type: 'pcconnection'\n    }, {\n      reportLabel: 'ice',\n      type: 'iceconnection'\n    }, {\n      reportLabel: 'dtls',\n      type: 'dtlstransport'\n    }, {\n      reportLabel: 'signaling',\n      type: 'signaling'\n    }].forEach(function (_a) {\n      var type = _a.type,\n          reportLabel = _a.reportLabel;\n      var handlerName = \"on\" + type + \"statechange\";\n      var originalHandler = connection.mediaStream[handlerName];\n\n      connection.mediaStream[handlerName] = function (state) {\n        var timing = _this._networkTiming[reportLabel] = _this._networkTiming[reportLabel] || {\n          start: 0\n        };\n\n        if (state === 'connecting' || state === 'checking') {\n          timing.start = Date.now();\n        } else if ((state === 'connected' || state === 'stable') && !timing.duration) {\n          timing.end = Date.now();\n          timing.duration = timing.end - timing.start;\n        }\n\n        originalHandler(state);\n      };\n    });\n  };\n\n  Object.defineProperty(PreflightTest.prototype, \"callSid\", {\n    /**\n     * The callsid generated for the test call.\n     */\n    get: function () {\n      return this._callSid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"endTime\", {\n    /**\n     * A timestamp in milliseconds of when the test ended.\n     */\n    get: function () {\n      return this._endTime;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"latestSample\", {\n    /**\n     * The latest WebRTC sample collected.\n     */\n    get: function () {\n      return this._latestSample;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"report\", {\n    /**\n     * The report for this test.\n     */\n    get: function () {\n      return this._report;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"startTime\", {\n    /**\n     * A timestamp in milliseconds of when the test started.\n     */\n    get: function () {\n      return this._startTime;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PreflightTest.prototype, \"status\", {\n    /**\n     * The status of the test.\n     */\n    get: function () {\n      return this._status;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PreflightTest;\n}(events_1.EventEmitter);\n\nexports.PreflightTest = PreflightTest;\n\n(function (PreflightTest) {\n  /**\n   * The quality of the call determined by different mos ranges.\n   * Mos is calculated base on the WebRTC stats - rtt, jitter, and packet lost.\n   */\n  var CallQuality;\n\n  (function (CallQuality) {\n    /**\n     * If the average mos is over 4.2.\n     */\n    CallQuality[\"Excellent\"] = \"excellent\";\n    /**\n     * If the average mos is between 4.1 and 4.2 both inclusive.\n     */\n\n    CallQuality[\"Great\"] = \"great\";\n    /**\n     * If the average mos is between 3.7 and 4.0 both inclusive.\n     */\n\n    CallQuality[\"Good\"] = \"good\";\n    /**\n     * If the average mos is between 3.1 and 3.6 both inclusive.\n     */\n\n    CallQuality[\"Fair\"] = \"fair\";\n    /**\n     * If the average mos is 3.0 or below.\n     */\n\n    CallQuality[\"Degraded\"] = \"degraded\";\n  })(CallQuality = PreflightTest.CallQuality || (PreflightTest.CallQuality = {}));\n  /**\n   * Possible events that a [[PreflightTest]] might emit.\n   */\n\n\n  var Events;\n\n  (function (Events) {\n    /**\n     * See [[PreflightTest.completedEvent]]\n     */\n    Events[\"Completed\"] = \"completed\";\n    /**\n     * See [[PreflightTest.connectedEvent]]\n     */\n\n    Events[\"Connected\"] = \"connected\";\n    /**\n     * See [[PreflightTest.failedEvent]]\n     */\n\n    Events[\"Failed\"] = \"failed\";\n    /**\n     * See [[PreflightTest.sampleEvent]]\n     */\n\n    Events[\"Sample\"] = \"sample\";\n    /**\n     * See [[PreflightTest.warningEvent]]\n     */\n\n    Events[\"Warning\"] = \"warning\";\n  })(Events = PreflightTest.Events || (PreflightTest.Events = {}));\n  /**\n   * Possible status of the test.\n   */\n\n\n  var Status;\n\n  (function (Status) {\n    /**\n     * Connection to Twilio has initiated.\n     */\n    Status[\"Connecting\"] = \"connecting\";\n    /**\n     * Connection to Twilio has been established.\n     */\n\n    Status[\"Connected\"] = \"connected\";\n    /**\n     * The connection to Twilio has been disconnected and the test call has completed.\n     */\n\n    Status[\"Completed\"] = \"completed\";\n    /**\n     * The test has stopped and failed.\n     */\n\n    Status[\"Failed\"] = \"failed\";\n  })(Status = PreflightTest.Status || (PreflightTest.Status = {}));\n})(PreflightTest = exports.PreflightTest || (exports.PreflightTest = {}));\n\nexports.PreflightTest = PreflightTest; //# sourceMappingURL=preflight.js.map","map":null,"metadata":{},"sourceType":"script"}