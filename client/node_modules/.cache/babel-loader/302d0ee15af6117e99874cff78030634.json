{"ast":null,"code":"\"use strict\";\n\nvar _a, _b, _c, _d;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\n\nvar errors_1 = require(\"./errors\");\n/**\n * Valid deprecated regions.\n * @private\n */\n\n\nvar DeprecatedRegion;\n\n(function (DeprecatedRegion) {\n  DeprecatedRegion[\"Au\"] = \"au\";\n  DeprecatedRegion[\"Br\"] = \"br\";\n  DeprecatedRegion[\"Ie\"] = \"ie\";\n  DeprecatedRegion[\"Jp\"] = \"jp\";\n  DeprecatedRegion[\"Sg\"] = \"sg\";\n  DeprecatedRegion[\"UsOr\"] = \"us-or\";\n  DeprecatedRegion[\"UsVa\"] = \"us-va\";\n})(DeprecatedRegion = exports.DeprecatedRegion || (exports.DeprecatedRegion = {}));\n/**\n * Valid edges.\n * @private\n */\n\n\nvar Edge;\n\n(function (Edge) {\n  /**\n   * Public edges\n   */\n  Edge[\"Sydney\"] = \"sydney\";\n  Edge[\"SaoPaulo\"] = \"sao-paulo\";\n  Edge[\"Dublin\"] = \"dublin\";\n  Edge[\"Frankfurt\"] = \"frankfurt\";\n  Edge[\"Tokyo\"] = \"tokyo\";\n  Edge[\"Singapore\"] = \"singapore\";\n  Edge[\"Ashburn\"] = \"ashburn\";\n  Edge[\"Umatilla\"] = \"umatilla\";\n  Edge[\"Roaming\"] = \"roaming\";\n  /**\n   * Interconnect edges\n   */\n\n  Edge[\"AshburnIx\"] = \"ashburn-ix\";\n  Edge[\"SanJoseIx\"] = \"san-jose-ix\";\n  Edge[\"LondonIx\"] = \"london-ix\";\n  Edge[\"FrankfurtIx\"] = \"frankfurt-ix\";\n  Edge[\"SingaporeIx\"] = \"singapore-ix\";\n  Edge[\"SydneyIx\"] = \"sydney-ix\";\n  Edge[\"TokyoIx\"] = \"tokyo-ix\";\n})(Edge = exports.Edge || (exports.Edge = {}));\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\n\n\nvar Region;\n\n(function (Region) {\n  Region[\"Au1\"] = \"au1\";\n  Region[\"Au1Ix\"] = \"au1-ix\";\n  Region[\"Br1\"] = \"br1\";\n  Region[\"De1\"] = \"de1\";\n  Region[\"De1Ix\"] = \"de1-ix\";\n  Region[\"Gll\"] = \"gll\";\n  Region[\"Ie1\"] = \"ie1\";\n  Region[\"Ie1Ix\"] = \"ie1-ix\";\n  Region[\"Ie1Tnx\"] = \"ie1-tnx\";\n  Region[\"Jp1\"] = \"jp1\";\n  Region[\"Jp1Ix\"] = \"jp1-ix\";\n  Region[\"Sg1\"] = \"sg1\";\n  Region[\"Sg1Ix\"] = \"sg1-ix\";\n  Region[\"Sg1Tnx\"] = \"sg1-tnx\";\n  Region[\"Us1\"] = \"us1\";\n  Region[\"Us1Ix\"] = \"us1-ix\";\n  Region[\"Us1Tnx\"] = \"us1-tnx\";\n  Region[\"Us2\"] = \"us2\";\n  Region[\"Us2Ix\"] = \"us2-ix\";\n  Region[\"Us2Tnx\"] = \"us2-tnx\";\n})(Region = exports.Region || (exports.Region = {}));\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\n\n\nexports.deprecatedRegions = (_a = {}, _a[DeprecatedRegion.Au] = Region.Au1, _a[DeprecatedRegion.Br] = Region.Br1, _a[DeprecatedRegion.Ie] = Region.Ie1, _a[DeprecatedRegion.Jp] = Region.Jp1, _a[DeprecatedRegion.Sg] = Region.Sg1, _a[DeprecatedRegion.UsOr] = Region.Us1, _a[DeprecatedRegion.UsVa] = Region.Us1, _a);\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\n\nexports.regionShortcodes = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2\n};\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\n\nvar regionURIs = (_b = {}, _b[Region.Au1] = 'chunderw-vpc-gll-au1.twilio.com', _b[Region.Au1Ix] = 'chunderw-vpc-gll-au1-ix.twilio.com', _b[Region.Br1] = 'chunderw-vpc-gll-br1.twilio.com', _b[Region.De1] = 'chunderw-vpc-gll-de1.twilio.com', _b[Region.De1Ix] = 'chunderw-vpc-gll-de1-ix.twilio.com', _b[Region.Gll] = 'chunderw-vpc-gll.twilio.com', _b[Region.Ie1] = 'chunderw-vpc-gll-ie1.twilio.com', _b[Region.Ie1Ix] = 'chunderw-vpc-gll-ie1-ix.twilio.com', _b[Region.Ie1Tnx] = 'chunderw-vpc-gll-ie1-tnx.twilio.com', _b[Region.Jp1] = 'chunderw-vpc-gll-jp1.twilio.com', _b[Region.Jp1Ix] = 'chunderw-vpc-gll-jp1-ix.twilio.com', _b[Region.Sg1] = 'chunderw-vpc-gll-sg1.twilio.com', _b[Region.Sg1Ix] = 'chunderw-vpc-gll-sg1-ix.twilio.com', _b[Region.Sg1Tnx] = 'chunderw-vpc-gll-sg1-tnx.twilio.com', _b[Region.Us1] = 'chunderw-vpc-gll-us1.twilio.com', _b[Region.Us1Ix] = 'chunderw-vpc-gll-us1-ix.twilio.com', _b[Region.Us1Tnx] = 'chunderw-vpc-gll-us1-tnx.twilio.com', _b[Region.Us2] = 'chunderw-vpc-gll-us2.twilio.com', _b[Region.Us2Ix] = 'chunderw-vpc-gll-us2-ix.twilio.com', _b[Region.Us2Tnx] = 'chunderw-vpc-gll-us2-tnx.twilio.com', _b);\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\n\nexports.edgeToRegion = (_c = {}, _c[Edge.Sydney] = Region.Au1, _c[Edge.SaoPaulo] = Region.Br1, _c[Edge.Dublin] = Region.Ie1, _c[Edge.Frankfurt] = Region.De1, _c[Edge.Tokyo] = Region.Jp1, _c[Edge.Singapore] = Region.Sg1, _c[Edge.Ashburn] = Region.Us1, _c[Edge.Umatilla] = Region.Us2, _c[Edge.Roaming] = Region.Gll,\n/**\n * Interconnect edges\n */\n_c[Edge.AshburnIx] = Region.Us1Ix, _c[Edge.SanJoseIx] = Region.Us2Ix, _c[Edge.LondonIx] = Region.Ie1Ix, _c[Edge.FrankfurtIx] = Region.De1Ix, _c[Edge.SingaporeIx] = Region.Sg1Ix, _c[Edge.SydneyIx] = Region.Au1Ix, _c[Edge.TokyoIx] = Region.Jp1Ix, _c);\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\n\nexports.regionToEdge = (_d = {}, _d[Region.Au1] = Edge.Sydney, _d[Region.Br1] = Edge.SaoPaulo, _d[Region.Ie1] = Edge.Dublin, _d[Region.De1] = Edge.Frankfurt, _d[Region.Jp1] = Edge.Tokyo, _d[Region.Sg1] = Edge.Singapore, _d[Region.Us1] = Edge.Ashburn, _d[Region.Us2] = Edge.Umatilla, _d[Region.Gll] = Edge.Roaming,\n/**\n * Interconnect edges\n */\n_d[Region.Us1Ix] = Edge.AshburnIx, _d[Region.Us2Ix] = Edge.SanJoseIx, _d[Region.Ie1Ix] = Edge.LondonIx, _d[Region.De1Ix] = Edge.FrankfurtIx, _d[Region.Sg1Ix] = Edge.SingaporeIx, _d[Region.Au1Ix] = Edge.SydneyIx, _d[Region.Jp1Ix] = Edge.TokyoIx,\n/**\n * Tnx regions\n */\n_d[Region.Us1Tnx] = Edge.AshburnIx, _d[Region.Us2Tnx] = Edge.AshburnIx, _d[Region.Ie1Tnx] = Edge.LondonIx, _d[Region.Sg1Tnx] = Edge.SingaporeIx, _d);\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\n\nexports.defaultRegion = 'gll';\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\n\nexports.defaultEdge = Edge.Roaming;\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\n\nexports.defaultChunderRegionURI = 'chunderw-vpc-gll.twilio.com';\n/**\n * The default event gateway URI to publish to.\n * @constant\n * @private\n */\n\nvar defaultEventGatewayURI = 'eventgw.twilio.com';\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\n\nfunction createChunderRegionURI(region) {\n  return region === exports.defaultRegion ? exports.defaultChunderRegionURI : \"chunderw-vpc-gll-\" + region + \".twilio.com\";\n}\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\n\n\nfunction createChunderEdgeURI(edge) {\n  return \"voice-js.\" + edge + \".twilio.com\";\n}\n/**\n * String template for a region insights URI\n * @param region - The region.\n */\n\n\nfunction createEventGatewayURI(region) {\n  return region ? \"eventgw.\" + region + \".twilio.com\" : defaultEventGatewayURI;\n}\n\nexports.createEventGatewayURI = createEventGatewayURI;\n/**\n * Create a signaling endpoint URL to connect a websocket to from a chunder URI.\n * @param uri the chunder URI to create a signaling endpoint URL for\n */\n\nfunction createSignalingEndpointURL(uri) {\n  return \"wss://\" + uri + \"/signal\";\n}\n\nexports.createSignalingEndpointURL = createSignalingEndpointURL;\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\n\nfunction getChunderURIs(edge, region, onDeprecated) {\n  if (!!region && typeof region !== 'string') {\n    throw new errors_1.InvalidArgumentError('If `region` is provided, it must be of type `string`.');\n  }\n\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new errors_1.InvalidArgumentError('If `edge` is provided, it must be of type `string` or an array of strings.');\n  }\n\n  var deprecatedMessages = [];\n  var uris;\n\n  if (region && edge) {\n    throw new errors_1.InvalidArgumentError('You cannot specify `region` when `edge` is specified in' + '`Twilio.Device.Options`.');\n  } else if (region) {\n    var chunderRegion = region;\n    deprecatedMessages.push('Regions are deprecated in favor of edges. Please see this page for ' + 'documentation: https://www.twilio.com/docs/voice/client/edges.');\n    var isDeprecatedRegion = Object.values(DeprecatedRegion).includes(chunderRegion);\n\n    if (isDeprecatedRegion) {\n      chunderRegion = exports.deprecatedRegions[chunderRegion];\n    }\n\n    var isKnownRegion = Object.values(Region).includes(chunderRegion);\n\n    if (isKnownRegion) {\n      var preferredEdge = exports.regionToEdge[chunderRegion];\n      deprecatedMessages.push(\"Region \\\"\" + chunderRegion + \"\\\" is deprecated, please use `edge` \" + (\"\\\"\" + preferredEdge + \"\\\".\"));\n    }\n\n    uris = [createChunderRegionURI(chunderRegion)];\n  } else if (edge) {\n    var edgeValues_1 = Object.values(Edge);\n    var edgeParams = Array.isArray(edge) ? edge : [edge];\n    uris = edgeParams.map(function (param) {\n      return edgeValues_1.includes(param) ? createChunderRegionURI(exports.edgeToRegion[param]) : createChunderEdgeURI(param);\n    });\n  } else {\n    uris = [exports.defaultChunderRegionURI];\n  }\n\n  if (onDeprecated && deprecatedMessages.length) {\n    setTimeout(function () {\n      return onDeprecated(deprecatedMessages.join('\\n'));\n    });\n  }\n\n  return uris;\n}\n\nexports.getChunderURIs = getChunderURIs;\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\n\nfunction getRegionShortcode(region) {\n  return exports.regionShortcodes[region] || null;\n}\n\nexports.getRegionShortcode = getRegionShortcode;","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;AAKA;AAEA;;;;;;AAIA,IAAYA,gBAAZ;;AAAA,WAAYA,gBAAZ,EAA4B;EAC1BA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CARD,EAAYA,gBAAgB,GAAhBC,wDAAgB,EAAhB,CAAZ;AAUA;;;;;;AAIA,IAAYC,IAAZ;;AAAA,WAAYA,IAAZ,EAAgB;EACd;;;EAGAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACA;;;;EAGAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CAvBD,EAAYA,IAAI,GAAJD,gCAAI,EAAJ,CAAZ;AAyBA;;;;;;;;;;;;;;;;;;AAgBA,IAAYE,MAAZ;;AAAA,WAAYA,MAAZ,EAAkB;EAChBA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CArBD,EAAYA,MAAM,GAANF,oCAAM,EAAN,CAAZ;AA6BA;;;;;;AAIaA,6BAAiBG,SAC5BA,GAACJ,gBAAgB,CAACK,EAAlB,IAAuBF,MAAM,CAACG,GADF,EAE5BF,GAACJ,gBAAgB,CAACO,EAAlB,IAAuBJ,MAAM,CAACK,GAFF,EAG5BJ,GAACJ,gBAAgB,CAACS,EAAlB,IAAuBN,MAAM,CAACO,GAHF,EAI5BN,GAACJ,gBAAgB,CAACW,EAAlB,IAAuBR,MAAM,CAACS,GAJF,EAK5BR,GAACJ,gBAAgB,CAACa,EAAlB,IAAuBV,MAAM,CAACW,GALF,EAM5BV,GAACJ,gBAAgB,CAACe,IAAlB,IAAyBZ,MAAM,CAACa,GANJ,EAO5BZ,GAACJ,gBAAgB,CAACiB,IAAlB,IAAyBd,MAAM,CAACa,GAPJ,IAAjB;AAUb;;;;;AAIaf,2BAAgD;EAC3DiB,iBAAiB,EAAEf,MAAM,CAACW,GADiC;EAE3DK,cAAc,EAAEhB,MAAM,CAACG,GAFoC;EAG3Dc,aAAa,EAAEjB,MAAM,CAACS,GAHqC;EAI3DS,YAAY,EAAElB,MAAM,CAACmB,GAJsC;EAK3DC,UAAU,EAAEpB,MAAM,CAACO,GALwC;EAM3Dc,uBAAuB,EAAErB,MAAM,CAACK,GAN2B;EAO3DiB,gBAAgB,EAAEtB,MAAM,CAACa,GAPkC;EAQ3DU,cAAc,EAAEvB,MAAM,CAACwB;AARoC,CAAhD;AAWb;;;;;AAIA,IAAMC,UAAU,aACdC,GAAC1B,MAAM,CAACG,GAAR,IAAc,iCADA,EAEduB,GAAC1B,MAAM,CAAC2B,KAAR,IAAgB,oCAFF,EAGdD,GAAC1B,MAAM,CAACK,GAAR,IAAc,iCAHA,EAIdqB,GAAC1B,MAAM,CAACmB,GAAR,IAAc,iCAJA,EAKdO,GAAC1B,MAAM,CAAC4B,KAAR,IAAgB,oCALF,EAMdF,GAAC1B,MAAM,CAAC6B,GAAR,IAAc,6BANA,EAOdH,GAAC1B,MAAM,CAACO,GAAR,IAAc,iCAPA,EAQdmB,GAAC1B,MAAM,CAAC8B,KAAR,IAAgB,oCARF,EASdJ,GAAC1B,MAAM,CAAC+B,MAAR,IAAiB,qCATH,EAUdL,GAAC1B,MAAM,CAACS,GAAR,IAAc,iCAVA,EAWdiB,GAAC1B,MAAM,CAACgC,KAAR,IAAgB,oCAXF,EAYdN,GAAC1B,MAAM,CAACW,GAAR,IAAc,iCAZA,EAade,GAAC1B,MAAM,CAACiC,KAAR,IAAgB,oCAbF,EAcdP,GAAC1B,MAAM,CAACkC,MAAR,IAAiB,qCAdH,EAedR,GAAC1B,MAAM,CAACa,GAAR,IAAc,iCAfA,EAgBda,GAAC1B,MAAM,CAACmC,KAAR,IAAgB,oCAhBF,EAiBdT,GAAC1B,MAAM,CAACoC,MAAR,IAAiB,qCAjBH,EAkBdV,GAAC1B,MAAM,CAACwB,GAAR,IAAc,iCAlBA,EAmBdE,GAAC1B,MAAM,CAACqC,KAAR,IAAgB,oCAnBF,EAoBdX,GAAC1B,MAAM,CAACsC,MAAR,IAAiB,qCApBH,KAAhB;AAuBA;;;;;;AAKaxC,wBAAYyC,SACvBA,GAACxC,IAAI,CAACyC,MAAN,IAAexC,MAAM,CAACG,GADC,EAEvBoC,GAACxC,IAAI,CAAC0C,QAAN,IAAiBzC,MAAM,CAACK,GAFD,EAGvBkC,GAACxC,IAAI,CAAC2C,MAAN,IAAe1C,MAAM,CAACO,GAHC,EAIvBgC,GAACxC,IAAI,CAAC4C,SAAN,IAAkB3C,MAAM,CAACmB,GAJF,EAKvBoB,GAACxC,IAAI,CAAC6C,KAAN,IAAc5C,MAAM,CAACS,GALE,EAMvB8B,GAACxC,IAAI,CAAC8C,SAAN,IAAkB7C,MAAM,CAACW,GANF,EAOvB4B,GAACxC,IAAI,CAAC+C,OAAN,IAAgB9C,MAAM,CAACa,GAPA,EAQvB0B,GAACxC,IAAI,CAACgD,QAAN,IAAiB/C,MAAM,CAACwB,GARD,EASvBe,GAACxC,IAAI,CAACiD,OAAN,IAAgBhD,MAAM,CAAC6B,GATA;AAUvB;;;AAGAU,GAACxC,IAAI,CAACkD,SAAN,IAAkBjD,MAAM,CAACmC,KAbF,EAcvBI,GAACxC,IAAI,CAACmD,SAAN,IAAkBlD,MAAM,CAACqC,KAdF,EAevBE,GAACxC,IAAI,CAACoD,QAAN,IAAiBnD,MAAM,CAAC8B,KAfD,EAgBvBS,GAACxC,IAAI,CAACqD,WAAN,IAAoBpD,MAAM,CAAC4B,KAhBJ,EAiBvBW,GAACxC,IAAI,CAACsD,WAAN,IAAoBrD,MAAM,CAACiC,KAjBJ,EAkBvBM,GAACxC,IAAI,CAACuD,QAAN,IAAiBtD,MAAM,CAAC2B,KAlBD,EAmBvBY,GAACxC,IAAI,CAACwD,OAAN,IAAgBvD,MAAM,CAACgC,KAnBA,IAAZ;AAsBb;;;;;;AAKalC,wBAAY0D,SACvBA,GAACxD,MAAM,CAACG,GAAR,IAAcJ,IAAI,CAACyC,MADI,EAEvBgB,GAACxD,MAAM,CAACK,GAAR,IAAcN,IAAI,CAAC0C,QAFI,EAGvBe,GAACxD,MAAM,CAACO,GAAR,IAAcR,IAAI,CAAC2C,MAHI,EAIvBc,GAACxD,MAAM,CAACmB,GAAR,IAAcpB,IAAI,CAAC4C,SAJI,EAKvBa,GAACxD,MAAM,CAACS,GAAR,IAAcV,IAAI,CAAC6C,KALI,EAMvBY,GAACxD,MAAM,CAACW,GAAR,IAAcZ,IAAI,CAAC8C,SANI,EAOvBW,GAACxD,MAAM,CAACa,GAAR,IAAcd,IAAI,CAAC+C,OAPI,EAQvBU,GAACxD,MAAM,CAACwB,GAAR,IAAczB,IAAI,CAACgD,QARI,EASvBS,GAACxD,MAAM,CAAC6B,GAAR,IAAc9B,IAAI,CAACiD,OATI;AAUvB;;;AAGAQ,GAACxD,MAAM,CAACmC,KAAR,IAAgBpC,IAAI,CAACkD,SAbE,EAcvBO,GAACxD,MAAM,CAACqC,KAAR,IAAgBtC,IAAI,CAACmD,SAdE,EAevBM,GAACxD,MAAM,CAAC8B,KAAR,IAAgB/B,IAAI,CAACoD,QAfE,EAgBvBK,GAACxD,MAAM,CAAC4B,KAAR,IAAgB7B,IAAI,CAACqD,WAhBE,EAiBvBI,GAACxD,MAAM,CAACiC,KAAR,IAAgBlC,IAAI,CAACsD,WAjBE,EAkBvBG,GAACxD,MAAM,CAAC2B,KAAR,IAAgB5B,IAAI,CAACuD,QAlBE,EAmBvBE,GAACxD,MAAM,CAACgC,KAAR,IAAgBjC,IAAI,CAACwD,OAnBE;AAoBvB;;;AAGAC,GAACxD,MAAM,CAACoC,MAAR,IAAiBrC,IAAI,CAACkD,SAvBC,EAwBvBO,GAACxD,MAAM,CAACsC,MAAR,IAAiBvC,IAAI,CAACkD,SAxBC,EAyBvBO,GAACxD,MAAM,CAAC+B,MAAR,IAAiBhC,IAAI,CAACoD,QAzBC,EA0BvBK,GAACxD,MAAM,CAACkC,MAAR,IAAiBnC,IAAI,CAACsD,WA1BC,IAAZ;AA6Bb;;;;;;;AAMavD,wBAAwB,KAAxB;AAEb;;;;;;AAKaA,sBAAoBC,IAAI,CAACiD,OAAzB;AAEb;;;;;;AAKalD,kCAAkC,6BAAlC;AAEb;;;;;;AAKA,IAAM2D,sBAAsB,GAAW,oBAAvC;AAEA;;;;;AAIA,SAASC,sBAAT,CAAgCC,MAAhC,EAA8C;EAC5C,OAAOA,MAAM,KAAK7D,qBAAX,GACHA,+BADG,GAEH,sBAAoB6D,MAApB,GAA0B,aAF9B;AAGD;AAED;;;;;;AAIA,SAASC,oBAAT,CAA8BC,IAA9B,EAA0C;EACxC,OAAO,cAAYA,IAAZ,GAAgB,aAAvB;AACD;AAED;;;;;;AAIA,SAAgBC,qBAAhB,CAAsCH,MAAtC,EAAoD;EAClD,OAAOA,MAAM,GACT,aAAWA,MAAX,GAAiB,aADR,GAETF,sBAFJ;AAGD;;AAJD3D;AAMA;;;;;AAIA,SAAgBiE,0BAAhB,CAA2CC,GAA3C,EAAsD;EACpD,OAAO,WAASA,GAAT,GAAY,SAAnB;AACD;;AAFDlE;AAIA;;;;;;;;;;;;;;AAaA,SAAgBmE,cAAhB,CACEJ,IADF,EAEEF,MAFF,EAGEO,YAHF,EAG0C;EAExC,IAAI,CAAC,CAACP,MAAF,IAAY,OAAOA,MAAP,KAAkB,QAAlC,EAA4C;IAC1C,MAAM,IAAIQ,6BAAJ,CACJ,uDADI,CAAN;EAGD;;EAED,IAAI,CAAC,CAACN,IAAF,IAAU,OAAOA,IAAP,KAAgB,QAA1B,IAAsC,CAACO,KAAK,CAACC,OAAN,CAAcR,IAAd,CAA3C,EAAgE;IAC9D,MAAM,IAAIM,6BAAJ,CACJ,4EADI,CAAN;EAGD;;EAED,IAAMG,kBAAkB,GAAa,EAArC;EACA,IAAIC,IAAJ;;EAEA,IAAIZ,MAAM,IAAIE,IAAd,EAAoB;IAClB,MAAM,IAAIM,6BAAJ,CACJ,4DACA,0BAFI,CAAN;EAID,CALD,MAKO,IAAIR,MAAJ,EAAY;IACjB,IAAIa,aAAa,GAAGb,MAApB;IAEAW,kBAAkB,CAACG,IAAnB,CACE,wEACA,gEAFF;IAKA,IAAMC,kBAAkB,GACrBC,MAAM,CAACC,MAAP,CAAc/E,gBAAd,EAA6CgF,QAA7C,CAAsDL,aAAtD,CADH;;IAEA,IAAIE,kBAAJ,EAAwB;MACtBF,aAAa,GAAG1E,0BAAkB0E,aAAlB,CAAhB;IACD;;IAED,IAAMM,aAAa,GAChBH,MAAM,CAACC,MAAP,CAAc5E,MAAd,EAAmC6E,QAAnC,CAA4CL,aAA5C,CADH;;IAEA,IAAIM,aAAJ,EAAmB;MACjB,IAAMC,aAAa,GAAGjF,qBAAa0E,aAAb,CAAtB;MACAF,kBAAkB,CAACG,IAAnB,CACE,cAAWD,aAAX,GAAwB,sCAAxB,IACA,OAAIO,aAAJ,GAAiB,KADjB,CADF;IAID;;IAEDR,IAAI,GAAG,CAACb,sBAAsB,CAACc,aAAD,CAAvB,CAAP;EACD,CAzBM,MAyBA,IAAIX,IAAJ,EAAU;IACf,IAAMmB,YAAU,GAAGL,MAAM,CAACC,MAAP,CAAc7E,IAAd,CAAnB;IACA,IAAMkF,UAAU,GAAGb,KAAK,CAACC,OAAN,CAAcR,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAAhD;IAEAU,IAAI,GAAGU,UAAU,CAACC,GAAX,CAAe,UAACC,KAAD,EAAY;MAAK,mBAAU,CAACN,QAAX,CAAoBM,KAApB,IACnCzB,sBAAsB,CAAC5D,qBAAaqF,KAAb,CAAD,CADa,GAEnCvB,oBAAoB,CAACuB,KAAD,CAFe;IAER,CAFxB,CAAP;EAGD,CAPM,MAOA;IACLZ,IAAI,GAAG,CAACzE,+BAAD,CAAP;EACD;;EAED,IAAIoE,YAAY,IAAII,kBAAkB,CAACc,MAAvC,EAA+C;IAC7CC,UAAU,CAAC;MAAM,mBAAY,CAACf,kBAAkB,CAACgB,IAAnB,CAAwB,IAAxB,CAAD,CAAZ;IAA2C,CAAlD,CAAV;EACD;;EAED,OAAOf,IAAP;AACD;;AAlEDzE;AAoEA;;;;;;;AAMA,SAAgByF,kBAAhB,CAAmC5B,MAAnC,EAAiD;EAC/C,OAAO7D,yBAAiB6D,MAAjB,KAA4B,IAAnC;AACD;;AAFD7D","names":["DeprecatedRegion","exports","Edge","Region","_a","Au","Au1","Br","Br1","Ie","Ie1","Jp","Jp1","Sg","Sg1","UsOr","Us1","UsVa","ASIAPAC_SINGAPORE","ASIAPAC_SYDNEY","ASIAPAC_TOKYO","EU_FRANKFURT","De1","EU_IRELAND","SOUTH_AMERICA_SAO_PAULO","US_EAST_VIRGINIA","US_WEST_OREGON","Us2","regionURIs","_b","Au1Ix","De1Ix","Gll","Ie1Ix","Ie1Tnx","Jp1Ix","Sg1Ix","Sg1Tnx","Us1Ix","Us1Tnx","Us2Ix","Us2Tnx","_c","Sydney","SaoPaulo","Dublin","Frankfurt","Tokyo","Singapore","Ashburn","Umatilla","Roaming","AshburnIx","SanJoseIx","LondonIx","FrankfurtIx","SingaporeIx","SydneyIx","TokyoIx","_d","defaultEventGatewayURI","createChunderRegionURI","region","createChunderEdgeURI","edge","createEventGatewayURI","createSignalingEndpointURL","uri","getChunderURIs","onDeprecated","errors_1","Array","isArray","deprecatedMessages","uris","chunderRegion","push","isDeprecatedRegion","Object","values","includes","isKnownRegion","preferredEdge","edgeValues_1","edgeParams","map","param","length","setTimeout","join","getRegionShortcode"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/@twilio/voice-sdk/lib/twilio/regions.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nimport { InvalidArgumentError } from './errors';\n\n/**\n * Valid deprecated regions.\n * @private\n */\nexport enum DeprecatedRegion {\n  Au = 'au',\n  Br = 'br',\n  Ie = 'ie',\n  Jp = 'jp',\n  Sg = 'sg',\n  UsOr = 'us-or',\n  UsVa = 'us-va',\n}\n\n/**\n * Valid edges.\n * @private\n */\nexport enum Edge {\n  /**\n   * Public edges\n   */\n  Sydney = 'sydney',\n  SaoPaulo = 'sao-paulo',\n  Dublin = 'dublin',\n  Frankfurt = 'frankfurt',\n  Tokyo = 'tokyo',\n  Singapore = 'singapore',\n  Ashburn = 'ashburn',\n  Umatilla = 'umatilla',\n  Roaming = 'roaming',\n  /**\n   * Interconnect edges\n   */\n  AshburnIx = 'ashburn-ix',\n  SanJoseIx = 'san-jose-ix',\n  LondonIx = 'london-ix',\n  FrankfurtIx = 'frankfurt-ix',\n  SingaporeIx = 'singapore-ix',\n  SydneyIx = 'sydney-ix',\n  TokyoIx = 'tokyo-ix',\n}\n\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won't\n * be able to connect, and won't throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nexport enum Region {\n  Au1 = 'au1',\n  Au1Ix = 'au1-ix',\n  Br1 = 'br1',\n  De1 = 'de1',\n  De1Ix = 'de1-ix',\n  Gll = 'gll',\n  Ie1 = 'ie1',\n  Ie1Ix = 'ie1-ix',\n  Ie1Tnx = 'ie1-tnx',\n  Jp1 = 'jp1',\n  Jp1Ix = 'jp1-ix',\n  Sg1 = 'sg1',\n  Sg1Ix = 'sg1-ix',\n  Sg1Tnx = 'sg1-tnx',\n  Us1 = 'us1',\n  Us1Ix = 'us1-ix',\n  Us1Tnx = 'us1-tnx',\n  Us2 = 'us2',\n  Us2Ix = 'us2-ix',\n  Us2Tnx = 'us2-tnx',\n}\n\n/**\n * All valid regions\n * @private\n */\nexport type ValidRegion = Region | DeprecatedRegion;\n\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\nexport const deprecatedRegions: Record<DeprecatedRegion, Region> = {\n  [DeprecatedRegion.Au]: Region.Au1,\n  [DeprecatedRegion.Br]: Region.Br1,\n  [DeprecatedRegion.Ie]: Region.Ie1,\n  [DeprecatedRegion.Jp]: Region.Jp1,\n  [DeprecatedRegion.Sg]: Region.Sg1,\n  [DeprecatedRegion.UsOr]: Region.Us1,\n  [DeprecatedRegion.UsVa]: Region.Us1,\n};\n\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexport const regionShortcodes: { [index: string]: Region } = {\n  ASIAPAC_SINGAPORE: Region.Sg1,\n  ASIAPAC_SYDNEY: Region.Au1,\n  ASIAPAC_TOKYO: Region.Jp1,\n  EU_FRANKFURT: Region.De1,\n  EU_IRELAND: Region.Ie1,\n  SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n  US_EAST_VIRGINIA: Region.Us1,\n  US_WEST_OREGON: Region.Us2,\n};\n\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\nconst regionURIs: Record<Region, string> = {\n  [Region.Au1]: 'chunderw-vpc-gll-au1.twilio.com',\n  [Region.Au1Ix]: 'chunderw-vpc-gll-au1-ix.twilio.com',\n  [Region.Br1]: 'chunderw-vpc-gll-br1.twilio.com',\n  [Region.De1]: 'chunderw-vpc-gll-de1.twilio.com',\n  [Region.De1Ix]: 'chunderw-vpc-gll-de1-ix.twilio.com',\n  [Region.Gll]: 'chunderw-vpc-gll.twilio.com',\n  [Region.Ie1]: 'chunderw-vpc-gll-ie1.twilio.com',\n  [Region.Ie1Ix]: 'chunderw-vpc-gll-ie1-ix.twilio.com',\n  [Region.Ie1Tnx]: 'chunderw-vpc-gll-ie1-tnx.twilio.com',\n  [Region.Jp1]: 'chunderw-vpc-gll-jp1.twilio.com',\n  [Region.Jp1Ix]: 'chunderw-vpc-gll-jp1-ix.twilio.com',\n  [Region.Sg1]: 'chunderw-vpc-gll-sg1.twilio.com',\n  [Region.Sg1Ix]: 'chunderw-vpc-gll-sg1-ix.twilio.com',\n  [Region.Sg1Tnx]: 'chunderw-vpc-gll-sg1-tnx.twilio.com',\n  [Region.Us1]: 'chunderw-vpc-gll-us1.twilio.com',\n  [Region.Us1Ix]: 'chunderw-vpc-gll-us1-ix.twilio.com',\n  [Region.Us1Tnx]: 'chunderw-vpc-gll-us1-tnx.twilio.com',\n  [Region.Us2]: 'chunderw-vpc-gll-us2.twilio.com',\n  [Region.Us2Ix]: 'chunderw-vpc-gll-us2-ix.twilio.com',\n  [Region.Us2Tnx]: 'chunderw-vpc-gll-us2-tnx.twilio.com',\n};\n\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const edgeToRegion: Record<Edge, Region> = {\n  [Edge.Sydney]: Region.Au1,\n  [Edge.SaoPaulo]: Region.Br1,\n  [Edge.Dublin]: Region.Ie1,\n  [Edge.Frankfurt]: Region.De1,\n  [Edge.Tokyo]: Region.Jp1,\n  [Edge.Singapore]: Region.Sg1,\n  [Edge.Ashburn]: Region.Us1,\n  [Edge.Umatilla]: Region.Us2,\n  [Edge.Roaming]: Region.Gll,\n  /**\n   * Interconnect edges\n   */\n  [Edge.AshburnIx]: Region.Us1Ix,\n  [Edge.SanJoseIx]: Region.Us2Ix,\n  [Edge.LondonIx]: Region.Ie1Ix,\n  [Edge.FrankfurtIx]: Region.De1Ix,\n  [Edge.SingaporeIx]: Region.Sg1Ix,\n  [Edge.SydneyIx]: Region.Au1Ix,\n  [Edge.TokyoIx]: Region.Jp1Ix,\n};\n\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexport const regionToEdge: Record<Region, Edge> = {\n  [Region.Au1]: Edge.Sydney,\n  [Region.Br1]: Edge.SaoPaulo,\n  [Region.Ie1]: Edge.Dublin,\n  [Region.De1]: Edge.Frankfurt,\n  [Region.Jp1]: Edge.Tokyo,\n  [Region.Sg1]: Edge.Singapore,\n  [Region.Us1]: Edge.Ashburn,\n  [Region.Us2]: Edge.Umatilla,\n  [Region.Gll]: Edge.Roaming,\n  /**\n   * Interconnect edges\n   */\n  [Region.Us1Ix]: Edge.AshburnIx,\n  [Region.Us2Ix]: Edge.SanJoseIx,\n  [Region.Ie1Ix]: Edge.LondonIx,\n  [Region.De1Ix]: Edge.FrankfurtIx,\n  [Region.Sg1Ix]: Edge.SingaporeIx,\n  [Region.Au1Ix]: Edge.SydneyIx,\n  [Region.Jp1Ix]: Edge.TokyoIx,\n  /**\n   * Tnx regions\n   */\n  [Region.Us1Tnx]: Edge.AshburnIx,\n  [Region.Us2Tnx]: Edge.AshburnIx,\n  [Region.Ie1Tnx]: Edge.LondonIx,\n  [Region.Sg1Tnx]: Edge.SingaporeIx,\n};\n\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\nexport const defaultRegion: string = 'gll';\n\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexport const defaultEdge: Edge = Edge.Roaming;\n\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\nexport const defaultChunderRegionURI: string = 'chunderw-vpc-gll.twilio.com';\n\n/**\n * The default event gateway URI to publish to.\n * @constant\n * @private\n */\nconst defaultEventGatewayURI: string = 'eventgw.twilio.com';\n\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\nfunction createChunderRegionURI(region: string): string {\n  return region === defaultRegion\n    ? defaultChunderRegionURI\n    : `chunderw-vpc-gll-${region}.twilio.com`;\n}\n\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeURI(edge: string): string {\n  return `voice-js.${edge}.twilio.com`;\n}\n\n/**\n * String template for a region insights URI\n * @param region - The region.\n */\nexport function createEventGatewayURI(region: string): string {\n  return region\n    ? `eventgw.${region}.twilio.com`\n    : defaultEventGatewayURI;\n}\n\n/**\n * Create a signaling endpoint URL to connect a websocket to from a chunder URI.\n * @param uri the chunder URI to create a signaling endpoint URL for\n */\nexport function createSignalingEndpointURL(uri: string): string {\n  return `wss://${uri}/signal`;\n}\n\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\nexport function getChunderURIs(\n  edge: string[] | string | undefined,\n  region: string | undefined,\n  onDeprecated?: (message: string) => void,\n): string[] {\n  if (!!region && typeof region !== 'string') {\n    throw new InvalidArgumentError(\n      'If `region` is provided, it must be of type `string`.',\n    );\n  }\n\n  if (!!edge && typeof edge !== 'string' && !Array.isArray(edge)) {\n    throw new InvalidArgumentError(\n      'If `edge` is provided, it must be of type `string` or an array of strings.',\n    );\n  }\n\n  const deprecatedMessages: string[] = [];\n  let uris: string[];\n\n  if (region && edge) {\n    throw new InvalidArgumentError(\n      'You cannot specify `region` when `edge` is specified in' +\n      '`Twilio.Device.Options`.',\n    );\n  } else if (region) {\n    let chunderRegion = region;\n\n    deprecatedMessages.push(\n      'Regions are deprecated in favor of edges. Please see this page for ' +\n      'documentation: https://www.twilio.com/docs/voice/client/edges.',\n    );\n\n    const isDeprecatedRegion: boolean =\n      (Object.values(DeprecatedRegion) as string[]).includes(chunderRegion);\n    if (isDeprecatedRegion) {\n      chunderRegion = deprecatedRegions[chunderRegion as DeprecatedRegion];\n    }\n\n    const isKnownRegion: boolean =\n      (Object.values(Region) as string[]).includes(chunderRegion);\n    if (isKnownRegion) {\n      const preferredEdge = regionToEdge[chunderRegion as Region];\n      deprecatedMessages.push(\n        `Region \"${chunderRegion}\" is deprecated, please use \\`edge\\` ` +\n        `\"${preferredEdge}\".`,\n      );\n    }\n\n    uris = [createChunderRegionURI(chunderRegion)];\n  } else if (edge) {\n    const edgeValues = Object.values(Edge) as string[];\n    const edgeParams = Array.isArray(edge) ? edge : [edge];\n\n    uris = edgeParams.map((param: Edge) => edgeValues.includes(param)\n      ? createChunderRegionURI(edgeToRegion[param])\n      : createChunderEdgeURI(param));\n  } else {\n    uris = [defaultChunderRegionURI];\n  }\n\n  if (onDeprecated && deprecatedMessages.length) {\n    setTimeout(() => onDeprecated(deprecatedMessages.join('\\n')));\n  }\n\n  return uris;\n}\n\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region's full AWS string.\n */\nexport function getRegionShortcode(region: string): Region | null {\n  return regionShortcodes[region] || null;\n}\n"]},"metadata":{},"sourceType":"script"}