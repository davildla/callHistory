{"ast":null,"code":"import { EmitterImpl } from \"./emitter.js\";\nimport { SubscriptionState } from \"./subscription-state.js\";\n/**\n * A subscription provides {@link Notification} of events.\n *\n * @remarks\n * See {@link Subscriber} for details on establishing a subscription.\n *\n * @public\n */\n\nexport class Subscription {\n  /**\n   * Constructor.\n   * @param userAgent - User agent. See {@link UserAgent} for details.\n   * @internal\n   */\n  constructor(userAgent) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._disposed = false;\n    this._state = SubscriptionState.Initial;\n    this._logger = userAgent.getLogger(\"sip.Subscription\");\n    this._stateEventEmitter = new EmitterImpl();\n    this._userAgent = userAgent;\n    this.delegate = options.delegate;\n  }\n  /**\n   * Destructor.\n   */\n\n\n  dispose() {\n    if (this._disposed) {\n      return Promise.resolve();\n    }\n\n    this._disposed = true;\n\n    this._stateEventEmitter.removeAllListeners();\n\n    return Promise.resolve();\n  }\n  /**\n   * The subscribed subscription dialog.\n   */\n\n\n  get dialog() {\n    return this._dialog;\n  }\n  /**\n   * True if disposed.\n   * @internal\n   */\n\n\n  get disposed() {\n    return this._disposed;\n  }\n  /**\n   * Subscription state. See {@link SubscriptionState} for details.\n   */\n\n\n  get state() {\n    return this._state;\n  }\n  /**\n   * Emits when the subscription `state` property changes.\n   */\n\n\n  get stateChange() {\n    return this._stateEventEmitter;\n  }\n  /** @internal */\n\n\n  stateTransition(newState) {\n    const invalidTransition = () => {\n      throw new Error(`Invalid state transition from ${this._state} to ${newState}`);\n    }; // Validate transition\n\n\n    switch (this._state) {\n      case SubscriptionState.Initial:\n        if (newState !== SubscriptionState.NotifyWait && newState !== SubscriptionState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case SubscriptionState.NotifyWait:\n        if (newState !== SubscriptionState.Subscribed && newState !== SubscriptionState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case SubscriptionState.Subscribed:\n        if (newState !== SubscriptionState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case SubscriptionState.Terminated:\n        invalidTransition();\n        break;\n\n      default:\n        throw new Error(\"Unrecognized state.\");\n    } // Guard against duplicate transition\n\n\n    if (this._state === newState) {\n      return;\n    } // Transition\n\n\n    this._state = newState;\n\n    this._logger.log(`Subscription ${this._dialog ? this._dialog.id : undefined} transitioned to ${this._state}`);\n\n    this._stateEventEmitter.emit(this._state); // Dispose\n\n\n    if (newState === SubscriptionState.Terminated) {\n      this.dispose();\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}