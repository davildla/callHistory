{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors_1 = require(\"./errors\");\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\n\n\nvar bandFrequencies = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960]\n};\n\nvar DialtonePlayer =\n/** @class */\nfunction () {\n  function DialtonePlayer(_context) {\n    var _this = this;\n\n    this._context = _context;\n    /**\n     * Gain nodes, reducing the frequency.\n     */\n\n    this._gainNodes = [];\n    this._gainNodes = [this._context.createGain(), this._context.createGain()];\n\n    this._gainNodes.forEach(function (gainNode) {\n      gainNode.connect(_this._context.destination);\n      gainNode.gain.value = 0.1;\n\n      _this._gainNodes.push(gainNode);\n    });\n  }\n\n  DialtonePlayer.prototype.cleanup = function () {\n    this._gainNodes.forEach(function (gainNode) {\n      gainNode.disconnect();\n    });\n  };\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n\n\n  DialtonePlayer.prototype.play = function (sound) {\n    var _this = this;\n\n    var frequencies = bandFrequencies[sound];\n\n    if (!frequencies) {\n      throw new errors_1.InvalidArgumentError('Invalid DTMF sound name');\n    }\n\n    var oscillators = [this._context.createOscillator(), this._context.createOscillator()];\n    oscillators.forEach(function (oscillator, i) {\n      oscillator.type = 'sine';\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(_this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(_this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', function () {\n        return oscillator.disconnect();\n      });\n    });\n  };\n\n  return DialtonePlayer;\n}();\n\nexports.default = DialtonePlayer;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;AAMA;AAEA;;;;;AAGA,IAAMA,eAAe,GAAsC;EACzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CADkD;EAEzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAFkD;EAGzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAHkD;EAIzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAJkD;EAKzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CALkD;EAMzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CANkD;EAOzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAPkD;EAQzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CARkD;EASzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CATkD;EAUzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAVkD;EAWzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,CAXkD;EAYzDC,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP;AAZkD,CAA3D;;AAeA;AAAA;AAAA;EAME,wBAAoBC,QAApB,EAA0C;IAA1C;;IAAoB;IALpB;;;;IAGA,kBAAyB,EAAzB;IAGE,KAAKC,UAAL,GAAkB,CAChB,KAAKD,QAAL,CAAcE,UAAd,EADgB,EAEhB,KAAKF,QAAL,CAAcE,UAAd,EAFgB,CAAlB;;IAKA,KAAKD,UAAL,CAAgBE,OAAhB,CAAwB,UAACC,QAAD,EAAmB;MACzCA,QAAQ,CAACC,OAAT,CAAiBC,KAAI,CAACN,QAAL,CAAcO,WAA/B;MACAH,QAAQ,CAACI,IAAT,CAAcC,KAAd,GAAsB,GAAtB;;MACAH,KAAI,CAACL,UAAL,CAAgBS,IAAhB,CAAqBN,QAArB;IACD,CAJD;EAKD;;EAEDO;IACE,KAAKV,UAAL,CAAgBE,OAAhB,CAAwB,UAACC,QAAD,EAAmB;MACzCA,QAAQ,CAACQ,UAAT;IACD,CAFD;EAGD,CAJD;EAMA;;;;;;EAIAD,0CAAKE,KAAL,EAAkB;IAAlB;;IACE,IAAMC,WAAW,GAAG3B,eAAe,CAAC0B,KAAD,CAAnC;;IAEA,IAAI,CAACC,WAAL,EAAkB;MAChB,MAAM,IAAIC,6BAAJ,CAAyB,yBAAzB,CAAN;IACD;;IAED,IAAMC,WAAW,GAAqB,CACpC,KAAKhB,QAAL,CAAciB,gBAAd,EADoC,EAEpC,KAAKjB,QAAL,CAAciB,gBAAd,EAFoC,CAAtC;IAKAD,WAAW,CAACb,OAAZ,CAAoB,UAACe,UAAD,EAA6BC,CAA7B,EAAsC;MACxDD,UAAU,CAACE,IAAX,GAAkB,MAAlB;MACAF,UAAU,CAACG,SAAX,CAAqBZ,KAArB,GAA6BK,WAAW,CAACK,CAAD,CAAxC;MACAD,UAAU,CAACb,OAAX,CAAmBC,KAAI,CAACL,UAAL,CAAgBkB,CAAhB,CAAnB;MACAD,UAAU,CAACI,KAAX;MACAJ,UAAU,CAACK,IAAX,CAAgBjB,KAAI,CAACN,QAAL,CAAcwB,WAAd,GAA4B,GAA5C;MACAN,UAAU,CAACO,gBAAX,CAA4B,OAA5B,EAAqC;QAAM,iBAAU,CAACb,UAAX;MAAuB,CAAlE;IACD,CAPD;EAQD,CApBD;;EAqBF;AAAC,CAlDD","names":["bandFrequencies","dtmf0","dtmf1","dtmf2","dtmf3","dtmf4","dtmf5","dtmf6","dtmf7","dtmf8","dtmf9","dtmfh","dtmfs","_context","_gainNodes","createGain","forEach","gainNode","connect","_this","destination","gain","value","push","DialtonePlayer","disconnect","sound","frequencies","errors_1","oscillators","createOscillator","oscillator","i","type","frequency","start","stop","currentTime","addEventListener"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/node_modules/twilio-client/lib/twilio/dialtonePlayer.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\n\nimport { InvalidArgumentError } from './errors';\n\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\nconst bandFrequencies: Partial<Record<string, number[]>> = {\n  dtmf0: [1360, 960],\n  dtmf1: [1230, 720],\n  dtmf2: [1360, 720],\n  dtmf3: [1480, 720],\n  dtmf4: [1230, 790],\n  dtmf5: [1360, 790],\n  dtmf6: [1480, 790],\n  dtmf7: [1230, 870],\n  dtmf8: [1360, 870],\n  dtmf9: [1480, 870],\n  dtmfh: [1480, 960],\n  dtmfs: [1230, 960],\n};\n\nexport default class DialtonePlayer {\n  /**\n   * Gain nodes, reducing the frequency.\n   */\n  _gainNodes: GainNode[] = [];\n\n  constructor(private _context: AudioContext) {\n    this._gainNodes = [\n      this._context.createGain(),\n      this._context.createGain(),\n    ];\n\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.connect(this._context.destination);\n      gainNode.gain.value = 0.1;\n      this._gainNodes.push(gainNode);\n    });\n  }\n\n  cleanup(): void {\n    this._gainNodes.forEach((gainNode: GainNode) => {\n      gainNode.disconnect();\n    });\n  }\n\n  /**\n   * Play the dual frequency tone for the passed DTMF name.\n   * @param sound\n   */\n  play(sound: string): void {\n    const frequencies = bandFrequencies[sound];\n\n    if (!frequencies) {\n      throw new InvalidArgumentError('Invalid DTMF sound name');\n    }\n\n    const oscillators: OscillatorNode[] = [\n      this._context.createOscillator(),\n      this._context.createOscillator(),\n    ];\n\n    oscillators.forEach((oscillator: OscillatorNode, i: number) => {\n      oscillator.type = 'sine' as OscillatorType;\n      oscillator.frequency.value = frequencies[i];\n      oscillator.connect(this._gainNodes[i]);\n      oscillator.start();\n      oscillator.stop(this._context.currentTime + 0.1);\n      oscillator.addEventListener('ended', () => oscillator.disconnect());\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}