{"ast":null,"code":"import fetch from '../../lib/fetch';\nimport utils from '../utils';\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\n\nconst getRecordsCount = async systemId => {\n  const url = `${SERVER_URL}/api/records/get-records-count`;\n  let res = null;\n\n  try {\n    const resp = await fetch.fetchGet(url, {\n      systemId\n    });\n    res = resp.data;\n  } catch {}\n\n  return res;\n};\n\nconst uploadRecords = async (records, systemId) => {\n  let res = null;\n  let formatedRecords = [];\n\n  for (let index = 0; index < records.length; index++) {\n    const record = records[index];\n    record.systemId = systemId;\n    record.phone = utils.validatePhoneNumber(record.phone);\n    if (record.phone && record.name !== '') formatedRecords.push(record); // proccessing\n\n    if (index !== 0 && index % 100 === 0) {\n      console.log(formatedRecords); // send formated to server\n      // reset formated array\n\n      formatedRecords = [];\n    }\n  } // send formated that left to server\n\n};\n\nconst funcs = {\n  getRecordsCount,\n  uploadRecords\n};\nexport default funcs;","map":{"version":3,"names":["fetch","utils","SERVER_URL","process","env","REACT_APP_SERVER_URL","getRecordsCount","systemId","url","res","resp","fetchGet","data","uploadRecords","records","formatedRecords","index","length","record","phone","validatePhoneNumber","name","push","console","log","funcs"],"sources":["/home/david/Desktop/workSpace/bots-dashboard/src/utils/manage/recordsUtils.js"],"sourcesContent":["import fetch from '../../lib/fetch';\nimport utils from '../utils';\n\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\n\n\nconst getRecordsCount = async (systemId) => {\n    const url = `${SERVER_URL}/api/records/get-records-count`;\n    let res = null;\n\n    try {\n        const resp = await fetch.fetchGet(url, {systemId});\n        res = resp.data;\n    } catch {}\n\n    return res;\n}\n\nconst uploadRecords = async (records, systemId) => {\n    let res = null;\n    let formatedRecords = [];\n\n    for (let index = 0; index < records.length; index++) {\n        const record = records[index];\n\n        record.systemId = systemId;\n\n        record.phone = utils.validatePhoneNumber(record.phone);\n\n        if (record.phone && record.name !== '') formatedRecords.push(record);\n\n        // proccessing\n        if (index !== 0 && index % 100 === 0) {\n            console.log(formatedRecords);\n            // send formated to server\n            \n            // reset formated array\n            formatedRecords = []\n        }\n    }\n\n    // send formated that left to server\n}\n\nconst funcs = {\n    getRecordsCount,\n    uploadRecords,\n}\n\nexport default funcs;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;;AAGA,MAAMC,eAAe,GAAG,MAAOC,QAAP,IAAoB;EACxC,MAAMC,GAAG,GAAI,GAAEN,UAAW,gCAA1B;EACA,IAAIO,GAAG,GAAG,IAAV;;EAEA,IAAI;IACA,MAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,QAAN,CAAeH,GAAf,EAAoB;MAACD;IAAD,CAApB,CAAnB;IACAE,GAAG,GAAGC,IAAI,CAACE,IAAX;EACH,CAHD,CAGE,MAAM,CAAE;;EAEV,OAAOH,GAAP;AACH,CAVD;;AAYA,MAAMI,aAAa,GAAG,OAAOC,OAAP,EAAgBP,QAAhB,KAA6B;EAC/C,IAAIE,GAAG,GAAG,IAAV;EACA,IAAIM,eAAe,GAAG,EAAtB;;EAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,OAAO,CAACG,MAApC,EAA4CD,KAAK,EAAjD,EAAqD;IACjD,MAAME,MAAM,GAAGJ,OAAO,CAACE,KAAD,CAAtB;IAEAE,MAAM,CAACX,QAAP,GAAkBA,QAAlB;IAEAW,MAAM,CAACC,KAAP,GAAelB,KAAK,CAACmB,mBAAN,CAA0BF,MAAM,CAACC,KAAjC,CAAf;IAEA,IAAID,MAAM,CAACC,KAAP,IAAgBD,MAAM,CAACG,IAAP,KAAgB,EAApC,EAAwCN,eAAe,CAACO,IAAhB,CAAqBJ,MAArB,EAPS,CASjD;;IACA,IAAIF,KAAK,KAAK,CAAV,IAAeA,KAAK,GAAG,GAAR,KAAgB,CAAnC,EAAsC;MAClCO,OAAO,CAACC,GAAR,CAAYT,eAAZ,EADkC,CAElC;MAEA;;MACAA,eAAe,GAAG,EAAlB;IACH;EACJ,CArB8C,CAuB/C;;AACH,CAxBD;;AA0BA,MAAMU,KAAK,GAAG;EACVnB,eADU;EAEVO;AAFU,CAAd;AAKA,eAAeY,KAAf"},"metadata":{},"sourceType":"module"}