{"ast":null,"code":"import { NameAddrHeader } from \"../grammar/name-addr-header.js\";\n/**\n * A request to establish a {@link Session} elsewhere (incoming REFER).\n * @public\n */\n\nexport class Referral {\n  /** @internal */\n  constructor(incomingReferRequest, session) {\n    this.incomingReferRequest = incomingReferRequest;\n    this.session = session;\n  }\n\n  get referTo() {\n    const referTo = this.incomingReferRequest.message.parseHeader(\"refer-to\");\n\n    if (!(referTo instanceof NameAddrHeader)) {\n      throw new Error(\"Failed to parse Refer-To header.\");\n    }\n\n    return referTo;\n  }\n\n  get referredBy() {\n    return this.incomingReferRequest.message.getHeader(\"referred-by\");\n  }\n\n  get replaces() {\n    const value = this.referTo.uri.getHeader(\"replaces\");\n\n    if (value instanceof Array) {\n      return value[0];\n    }\n\n    return value;\n  }\n  /** Incoming REFER request message. */\n\n\n  get request() {\n    return this.incomingReferRequest.message;\n  }\n  /** Accept the request. */\n\n\n  accept() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      statusCode: 202\n    };\n    this.incomingReferRequest.accept(options);\n    return Promise.resolve();\n  }\n  /** Reject the request. */\n\n\n  reject(options) {\n    this.incomingReferRequest.reject(options);\n    return Promise.resolve();\n  }\n  /**\n   * Creates an inviter which may be used to send an out of dialog INVITE request.\n   *\n   * @remarks\n   * This a helper method to create an Inviter which will execute the referral\n   * of the `Session` which was referred. The appropriate headers are set and\n   * the referred `Session` is linked to the new `Session`. Note that only a\n   * single instance of the `Inviter` will be created and returned (if called\n   * more than once a reference to the same `Inviter` will be returned every time).\n   *\n   * @param options - Options bucket.\n   * @param modifiers - Session description handler modifiers.\n   */\n\n\n  makeInviter(options) {\n    if (this.inviter) {\n      return this.inviter;\n    }\n\n    const targetURI = this.referTo.uri.clone();\n    targetURI.clearHeaders();\n    options = options || {};\n    const extraHeaders = (options.extraHeaders || []).slice();\n    const replaces = this.replaces;\n\n    if (replaces) {\n      // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\n      extraHeaders.push(\"Replaces: \" + decodeURIComponent(replaces));\n    }\n\n    const referredBy = this.referredBy;\n\n    if (referredBy) {\n      extraHeaders.push(\"Referred-By: \" + referredBy);\n    }\n\n    options.extraHeaders = extraHeaders;\n    this.inviter = this.session.userAgent._makeInviter(targetURI, options);\n    this.inviter._referred = this.session;\n    this.session._referral = this.inviter;\n    return this.inviter;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}